var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddCompanyToUserDto.html",[0,0.042,1,2.961]],["body/classes/AddCompanyToUserDto.html",[0,0.064,1,4.541,2,1.62,3,0.131,4,0.131,5,0.118,6,4.459,7,0.315,8,1.436,9,4.745,10,6.391,11,0.387,12,0.01,13,1.142,14,1.929,15,2.741,16,4.853,17,2.388,18,3.535,19,2.988,20,0.762,21,5.073,22,5.243,23,4.459,24,5.073,25,0.447,26,3.362,27,2.524,28,3.618,29,1.765,30,3.362,31,2.524,32,2.942,33,1.576,34,4.058,35,3.511,36,0.118,37,2.741,38,3.144,39,0.008,40,0.008]],["title/classes/AddManagerToUserDto.html",[0,0.042,41,2.961]],["body/classes/AddManagerToUserDto.html",[0,0.064,2,1.616,3,0.13,4,0.13,5,0.117,7,0.314,8,1.434,10,6.383,11,0.387,12,0.01,13,1.141,14,1.925,15,2.736,17,2.386,18,3.529,20,0.76,22,6.138,23,5.756,25,0.446,26,3.357,27,2.517,28,3.613,29,1.76,30,3.357,31,2.517,32,2.938,33,1.572,34,4.492,35,3.501,36,0.117,37,2.736,38,3.139,39,0.008,40,0.008,41,4.532,42,4.447,43,7.262,44,5.059,45,5.059]],["title/classes/AllExceptionsFilter.html",[0,0.042,46,3.419]],["body/classes/AllExceptionsFilter.html",[0,0.045,2,1.456,3,0.117,4,0.117,5,0.106,7,0.283,8,1.338,11,0.269,12,0.01,13,0.677,20,0.71,25,0.387,36,0.106,39,0.007,40,0.007,46,4.886,47,6.064,48,3.643,49,2.827,50,6.064,51,2.791,52,6.899,53,1.303,54,4.147,55,2.974,56,2.974,57,4.558,58,5.374,59,4.81,60,4.775,61,6.48,62,4.006,63,0.946,64,0.946,65,0.677,66,4.231,67,0.921,68,2.827,69,3.989,70,0.759,71,3.989,72,3.685,73,2.184,74,4.231,75,4.558,76,4.558,77,2.392,78,4.006,79,4.006,80,4.006,81,4.558,82,5.514,83,4.006,84,7.372,85,4.558,86,4.558,87,4.558,88,4.558,89,2.184,90,3.643,91,2.684,92,2.564,93,4.558,94,2.819,95,4.558,96,2.456,97,1.844,98,2.035]],["title/modules/AppModule.html",[99,1.293,100,2.961]],["body/modules/AppModule.html",[0,0.033,3,0.086,4,0.086,5,0.078,11,0.198,12,0.01,20,0.389,25,0.469,36,0.078,39,0.006,40,0.006,53,0.713,63,0.694,64,0.694,65,0.497,67,0.676,68,2.275,70,0.558,92,1.883,94,2.07,99,1.487,100,6.042,101,1.398,102,2.358,103,2.942,104,2.942,105,4.959,106,4.959,107,4.675,108,4.959,109,4.675,110,4.675,111,4.959,112,4.675,113,4.959,114,4.675,115,4.742,116,4.432,117,2.545,118,1.731,119,1.665,120,2.942,121,2.358,122,3.347,123,4.324,124,5.653,125,3.347,126,3.347,127,2.942,128,3.347,129,1.971,130,1.445,131,3.347,132,2.942,133,3.347,134,2.675,135,2.942,136,3.347,137,2.942,138,3.347,139,3.347,140,2.942,141,2.942,142,3.347,143,3.347,144,2.316,145,2.316,146,3.347,147,3.347,148,3.347,149,3.347,150,8.301,151,3.347,152,4.92,153,3.347,154,3.347,155,3.347,156,2.675,157,3.347,158,3.347,159,6.431,160,3.347,161,3.347,162,3.347,163,2.942,164,3.347,165,2.942,166,2.942,167,2.942,168,2.942,169,3.347,170,3.347,171,2.942,172,2.942,173,3.347,174,3.347,175,2.942,176,2.942,177,2.942,178,3.347,179,3.347,180,3.347,181,1.312,182,2.942,183,2.942]],["title/controllers/AuthenticationController.html",[184,1.787,185,3.164]],["body/controllers/AuthenticationController.html",[0,0.025,3,0.065,4,0.065,5,0.059,7,0.158,11,0.33,12,0.011,14,1.893,17,2,20,0.747,25,0.427,33,0.79,36,0.059,39,0.005,40,0.005,51,1.994,53,0.851,63,1.158,64,1.158,65,0.829,67,1.3,70,0.424,72,3.227,77,1.833,184,1.062,185,2.952,186,1.029,187,2.032,188,1.497,189,3.41,190,2.135,191,2.135,192,4.928,193,3.991,194,2.604,195,4.331,196,5.582,197,5.582,198,2.542,199,4.539,200,3.791,201,2.542,202,2.542,203,2.429,204,2.542,205,2.542,206,2.542,207,2.542,208,2.542,209,2.542,210,2.234,211,3.642,212,2.542,213,2.542,214,3.19,215,2.542,216,2.542,217,2.542,218,2.542,219,3.991,220,3.965,221,2.351,222,2.151,223,3.19,224,1.497,225,1.497,226,2.234,227,1.497,228,1.497,229,2.032,230,2.902,231,1.88,232,2.234,233,1.88,234,2.542,235,2.278,236,1.497,237,1.88,238,3.508,239,2.542,240,3.048,241,2.542,242,1.029,243,1.218,244,2.234,245,1.659,246,2.542,247,1.759,248,2.234,249,2.542,250,1.497,251,0.997,252,1.818,253,2.375,254,3.791,255,2.542,256,3.508,257,2.291,258,2.542,259,2.542,260,1.64,261,2.542,262,2.542,263,2.952,264,1.986,265,2.542,266,2.542,267,3.508,268,2.542,269,2.542,270,2.452,271,4.907,272,2.542,273,3.864,274,3.991,275,1.497,276,2.032,277,2.542,278,2.542,279,2.234,280,4.331,281,3.508,282,2.234,283,2.542,284,2.542,285,2.542,286,2.542,287,1.659,288,2.542,289,2.542,290,2.542,291,2.542,292,2.234,293,2.234,294,2.234]],["title/modules/AuthenticationModule.html",[99,1.293,105,2.961]],["body/modules/AuthenticationModule.html",[0,0.04,3,0.105,4,0.105,5,0.094,12,0.011,25,0.477,36,0.094,39,0.007,40,0.007,70,0.677,99,1.708,101,1.698,102,2.71,105,6.054,109,4.989,116,4.73,117,2.924,118,2.102,119,2.022,121,2.71,129,3.329,130,1.755,134,3.248,135,3.572,185,4.808,186,2.287,194,2.652,230,4.938,231,3.006,295,3.572,296,3.572,297,4.064,298,3.572,299,5.292,300,5.292,301,5.292,302,5.292,303,4.989,304,4.064,305,3.046,306,4.808,307,2.924,308,4.064,309,5.653,310,2.19,311,4.064,312,3.572,313,2.813,314,4.064,315,5.653,316,4.064,317,4.064,318,4.064,319,3.006,320,4.064,321,3.572]],["title/injectables/AuthenticationService.html",[230,2.519,322,0.754]],["body/injectables/AuthenticationService.html",[0,0.024,3,0.062,4,0.062,5,0.056,7,0.15,11,0.372,12,0.011,13,1.131,20,0.766,25,0.395,36,0.056,39,0.004,40,0.004,51,2.545,53,0.815,54,3.048,55,1.572,56,1.572,59,3.535,63,1.305,64,1.305,65,0.934,67,1.271,69,1.572,70,0.401,77,2.13,91,3.191,92,3.048,97,2.391,130,1.04,163,3.362,165,3.362,190,2.058,191,2.114,194,1.572,195,4.182,203,2.396,210,3.362,211,3.535,214,3.057,230,2.253,235,2.909,236,1.419,242,0.975,243,1.155,244,2.117,251,1.5,252,1.756,253,2.321,257,1.942,260,1.439,270,2.367,273,2.647,275,2.802,313,1.667,322,0.674,323,0.814,324,2.117,325,4.758,326,5.418,327,5.418,328,5.418,329,5.418,330,2.117,331,5.796,332,3.553,333,2.409,334,2.409,335,6.291,336,2.409,337,1.925,338,2.409,339,2.409,340,1.901,341,4.762,342,2.409,343,4.653,344,1.903,345,2.409,346,2.409,347,2.409,348,2.409,349,6.291,350,2.409,351,2.2,352,3.057,353,2.943,354,1.782,355,1.782,356,2.409,357,2.409,358,2.117,359,3.191,360,3.825,361,2.409,362,2.152,363,2.409,364,1.782,365,2.732,366,2.409,367,2.647,368,3.362,369,2.496,370,2.409,371,3.362,372,3.362,373,3.362,374,2.409,375,5.418,376,5.418,377,3.825,378,2.409,379,2.409,380,2.409,381,3.825,382,1.925,383,3.825,384,2.409,385,3.057,386,3.825,387,2.117]],["title/entities/CategoriesEntity.html",[388,1.847,389,2.961]],["body/entities/CategoriesEntity.html",[0,0.047,3,0.123,4,0.123,5,0.111,7,0.298,8,1.384,11,0.484,12,0.01,13,0.939,14,2.299,20,0.908,25,0.355,36,0.111,39,0.007,40,0.007,96,4.054,98,3.359,190,2.219,264,3.52,340,1.911,388,2.07,389,4.377,390,2.698,391,4.215,392,4.167,393,2.956,394,5.784,395,4.167,396,2.966,397,4.795,398,4.377,399,4.795,400,4.054,401,4.215,402,6.324,403,4.795,404,4.617,405,4.795,406,4.215,407,4.795,408,3.832,409,4.377,410,3.912,411,5.558,412,1.94,413,4.795]],["title/modules/CategoriesModule.html",[99,1.293,106,2.961]],["body/modules/CategoriesModule.html",[0,0.059,3,0.155,4,0.155,5,0.14,12,0.01,25,0.47,36,0.14,39,0.009,40,0.009,70,1.006,99,2.211,101,2.523,106,5.064,121,2.894,389,4.179,414,6.039,415,6.039,416,3.556,417,2.792,418,6.039,419,6.039,420,6.039,421,6.039,422,6.039]],["title/controllers/CompaniesController.html",[184,1.787,423,3.164]],["body/controllers/CompaniesController.html",[0,0.032,3,0.083,4,0.083,5,0.075,7,0.2,9,4.399,11,0.373,12,0.011,13,1.049,14,1.982,17,2.094,20,0.783,25,0.41,33,1,36,0.075,39,0.006,40,0.006,53,1.019,63,1.309,64,1.309,65,0.937,67,1.362,70,0.536,184,1.344,186,1.302,188,1.895,190,2.176,191,2.176,200,3.97,203,2.495,220,4.16,221,2.815,222,3.633,224,1.895,225,1.895,227,1.895,228,1.895,250,1.895,252,1.187,253,2.488,254,3.97,257,2.215,260,1.642,351,1.488,412,1.302,423,3.535,424,2.829,425,3.218,426,5.011,427,5.011,428,5.546,429,5.701,430,4.557,431,2.829,432,4.367,433,2.572,434,3.218,435,4.201,436,2.829,437,3.218,438,3.218,439,4.201,440,3.218,441,3.218,442,2.956,443,2.956,444,3.218,445,3.218,446,4.367,447,3.218,448,3.218,449,3.82,450,3.527,451,2.829,452,1.895,453,2.572,454,2.572,455,2.829,456,4.201,457,2.38,458,3.218,459,1.81,460,2.572,461,3.218,462,4.201,463,3.218,464,2.829,465,3.218,466,3.218,467,3.218,468,3.218]],["title/entities/CompaniesEntity.html",[388,1.847,452,2.519]],["body/entities/CompaniesEntity.html",[0,0.025,3,0.066,4,0.066,5,0.059,7,0.158,8,0.876,9,3.221,11,0.494,12,0.011,13,1.184,14,2.237,15,3.178,16,2.959,17,2.598,20,0.883,25,0.277,32,3.122,33,0.792,36,0.059,37,3.178,39,0.005,40,0.005,65,1.037,96,3.013,98,2.497,181,3.025,190,2.251,242,2.458,243,1.222,340,1.209,388,1.101,390,1.434,392,2.907,393,2.336,395,2.907,396,1.577,398,2.474,404,4.791,409,2.768,410,2.474,412,1.031,442,2.474,443,3.757,452,2.356,469,2.241,470,3.945,471,3.945,472,3.945,473,3.945,474,3.945,475,3.945,476,3.945,477,4.461,478,4.482,479,2.549,480,3.197,481,2.549,482,3.869,483,2.549,484,2.356,485,1.764,486,2.549,487,3.197,488,5.405,489,3.651,490,2.549,491,2.549,492,3.197,493,2.549,494,3.197,495,2.549,496,2.549,497,2.959,498,2.549,499,2.549,500,2.959,501,2.549,502,4,503,2.549,504,2.549]],["title/modules/CompaniesModule.html",[99,1.293,107,2.791]],["body/modules/CompaniesModule.html",[0,0.053,3,0.14,4,0.14,5,0.126,12,0.01,25,0.457,36,0.126,39,0.008,40,0.008,70,0.908,99,2.075,101,2.276,102,3.291,107,5.504,117,3.552,118,2.818,119,2.711,121,2.611,186,2.778,305,3.7,307,3.552,416,3.209,417,2.519,423,5.561,450,5.424,451,4.789,452,3.209,453,4.355,505,4.789,506,4.789,507,4.789,508,5.449,509,5.449,510,5.449]],["title/injectables/CompaniesService.html",[322,0.754,450,2.646]],["body/injectables/CompaniesService.html",[0,0.026,3,0.067,4,0.067,5,0.06,7,0.162,9,4.822,11,0.384,12,0.011,13,1.073,20,0.789,25,0.365,36,0.06,39,0.005,40,0.005,51,1.055,53,0.868,54,3.66,63,1.35,64,1.35,65,0.966,67,1.314,70,0.434,77,1.855,97,2.924,98,1.164,190,2.144,191,2.144,203,2.444,222,2.194,251,1.596,252,0.962,253,2.401,257,2.31,260,1.495,322,0.717,323,0.881,351,3.341,359,3.615,365,3.251,412,1.055,417,1.205,426,4.975,427,4.975,428,5.396,430,4.523,431,2.291,432,3.917,435,5.396,436,2.291,443,1.613,446,3.917,450,2.518,452,1.535,453,2.084,454,2.084,455,2.291,456,3.578,457,1.928,511,2.291,512,5.008,513,5.66,514,2.607,515,3.917,516,2.607,517,4.071,518,2.607,519,2.607,520,2.607,521,2.607,522,2.607,523,2.607,524,2.607,525,2.607,526,2.607,527,1.804,528,2.607,529,4.071,530,2.607,531,2.607,532,4.906,533,2.607,534,2.084,535,2.291,536,6.496,537,5.66,538,2.607,539,2.084,540,2.607,541,2.607,542,2.607,543,2.084,544,2.607]],["title/classes/ConfirmEmailDto.html",[0,0.042,545,3.164]],["body/classes/ConfirmEmailDto.html",[0,0.068,2,1.783,3,0.144,4,0.144,5,0.129,7,0.346,8,1.526,11,0.33,12,0.011,13,1.035,14,1.641,15,2.332,17,2.166,18,3.007,19,3.287,20,0.648,25,0.447,26,3.223,27,2.777,28,3.468,29,1.942,30,3.223,31,2.777,32,2.82,33,1.734,36,0.129,37,2.332,38,2.675,39,0.008,40,0.008,275,4.477,545,5.156,546,4.905,547,5.581]],["title/classes/CreateCompanyDto.html",[0,0.042,432,2.961]],["body/classes/CreateCompanyDto.html",[0,0.048,2,1.061,3,0.086,4,0.086,5,0.077,7,0.206,8,1.071,9,3.791,11,0.448,12,0.011,13,1.24,14,2.229,15,3.168,16,3.62,17,2.593,18,3.851,19,4.023,20,0.88,25,0.383,26,3.416,27,1.653,28,3.676,29,1.156,30,3.579,31,1.653,32,3.132,33,1.032,36,0.077,37,3.168,38,3.425,39,0.006,40,0.006,65,0.952,432,3.387,470,4.643,471,4.643,472,4.643,473,4.643,474,4.643,475,4.643,476,4.643,480,3.911,487,3.911,492,3.911,494,3.911,548,6.803,549,2.656,550,3.323,551,2.921,552,3.323,553,3.911,554,3.323,555,3.323,556,3.323,557,3.323,558,3.323,559,3.323,560,3.791,561,3.791,562,3.193,563,2.458]],["title/classes/CreateManagerDto.html",[0,0.042,564,2.961]],["body/classes/CreateManagerDto.html",[0,0.057,2,1.361,3,0.11,4,0.11,5,0.099,7,0.265,8,1.279,11,0.424,12,0.011,13,1.202,14,2.108,15,2.996,17,2.514,18,3.864,19,3.44,20,0.832,25,0.446,26,3.473,27,2.12,28,3.738,29,1.483,30,3.315,31,2.12,32,3.04,33,1.324,34,3.614,35,2.95,36,0.099,37,2.996,38,3.437,39,0.007,40,0.007,337,2.697,551,3.746,562,3.812,563,3.152,564,4.043,565,3.746,566,4.349,567,4.613,568,4.613,569,5.135,570,4.262,571,4.262,572,4.669,573,4.262,574,4.669,575,4.262,576,4.669,577,4.262,578,4.669,579,4.262]],["title/classes/CreatePriceDto.html",[0,0.042,580,2.961]],["body/classes/CreatePriceDto.html",[0,0.064,2,1.594,3,0.128,4,0.128,5,0.177,7,0.31,8,1.421,11,0.383,12,0.011,13,1.135,14,1.909,15,2.712,17,2.373,18,2.689,19,2.939,20,0.754,25,0.429,26,3.001,27,2.483,28,3.229,29,1.736,30,3.336,31,2.483,32,2.919,33,1.55,36,0.116,37,2.712,38,2.392,39,0.008,40,0.008,65,0.964,264,3.589,482,4.492,553,3.988,560,4.235,561,4.235,580,4.492,581,6.341,582,4.386,583,6.491,584,4.991,585,4.991]],["title/classes/CreateProductDto.html",[0,0.042,586,2.961]],["body/classes/CreateProductDto.html",[0,0.061,2,1.497,3,0.121,4,0.121,5,0.109,7,0.291,8,1.363,11,0.413,12,0.011,13,1.107,14,2.057,15,2.922,17,2.478,18,3.769,19,3.667,20,0.812,25,0.435,26,3.446,27,2.331,28,3.709,29,1.63,30,3.234,31,2.331,32,3.016,33,1.456,36,0.109,37,2.922,38,3.353,39,0.007,40,0.007,264,3.48,340,1.882,586,4.31,587,4.118,588,4.564,589,5.174,590,4.977,591,4.685,592,4.977,593,4.118,594,4.685,595,4.685,596,4.606,597,4.118]],["title/classes/CreateUserDto.html",[0,0.042,211,2.791]],["body/classes/CreateUserDto.html",[0,0.06,2,1.459,3,0.118,4,0.118,5,0.106,7,0.284,8,1.341,11,0.408,12,0.011,13,1.177,14,2.031,15,2.886,17,2.461,18,3.722,19,2.691,20,0.802,25,0.454,26,3.412,27,2.273,28,3.671,29,1.59,30,3.194,31,2.273,32,2.986,33,1.419,34,3.788,35,3.162,36,0.106,37,2.886,38,3.311,39,0.007,40,0.007,211,3.996,337,2.795,362,3.886,566,4.507,598,4.016,599,6.124,600,4.569,601,4.569,602,4.529,603,4.569,604,5.383,605,4.569,606,4.569,607,4.894,608,4.569,609,4.894,610,4.569]],["title/interfaces/CustomHttpExceptionResponse.html",[74,2.961,611,1.329]],["body/interfaces/CustomHttpExceptionResponse.html",[3,0.147,4,0.147,5,0.133,7,0.355,8,1.549,11,0.454,12,0.01,13,1.266,36,0.164,39,0.008,40,0.008,66,3.959,74,4.899,89,2.741,90,4.571,91,3.368,92,4.518,94,4.968,96,4.328,98,3.432,340,1.728,611,2.199,612,2.644,613,4.571,614,4.571,615,3.521,616,5.685]],["title/classes/CustomPasswordLengthConstraint.html",[0,0.042,617,3.419]],["body/classes/CustomPasswordLengthConstraint.html",[0,0.064,2,1.625,3,0.131,4,0.131,5,0.118,7,0.316,11,0.388,12,0.01,13,1.184,20,0.763,25,0.369,29,1.77,36,0.118,39,0.008,40,0.008,49,3.039,53,1.401,63,1.364,64,1.364,65,0.976,67,1.327,181,1.995,191,1.342,260,1.601,344,2.531,362,2.862,478,3.697,617,5.253,618,4.066,619,4.288,620,3.871,621,3.15,622,2.996,623,5.05,624,5.087,625,6.572,626,5.087,627,3.697,628,2.996,629,2.862,630,3.871,631,3.521,632,5.087,633,3.147,634,2.996,635,4.066,636,2.996,637,6.572,638,5.087]],["title/injectables/CustomValidationPipe.html",[322,0.754,639,3.419]],["body/injectables/CustomValidationPipe.html",[0,0.063,3,0.101,4,0.101,5,0.091,7,0.244,11,0.409,12,0.011,13,0.583,20,0.741,25,0.388,29,1.366,36,0.091,38,1.881,39,0.006,40,0.006,49,1.815,51,3.06,53,1.176,56,4.516,59,3.6,63,1.324,64,1.324,65,0.948,67,1.289,69,2.561,70,0.654,77,2.285,89,3.317,97,1.588,191,1.684,203,1.763,257,1.29,260,1.686,322,0.972,323,1.327,340,1.186,365,1.815,385,3.137,621,1.881,627,3.589,634,2.312,639,4.41,640,3.45,641,5.518,642,5.518,643,5.518,644,5.518,645,3.926,646,5.608,647,5.518,648,3.926,649,6.921,650,5.518,651,6.084,652,6.921,653,3.926,654,5.518,655,3.926,656,2.717,657,3.926,658,3.926,659,3.926,660,3.926,661,3.926,662,2.717,663,3.926,664,2.717,665,3.926,666,3.926,667,6.38,668,3.926,669,5.518,670,3.926,671,3.926,672,3.926,673,3.926,674,3.137,675,3.45,676,3.926]],["title/modules/DatabaseModule.html",[99,1.293,108,2.961]],["body/modules/DatabaseModule.html",[0,0.056,3,0.146,4,0.146,5,0.131,11,0.335,12,0.01,25,0.429,36,0.131,39,0.008,40,0.008,60,3.922,70,0.944,99,2.127,101,2.367,108,4.871,121,3.373,129,4.145,130,2.446,156,4.529,181,2.222,332,4.314,362,3.188,390,3.188,416,3.337,417,2.62,677,5.667,678,5.667,679,3.698,680,4.529,681,4.981,682,5.667,683,5.667,684,4.981,685,5.667,686,5.667,687,5.667,688,5.667,689,5.667,690,5.667,691,5.667]],["title/classes/EditProductDto.html",[0,0.042,692,3.419]],["body/classes/EditProductDto.html",[0,0.058,2,1.381,3,0.111,4,0.111,5,0.1,7,0.268,8,1.291,11,0.397,12,0.011,13,1.071,14,1.974,15,2.805,17,2.421,20,0.779,25,0.405,26,3.335,27,2.15,28,3.589,29,1.504,30,3.335,31,2.15,32,2.918,33,1.343,36,0.1,37,2.805,38,3.218,39,0.007,40,0.007,264,3.34,340,1.782,560,4.381,561,4.381,588,4.381,590,4.714,592,4.714,692,4.714,693,3.799,694,6.714,695,5.898,696,5.898,697,5.898,698,4.322,699,3.799,700,4.322,701,5.898,702,4.322,703,5.898,704,4.322,705,5.898,706,3.799,707,6.714]],["title/controllers/EmailConfirmationController.html",[184,1.787,708,3.164]],["body/controllers/EmailConfirmationController.html",[0,0.041,3,0.108,4,0.108,5,0.097,7,0.26,11,0.341,12,0.011,14,1.696,17,1.792,20,0.67,25,0.419,33,1.3,36,0.097,39,0.007,40,0.007,51,1.693,53,1.229,63,1.197,64,1.197,65,0.857,67,1.165,70,0.697,72,2.765,77,1.265,184,1.748,186,1.693,188,2.464,190,2.036,191,2.036,199,4.401,200,3.397,203,2.273,220,3.888,221,3.397,222,3.108,223,4.61,224,2.464,225,2.464,227,2.464,228,2.464,240,4.084,250,2.464,251,1.641,252,1.544,253,2.129,254,3.397,257,2.169,337,2.334,545,5.263,708,4.267,709,3.678,710,7.116,711,5.803,712,5.803,713,4.185,714,4.185,715,4.185,716,5.769,717,4.185,718,4.185,719,5.769,720,4.185,721,4.185,722,3.678,723,3.678,724,4.185,725,4.185,726,4.185,727,4.185,728,4.185,729,4.185,730,4.185,731,4.185]],["title/guards/EmailConfirmationGuard.html",[732,3.419,733,3.419]],["body/guards/EmailConfirmationGuard.html",[0,0.053,3,0.139,4,0.139,5,0.126,7,0.336,11,0.32,12,0.01,20,0.629,25,0.384,36,0.126,39,0.008,40,0.008,49,2.504,53,1.458,63,1.124,64,1.124,65,0.805,67,1.094,70,0.902,72,2.596,77,1.637,97,2.192,181,2.124,191,1.979,199,4.232,203,2.185,260,1.319,322,1.205,337,2.192,365,2.504,711,4.761,723,4.761,733,5.468,734,5.417,735,4.761,736,7.877,737,6.841,738,6.295,739,5.417,740,4.329,741,5.468,742,4.761,743,5.417,744,5.417]],["title/modules/EmailConfirmationModule.html",[99,1.293,109,2.791]],["body/modules/EmailConfirmationModule.html",[0,0.049,3,0.129,4,0.129,5,0.116,12,0.01,25,0.464,36,0.116,39,0.008,40,0.008,70,0.836,99,1.969,101,2.096,102,3.122,109,5.622,116,5.03,117,3.37,118,2.596,119,2.496,121,3.122,129,3.836,130,2.166,134,4.01,186,2.636,240,5.362,305,3.51,307,3.37,312,4.41,313,3.473,321,4.41,708,5.35,722,4.41,745,4.41,746,4.41,747,4.41,748,4.41,749,5.627,750,5.018,751,5.018,752,5.018]],["title/injectables/EmailConfirmationService.html",[240,2.646,322,0.754]],["body/injectables/EmailConfirmationService.html",[0,0.028,3,0.074,4,0.074,5,0.066,7,0.178,11,0.378,12,0.011,13,1.104,20,0.744,25,0.379,36,0.066,39,0.005,40,0.005,51,2.407,53,0.933,54,3.346,63,1.33,64,1.33,65,0.952,67,1.201,70,0.477,77,2.124,89,1.372,91,3.503,97,2.933,130,1.236,171,2.516,172,2.516,190,2.064,191,2.064,203,2.316,235,3.25,236,1.686,240,2.707,251,1.716,252,2.195,253,2.195,257,2.22,260,1.066,270,2.177,275,2.577,313,1.981,322,0.771,323,0.968,331,5.939,332,3.788,337,2.593,340,1.605,343,2.117,351,3.436,359,3.503,365,3.352,367,4.116,368,2.516,369,2.855,371,2.516,372,3.846,373,2.516,382,2.288,478,2.462,636,1.686,712,4.669,753,2.516,754,5.312,755,4.376,756,4.669,757,2.863,758,4.587,759,2.863,760,4.376,761,2.863,762,4.376,763,2.863,764,4.376,765,2.863,766,4.376,767,2.863,768,3.237,769,2.863,770,2.863,771,4.376,772,3.846,773,2.863,774,2.863,775,2.863,776,2.863,777,2.863,778,2.863,779,2.863,780,4.376,781,2.863,782,2.863,783,2.863]],["title/modules/EmailModule.html",[99,1.293,749,2.961]],["body/modules/EmailModule.html",[0,0.055,3,0.145,4,0.145,5,0.131,12,0.01,25,0.429,36,0.131,39,0.008,40,0.008,70,0.941,99,2.123,101,2.36,102,3.366,117,3.633,118,2.922,119,2.811,121,2.708,129,4.137,130,2.439,186,2.286,305,3.785,307,3.633,749,5.884,758,5.749,784,4.966,785,4.966,786,4.966,787,5.65,788,5.65]],["title/injectables/EmailService.html",[322,0.754,758,2.791]],["body/injectables/EmailService.html",[0,0.046,3,0.121,4,0.121,5,0.109,7,0.291,8,1.363,11,0.413,12,0.011,20,0.812,25,0.418,36,0.109,39,0.007,40,0.007,51,2.83,53,1.327,54,2.636,63,1.292,64,1.292,65,0.925,67,0.946,70,0.781,91,2.759,97,1.896,130,2.023,189,3.243,190,1.846,191,1.846,203,1.989,251,1.837,252,1.729,253,1.729,257,1.539,260,1.141,270,2.331,322,1.097,323,1.584,332,4.299,351,2.879,359,2.759,365,2.166,459,2.636,758,4.063,789,4.118,790,6.995,791,6.995,792,3.466,793,6.228,794,6.228,795,6.995,796,4.685,797,2.636,798,6.995,799,6.228,800,4.118,801,4.685,802,4.685,803,4.118,804,4.685,805,4.685,806,4.685,807,4.685,808,4.685]],["title/classes/EmailValidationConstraint.html",[0,0.042,809,3.419]],["body/classes/EmailValidationConstraint.html",[0,0.055,2,1.298,3,0.105,4,0.105,5,0.094,7,0.252,11,0.334,12,0.01,13,1.165,20,0.656,25,0.228,29,1.967,36,0.131,39,0.007,40,0.007,49,2.614,53,1.205,63,1.173,64,1.173,65,0.84,67,1.142,68,1.879,89,1.948,191,1.072,260,1.711,337,2.63,344,2.813,362,2.286,619,3.828,620,3.329,621,2.71,622,3.329,623,4.895,628,3.329,629,3.657,630,3.329,633,2.514,634,2.394,635,3.248,636,2.394,797,2.286,809,5.195,810,3.248,811,4.064,812,4.181,813,4.064,814,4.064,815,4.181,816,3.572,817,3.248,818,3.18,819,3.572,820,3.828,821,2.514,822,2.514,823,3.006,824,8.227,825,5.653,826,4.064,827,5.653,828,4.064,829,4.064,830,5.653,831,5.653,832,4.064,833,5.653,834,6.501,835,4.064,836,4.064,837,5.653,838,5.653,839,5.653,840,5.653,841,5.653,842,5.653,843,4.064,844,4.064,845,4.064,846,4.064,847,4.064,848,4.064]],["title/classes/FileUploadDto.html",[0,0.042,849,3.164]],["body/classes/FileUploadDto.html",[0,0.058,2,1.904,3,0.153,4,0.153,5,0.189,7,0.37,8,1.589,11,0.429,12,0.01,13,1.078,14,1.753,20,0.692,25,0.407,32,2.937,33,1.852,36,0.138,39,0.008,40,0.008,73,3.479,817,5.802,849,5.37,850,5.239,851,6.381,852,5.961,853,7.26,854,5.961]],["title/classes/HelperFileLoader.html",[0,0.042,855,3.164]],["body/classes/HelperFileLoader.html",[0,0.035,2,1.135,3,0.091,4,0.091,5,0.175,7,0.221,8,1.125,11,0.415,12,0.01,13,1.087,20,0.815,25,0.371,36,0.082,39,0.006,40,0.006,53,1.095,59,3.354,63,1.373,64,1.373,65,0.983,67,1.336,68,3.488,69,2.319,70,0.592,77,2.211,82,2.84,91,3.027,92,4.346,97,2.08,98,1.587,181,1.394,190,1.746,260,0.866,287,2.319,344,1.768,385,4.108,484,2.093,855,3.802,856,2.84,857,7.026,858,6.038,859,6.038,860,6.038,861,4.518,862,3.554,863,3.554,864,7.994,865,5.913,866,7.873,867,6.632,868,3.554,869,6.431,870,3.554,871,6.038,872,3.554,873,3.554,874,5.815,875,3.554,876,3.554,877,3.554,878,5.14,879,3.554,880,3.554,881,3.124,882,4.826,883,3.554,884,3.124,885,3.554,886,3.554,887,3.554,888,5.14,889,3.554,890,3.554,891,3.554,892,3.554,893,3.554,894,3.554,895,6.038,896,3.554,897,3.554,898,3.554]],["title/injectables/HttpCacheInterceptor.html",[322,0.754,899,3.164]],["body/injectables/HttpCacheInterceptor.html",[0,0.054,3,0.142,4,0.142,5,0.127,7,0.341,11,0.325,12,0.01,13,1.026,20,0.638,25,0.308,36,0.127,39,0.008,40,0.008,53,1.472,63,1.141,64,1.141,65,0.817,67,1.11,70,0.916,72,2.635,77,2.087,260,1.682,322,1.217,323,1.858,364,5.108,615,3.436,738,6.329,740,4.394,742,4.832,899,5.108,900,4.832,901,7.55,902,6.906,903,6.906,904,5.498,905,6.906,906,6.636,907,5.498,908,5.498,909,5.498,910,5.498]],["title/interfaces/HttpExceptionResponse.html",[611,1.329,616,3.164]],["body/interfaces/HttpExceptionResponse.html",[3,0.15,4,0.15,5,0.135,7,0.361,8,1.565,11,0.422,12,0.01,13,1.232,36,0.166,39,0.008,40,0.008,66,4.021,74,4.021,89,3.71,90,6.454,91,4.756,92,3.268,94,3.594,96,3.131,98,2.594,340,2.339,611,2.22,612,2.686,613,4.643,614,4.643,615,2.891,616,5.725]],["title/interfaces/I2faGenerate.html",[611,1.329,911,3.164]],["body/interfaces/I2faGenerate.html",[3,0.16,4,0.16,5,0.144,7,0.386,8,1.631,11,0.44,12,0.01,13,1.274,36,0.144,39,0.009,40,0.009,369,5.394,611,1.933,612,2.877,911,5.511,912,5.469,913,6.114]],["title/interfaces/ICookiesFromJwt.html",[355,3.164,611,1.329]],["body/interfaces/ICookiesFromJwt.html",[3,0.16,4,0.16,5,0.144,7,0.386,8,1.631,11,0.44,12,0.01,13,1.274,36,0.144,39,0.009,40,0.009,273,5.721,275,4.868,355,5.511,611,1.933,612,2.877,914,5.469]],["title/interfaces/IFileFormatForDownload.html",[611,1.329,865,3.164]],["body/interfaces/IFileFormatForDownload.html",[3,0.151,4,0.151,5,0.136,7,0.364,8,1.574,11,0.479,12,0.01,13,1.315,36,0.136,39,0.008,40,0.008,611,1.822,612,2.712,865,5.317,884,7.122,915,5.156,916,8.103,917,8.103,918,8.103]],["title/interfaces/IQrCodeStream.html",[611,1.329,919,2.961]],["body/interfaces/IQrCodeStream.html",[3,0.16,4,0.16,5,0.144,7,0.386,8,1.631,11,0.44,12,0.01,13,1.185,36,0.144,39,0.009,40,0.009,71,5.204,611,1.933,612,2.877,913,6.114,919,5.157,920,5.469,921,7.266]],["title/interfaces/IRenderTemplate.html",[245,2.791,611,1.329]],["body/interfaces/IRenderTemplate.html",[3,0.16,4,0.16,5,0.144,7,0.386,8,1.631,11,0.44,12,0.01,13,1.274,36,0.144,39,0.009,40,0.009,245,4.862,263,6.114,264,4.113,611,1.933,612,2.877,922,5.469]],["title/interfaces/IRequestWithUser.html",[199,2.646,611,1.329]],["body/interfaces/IRequestWithUser.html",[3,0.158,4,0.158,5,0.142,7,0.38,8,1.615,11,0.361,12,0.01,25,0.414,36,0.142,39,0.009,40,0.009,72,3.795,73,2.933,199,4.563,242,3.326,243,2.933,270,4.09,611,1.901,612,2.829,615,3.67,923,5.379]],["title/interfaces/ITokenPayload.html",[353,2.646,611,1.329]],["body/interfaces/ITokenPayload.html",[3,0.159,4,0.159,5,0.143,7,0.384,8,1.624,11,0.438,12,0.01,36,0.143,39,0.009,40,0.009,65,1.102,340,2.403,341,7.25,343,6.101,353,4.59,611,1.92,612,2.858,627,4.474,924,5.433]],["title/interfaces/IValidationResultAsfunction.html",[611,1.329,631,2.961]],["body/interfaces/IValidationResultAsfunction.html",[3,0.161,4,0.161,5,0.145,7,0.389,8,1.638,12,0.01,13,1.111,36,0.145,39,0.009,40,0.009,67,1.265,68,3.459,89,3.586,611,1.946,612,2.897,631,5.178,820,4.406,925,5.507,926,6.265,927,6.265,928,6.265,929,5.007]],["title/interfaces/IVerificationTokenPayload.html",[611,1.329,768,3.164]],["body/interfaces/IVerificationTokenPayload.html",[3,0.165,4,0.165,5,0.149,7,0.398,8,1.661,11,0.379,12,0.01,13,1.2,36,0.149,39,0.009,40,0.009,337,3.379,611,1.994,612,2.967,768,5.613,930,5.641]],["title/classes/IsManagerAlreadyExistConstraint.html",[0,0.042,931,3.419]],["body/classes/IsManagerAlreadyExistConstraint.html",[0,0.057,2,1.349,3,0.109,4,0.109,5,0.098,7,0.262,11,0.343,12,0.011,13,1.149,20,0.674,25,0.372,29,2.02,36,0.135,39,0.007,40,0.007,49,2.684,53,1.237,63,1.204,64,1.204,65,0.862,67,1.172,68,1.952,77,1.276,89,2.024,181,2.276,190,1.75,191,1.885,203,1.854,257,1.387,260,1.616,337,3.03,344,2.101,412,1.709,619,3.907,620,3.419,621,3.179,622,3.419,623,4.755,627,2.376,628,3.419,629,3.732,630,3.419,633,2.612,634,2.487,797,2.376,812,3.123,815,4.294,818,3.266,820,3.907,821,2.612,822,2.612,823,3.123,931,5.301,932,3.375,933,4.223,934,4.591,935,4.223,936,3.712,937,2.275,938,3.375,939,3.712,940,5.102,941,3.375,942,5.805,943,4.223,944,3.712,945,4.223,946,3.419,947,3.712,948,3.712]],["title/classes/IsNumberConstraint.html",[0,0.042,949,3.419]],["body/classes/IsNumberConstraint.html",[0,0.06,2,1.463,3,0.118,4,0.118,5,0.106,7,0.284,11,0.362,12,0.011,13,1.097,20,0.712,25,0.257,29,2.134,36,0.142,39,0.007,40,0.007,49,2.836,53,1.307,63,1.273,64,1.273,65,0.911,67,1.239,68,2.118,89,2.195,181,1.796,191,1.209,260,1.799,340,1.854,344,3.052,619,4.073,620,3.612,621,2.94,622,3.612,623,4.845,627,3.451,628,3.612,629,3.891,630,3.612,633,2.833,634,2.697,636,3.612,664,4.245,797,2.577,818,3.451,820,4.073,821,2.833,822,2.833,934,4.786,949,5.527,950,3.661,951,4.58,952,4.902,953,4.58,954,4.902,955,3.388,956,4.026]],["title/classes/IsUserAlreadyExistConstraint.html",[0,0.042,957,3.419]],["body/classes/IsUserAlreadyExistConstraint.html",[0,0.057,2,1.349,3,0.109,4,0.109,5,0.098,7,0.262,11,0.343,12,0.011,13,1.149,20,0.674,25,0.372,29,2.02,36,0.135,39,0.007,40,0.007,49,2.684,53,1.237,63,1.204,64,1.204,65,0.862,67,1.172,68,1.952,77,1.276,89,2.024,181,2.276,190,1.75,191,1.885,203,1.854,242,1.709,243,2.024,257,1.387,260,1.616,270,2.888,337,3.03,344,2.101,412,1.709,619,3.907,620,3.419,621,3.179,622,3.419,623,4.755,627,2.376,628,3.419,629,3.732,630,3.419,633,2.612,634,2.487,797,2.376,812,3.123,815,4.294,818,3.266,820,3.907,821,2.612,822,2.612,823,3.123,934,4.591,936,3.712,939,3.712,940,5.102,941,3.375,944,3.712,947,3.712,957,5.301,958,3.375,959,4.223,960,4.223,961,5.805,962,4.223,963,4.223,964,3.712]],["title/injectables/JwtAuthenticationGuard.html",[247,2.961,322,0.754]],["body/injectables/JwtAuthenticationGuard.html",[0,0.063,3,0.165,4,0.165,5,0.148,12,0.01,25,0.425,36,0.148,39,0.009,40,0.009,70,1.066,247,5.242,310,3.446,322,1.334,323,2.162,615,3.182,965,4.731,966,5.622,967,4.731,968,5.112]],["title/injectables/JwtRefreshGuard.html",[237,3.164,322,0.754]],["body/injectables/JwtRefreshGuard.html",[0,0.062,3,0.164,4,0.164,5,0.147,12,0.01,25,0.423,36,0.147,39,0.009,40,0.009,70,1.058,194,4.144,237,5.579,275,3.741,310,3.423,322,1.329,323,2.147,615,3.16,965,4.698,967,4.698,968,5.076,969,5.583]],["title/injectables/JwtRefreshTokenStrategy.html",[299,2.961,322,0.754]],["body/injectables/JwtRefreshTokenStrategy.html",[0,0.041,3,0.107,4,0.107,5,0.096,7,0.258,11,0.339,12,0.011,20,0.667,25,0.451,36,0.096,39,0.007,40,0.007,51,1.682,53,1.224,63,1.191,64,1.191,65,0.853,67,0.839,70,0.692,72,3.855,73,1.992,77,1.256,130,1.794,181,1.63,190,1.736,191,1.736,194,4.629,203,1.834,235,3.28,236,2.448,242,1.682,243,1.992,251,2.251,252,2.119,253,1.534,257,1.365,260,1.398,275,2.448,276,4.589,299,3.974,310,2.239,322,1.012,323,1.405,332,4.149,353,4.389,354,3.074,367,4.553,534,3.322,615,2.068,621,3.153,792,3.074,970,5.257,971,3.653,972,5.257,973,4.156,974,4.156,975,4.156,976,3.322,977,4.247,978,2.876,979,4.247,980,4.247,981,4.589,982,4.247,983,4.156,984,3.322,985,3.322,986,4.156,987,3.322,988,4.156,989,4.156,990,4.156,991,4.156,992,4.156,993,4.156]],["title/injectables/JwtStrategy.html",[300,2.961,322,0.754]],["body/injectables/JwtStrategy.html",[0,0.045,3,0.118,4,0.118,5,0.106,7,0.284,11,0.362,12,0.011,20,0.712,25,0.462,36,0.106,39,0.007,40,0.007,51,1.853,53,1.307,63,1.273,64,1.273,65,0.911,67,0.925,70,0.763,72,3.315,73,2.195,130,1.977,190,1.825,191,1.825,203,1.959,235,3.415,236,2.697,242,1.853,243,2.195,251,2.405,252,2.263,253,1.69,257,1.505,260,1.494,300,4.245,310,2.468,322,1.081,323,1.548,332,4.271,353,4.569,354,3.388,367,3.17,615,2.279,621,2.94,792,3.388,972,5.527,976,3.661,977,3.388,978,3.17,979,3.388,980,3.388,981,3.661,982,3.388,984,3.661,985,3.661,987,3.661,994,4.026,995,4.58,996,5.392,997,4.58,998,4.026,999,4.026,1000,4.026,1001,4.58,1002,4.026]],["title/injectables/JwtTwoFactorGuard.html",[322,0.754,1003,3.419]],["body/injectables/JwtTwoFactorGuard.html",[0,0.062,3,0.163,4,0.163,5,0.147,12,0.01,25,0.422,36,0.147,39,0.009,40,0.009,70,1.055,310,3.411,319,5.567,322,1.326,323,2.14,615,3.149,965,4.682,967,4.682,968,5.059,1003,6.016,1004,5.564,1005,5.564]],["title/injectables/JwtTwoFactorStrategy.html",[301,2.961,322,0.754]],["body/injectables/JwtTwoFactorStrategy.html",[0,0.042,3,0.11,4,0.11,5,0.099,7,0.266,11,0.347,12,0.011,20,0.681,25,0.455,36,0.099,39,0.007,40,0.007,51,1.737,53,1.251,63,1.218,64,1.218,65,0.872,67,0.867,70,0.715,72,3.206,73,2.057,77,1.297,97,1.737,130,1.853,190,1.765,191,1.765,203,1.875,235,3.325,236,2.528,242,1.737,243,2.057,251,2.302,252,2.166,253,1.584,257,1.41,260,1.629,267,3.772,270,3.328,301,4.062,310,2.313,319,5.319,322,1.034,323,1.451,332,4.19,351,1.984,353,4.449,354,3.174,365,1.984,367,4.062,615,2.135,621,3.206,792,3.174,970,5.346,972,5.346,976,3.43,977,4.342,978,2.97,979,4.342,980,4.342,981,3.43,982,3.174,984,3.43,985,3.43,987,3.43,996,3.772,999,3.772,1000,3.772,1002,3.772,1005,3.772,1006,3.772,1007,4.292,1008,4.292,1009,4.292,1010,4.292]],["title/injectables/LocalAuthenticationGuard.html",[233,3.164,322,0.754]],["body/injectables/LocalAuthenticationGuard.html",[0,0.063,3,0.165,4,0.165,5,0.149,12,0.01,25,0.426,36,0.149,39,0.009,40,0.009,70,1.069,233,5.613,310,3.458,322,1.337,323,2.17,615,3.193,967,4.747,1011,5.641,1012,6.418]],["title/injectables/LocalStrategy.html",[302,2.961,322,0.754]],["body/injectables/LocalStrategy.html",[0,0.048,3,0.127,4,0.127,5,0.114,7,0.306,11,0.38,12,0.01,13,1.202,20,0.747,25,0.442,36,0.114,39,0.007,40,0.007,53,1.371,63,1.335,64,1.335,65,0.956,67,0.994,70,0.82,190,1.891,191,1.891,203,2.055,230,4.764,231,3.642,242,1.992,243,2.36,251,1.931,253,1.817,257,1.618,260,1.199,302,4.453,310,2.653,322,1.134,323,1.664,337,2.9,362,4.276,459,2.77,615,2.45,621,3.084,812,4.759,977,3.642,978,3.408,980,3.642,982,3.642,998,4.328,1013,4.328,1014,4.924,1015,4.924,1016,4.924,1017,4.328,1018,4.924,1019,4.924,1020,4.924]],["title/injectables/LoggerMiddleware.html",[322,0.754,1021,3.419]],["body/injectables/LoggerMiddleware.html",[0,0.054,3,0.141,4,0.141,5,0.127,7,0.34,11,0.324,12,0.01,20,0.636,25,0.387,36,0.127,39,0.008,40,0.008,49,2.534,53,1.469,63,1.137,64,1.137,65,0.814,67,1.107,68,3.187,70,0.913,71,5.162,72,3.792,73,2.627,322,1.214,323,1.853,869,4.818,1021,5.509,1022,4.818,1023,6.893,1024,6.893,1025,7.54,1026,6.953,1027,7.911,1028,5.481,1029,6.893,1030,4.818,1031,5.481,1032,5.481,1033,4.381,1034,4.818,1035,5.481,1036,5.481]],["title/controllers/ManagersController.html",[184,1.787,1037,3.164]],["body/controllers/ManagersController.html",[0,0.03,3,0.079,4,0.079,5,0.071,7,0.191,11,0.364,12,0.011,14,1.944,17,2.054,20,0.767,25,0.39,33,0.955,36,0.071,39,0.005,40,0.005,53,0.984,63,1.28,64,1.28,65,0.916,67,1.335,70,0.512,184,1.284,186,1.243,188,1.81,190,2.159,191,2.159,200,3.893,203,2.467,220,4.09,221,2.719,222,2.989,224,1.81,225,1.81,227,1.81,228,1.81,250,1.81,252,1.134,253,2.439,254,3.893,257,2.172,260,1.61,340,2.098,351,1.421,393,3.009,433,2.456,439,2.701,442,2.856,449,4.929,459,1.729,460,2.456,462,4.059,464,2.701,539,4.929,564,4.268,937,1.656,1037,3.415,1038,2.701,1039,3.073,1040,4.875,1041,4.875,1042,5.421,1043,5.547,1044,2.701,1045,3.073,1046,2.701,1047,3.073,1048,3.073,1049,3.073,1050,3.073,1051,3.073,1052,4.618,1053,3.073,1054,2.701,1055,4.268,1056,3.073,1057,3.073,1058,2.701,1059,4.875,1060,2.456,1061,2.701,1062,2.701,1063,3.431,1064,2.701,1065,3.073,1066,3.073,1067,3.073,1068,3.073,1069,4.618,1070,3.073,1071,3.073,1072,3.073]],["title/entities/ManagersEntity.html",[388,1.847,937,2.305]],["body/entities/ManagersEntity.html",[0,0.046,3,0.081,4,0.081,5,0.073,7,0.196,8,1.033,11,0.489,12,0.011,13,1.11,14,2.198,15,3.123,17,2.573,20,0.868,25,0.351,32,3.091,33,0.983,36,0.073,37,3.123,39,0.005,40,0.005,65,0.929,96,3.371,98,2.794,181,2.752,190,2.212,242,2.708,243,1.516,337,2.283,340,1.426,388,1.365,390,1.779,392,3.323,393,2.614,395,3.323,396,1.956,398,2.919,404,4.58,409,3.265,410,2.919,412,1.28,442,2.919,443,4.14,477,4.33,478,4.205,484,2.779,485,2.189,488,4.858,497,3.49,500,3.49,561,3.682,566,3.682,567,3.906,568,3.906,572,3.771,574,3.771,576,3.771,656,2.189,937,2.542,1073,2.78,1074,4.718,1075,3.163,1076,4.718,1077,3.163,1078,3.163,1079,3.163,1080,3.163,1081,3.163,1082,4.718,1083,3.163,1084,2.78,1085,3.163,1086,3.163,1087,4.718,1088,3.163,1089,4.96,1090,3.163]],["title/modules/ManagersModule.html",[99,1.293,110,2.791]],["body/modules/ManagersModule.html",[0,0.053,3,0.14,4,0.14,5,0.126,12,0.01,25,0.457,36,0.126,39,0.008,40,0.008,70,0.908,99,2.075,101,2.276,102,3.291,110,5.504,117,3.552,118,2.818,119,2.711,121,2.611,186,2.778,305,3.7,307,3.552,416,3.209,417,2.519,937,2.936,1037,5.561,1060,4.355,1063,5.424,1064,4.789,1091,4.789,1092,4.789,1093,4.789,1094,5.449,1095,5.449,1096,5.449]],["title/injectables/ManagersService.html",[322,0.754,1063,2.646]],["body/injectables/ManagersService.html",[0,0.024,3,0.064,4,0.064,5,0.057,7,0.154,11,0.376,12,0.011,13,0.72,20,0.774,25,0.357,36,0.057,39,0.005,40,0.005,51,1.004,53,0.834,54,3.584,63,1.322,64,1.322,65,0.946,67,1.347,70,0.413,77,1.812,94,2.422,97,3.006,98,1.108,190,2.126,191,2.126,203,2.48,251,1.535,252,0.915,253,2.351,257,2.271,260,1.46,322,0.69,323,0.838,337,1.584,340,1.925,351,3.29,359,3.53,365,3.196,388,1.69,393,2.786,412,1.004,417,1.147,430,1.982,443,1.534,449,4.401,515,4.409,527,1.717,532,4.791,534,1.982,535,2.18,539,4.401,543,1.982,564,3.811,937,1.337,946,3.243,1034,2.18,1040,4.841,1041,4.263,1042,5.269,1044,2.18,1046,3.441,1054,2.18,1055,3.811,1060,1.982,1061,2.18,1062,2.18,1063,2.422,1097,2.18,1098,3.915,1099,5.507,1100,2.481,1101,2.481,1102,3.915,1103,2.481,1104,2.896,1105,3.915,1106,2.481,1107,2.481,1108,3.915,1109,2.481,1110,2.481,1111,2.481,1112,2.481,1113,2.481,1114,3.915,1115,2.481,1116,2.481,1117,6.403,1118,3.915,1119,2.481,1120,2.18,1121,2.481,1122,3.915,1123,2.481,1124,3.915,1125,2.481,1126,3.915,1127,2.481,1128,3.915,1129,2.481,1130,2.481,1131,2.481,1132,3.915,1133,2.481,1134,2.481,1135,2.481]],["title/classes/NumberValidationConstraint.html",[0,0.042,1136,3.419]],["body/classes/NumberValidationConstraint.html",[0,0.06,2,1.463,3,0.118,4,0.118,5,0.106,7,0.284,11,0.362,12,0.011,13,1.097,20,0.712,25,0.257,29,2.134,36,0.142,39,0.007,40,0.007,49,2.836,53,1.307,63,1.273,64,1.273,65,0.911,67,1.239,68,2.118,89,2.195,181,1.796,191,1.209,260,1.799,340,1.854,344,3.052,619,4.073,620,3.612,621,2.94,622,3.612,623,4.845,627,3.451,628,3.612,629,3.891,630,3.612,633,2.833,634,2.697,636,3.612,664,4.245,797,2.577,818,3.451,820,4.073,821,2.833,822,2.833,934,4.786,952,4.902,954,4.902,955,3.388,1136,5.527,1137,3.661,1138,4.58,1139,4.58,1140,4.026]],["title/entities/OrdersEntity.html",[388,1.847,1141,2.791]],["body/entities/OrdersEntity.html",[0,0.042,3,0.109,4,0.109,5,0.098,7,0.263,8,1.273,11,0.468,12,0.011,14,2.203,20,0.87,25,0.373,36,0.098,39,0.007,40,0.007,65,1.15,96,3.853,98,3.193,181,2.28,190,1.753,242,2.893,243,2.029,270,3.852,287,3.794,340,1.757,388,1.827,390,2.381,392,3.911,393,2.775,394,5.543,395,3.911,396,2.618,398,4.108,400,3.853,401,3.72,406,3.72,408,3.383,409,4.024,410,3.597,411,5.11,412,1.713,1141,3.794,1142,3.72,1143,4.233,1144,4.233,1145,5.814,1146,4.233,1147,4.233,1148,4.233,1149,5.814,1150,4.647,1151,4.647,1152,4.3,1153,4.233,1154,4.647,1155,4.233,1156,3.72,1157,4.233,1158,3.72,1159,3.72,1160,4.233,1161,4.233,1162,3.72,1163,4.233,1164,3.72]],["title/modules/OrdersModule.html",[99,1.293,111,2.961]],["body/modules/OrdersModule.html",[0,0.058,3,0.151,4,0.151,5,0.136,12,0.01,25,0.466,36,0.136,39,0.008,40,0.008,70,0.977,99,2.172,101,2.45,111,4.975,121,2.811,186,2.373,305,3.161,307,3.034,416,3.454,417,2.712,1141,3.827,1165,5.866,1166,5.866,1167,7.773,1168,5.866,1169,7.189,1170,5.866,1171,5.866]],["title/classes/PaginationParams.html",[0,0.042,1172,3.164]],["body/classes/PaginationParams.html",[0,0.072,2,1.671,3,0.135,4,0.135,5,0.121,7,0.325,8,1.465,11,0.494,12,0.01,14,2.169,20,0.857,25,0.375,29,1.82,36,0.121,39,0.008,40,0.008,65,1.221,340,2.583,560,5.075,656,3.621,1172,4.95,1173,4.598,1174,5.897,1175,5.897,1176,5.897,1177,5.232,1178,5.232,1179,6.692,1180,5.232,1181,5.232,1182,7.777,1183,5.232,1184,6.692,1185,5.232]],["title/classes/PhoneValidationConstraint.html",[0,0.042,1186,3.419]],["body/classes/PhoneValidationConstraint.html",[0,0.059,2,1.431,3,0.115,4,0.115,5,0.104,7,0.278,11,0.357,12,0.011,13,1.196,20,0.702,25,0.251,29,2.103,36,0.14,39,0.007,40,0.007,49,2.794,53,1.288,63,1.254,64,1.254,65,0.898,67,1.221,68,2.071,89,2.147,191,1.182,260,1.783,340,1.354,344,3.007,362,2.52,619,4.028,620,3.559,621,2.896,622,3.559,623,4.981,628,3.559,629,3.847,630,3.559,633,2.771,634,2.638,635,3.58,636,2.638,662,4.183,797,2.52,815,4.47,816,3.938,817,3.58,818,3.4,820,4.028,821,2.771,822,2.771,823,3.314,1186,5.466,1187,3.58,1188,4.48,1189,6.043,1190,4.48,1191,6.839,1192,4.48,1193,3.938,1194,4.48,1195,4.48,1196,4.48]],["title/controllers/PricesController.html",[184,1.787,1197,3.164]],["body/controllers/PricesController.html",[0,0.036,3,0.094,4,0.094,5,0.155,7,0.226,11,0.362,12,0.011,14,1.539,17,1.903,20,0.608,25,0.451,33,1.132,36,0.084,39,0.006,40,0.006,53,1.116,63,0.756,64,0.756,65,0.542,67,1.057,70,0.607,73,1.747,77,1.582,184,1.523,186,1.475,188,2.147,189,2.523,190,1.948,191,1.948,200,2.147,203,2.138,220,3.607,221,3.083,222,2.821,224,2.147,225,2.147,227,2.147,228,3.083,229,2.913,245,2.379,250,2.147,252,1.345,253,1.932,254,3.083,257,1.198,260,1.275,263,2.696,264,1.814,457,2.696,459,2.051,580,4.633,664,2.523,849,4.531,851,5.384,855,2.696,1197,3.872,1198,2.913,1199,4.601,1200,6.695,1201,6.125,1202,3.646,1203,3.646,1204,3.646,1205,3.646,1206,3.646,1207,3.646,1208,3.646,1209,4.601,1210,5.235,1211,3.204,1212,5.235,1213,3.646,1214,3.646,1215,3.204,1216,3.646,1217,3.789,1218,3.204,1219,2.379,1220,2.913,1221,5.235,1222,3.646,1223,3.646,1224,3.204,1225,4.895,1226,3.646,1227,3.646,1228,3.646,1229,3.646,1230,3.646,1231,3.646,1232,3.204,1233,3.646,1234,3.646,1235,3.204,1236,3.646,1237,3.646,1238,3.646,1239,2.913,1240,3.646,1241,3.646,1242,3.646,1243,3.646,1244,5.235,1245,3.646]],["title/entities/PricesEntity.html",[388,1.847,1219,2.791]],["body/entities/PricesEntity.html",[0,0.04,3,0.104,4,0.104,5,0.163,7,0.251,8,1.234,11,0.479,12,0.011,13,1.042,14,2.168,15,3.081,17,2.553,20,0.856,25,0.316,32,3.09,33,1.257,36,0.094,37,3.081,39,0.007,40,0.007,65,0.837,96,3.779,98,3.132,181,2.543,190,2.142,264,3.227,340,1.703,388,1.747,390,2.276,392,3.819,393,2.93,395,3.819,396,2.503,398,3.486,404,4.576,410,3.486,412,1.637,477,3.901,478,3.946,482,5.285,484,3.319,485,2.8,488,4.854,489,2.993,1219,3.677,1246,3.557,1247,4.046,1248,5.636,1249,4.046,1250,4.046,1251,4.046,1252,4.046,1253,4.046]],["title/modules/PricesModule.html",[99,1.293,112,2.791]],["body/modules/PricesModule.html",[0,0.053,3,0.14,4,0.14,5,0.126,12,0.01,25,0.457,36,0.126,39,0.008,40,0.008,70,0.908,99,2.075,101,2.276,102,3.291,112,5.504,117,3.552,118,2.818,119,2.711,121,2.611,186,2.778,305,3.7,307,3.552,416,3.209,417,2.519,1197,5.561,1217,5.424,1218,4.789,1219,3.555,1220,4.355,1254,4.789,1255,4.789,1256,4.789,1257,5.449,1258,5.449,1259,5.449]],["title/injectables/PricesService.html",[322,0.754,1217,2.646]],["body/injectables/PricesService.html",[0,0.04,3,0.105,4,0.105,5,0.131,7,0.253,11,0.384,12,0.011,20,0.755,25,0.429,36,0.094,39,0.007,40,0.007,51,1.648,53,1.207,63,1.35,64,1.35,65,0.967,67,1.144,70,0.679,77,2.419,97,1.648,190,2.071,191,2.019,203,2.247,251,2.22,252,1.503,253,2.089,257,2.138,260,1.585,322,0.998,323,1.377,340,1.967,351,2.618,400,3.051,408,3.255,412,1.648,417,1.883,457,3.013,515,4.868,527,2.819,580,4.868,662,2.819,1209,3.58,1211,3.58,1217,3.502,1219,2.658,1220,3.255,1235,4.977,1260,3.58,1261,5.662,1262,6.508,1263,4.073,1264,4.073,1265,5.662,1266,5.662,1267,4.073,1268,5.662,1269,4.073,1270,3.255,1271,4.073,1272,5.662,1273,4.073,1274,4.073,1275,4.073,1276,4.073,1277,5.662,1278,4.073,1279,4.073,1280,4.073,1281,4.073,1282,5.662,1283,4.073,1284,4.073,1285,4.073]],["title/interfaces/ProductSearchBody.html",[611,1.329,1286,2.961]],["body/interfaces/ProductSearchBody.html",[3,0.151,4,0.151,5,0.136,7,0.364,8,1.574,11,0.479,12,0.01,13,1.257,36,0.136,39,0.008,40,0.008,264,4.031,340,2.557,393,3.385,588,5.287,589,5.993,611,1.822,612,2.712,1286,4.975,1287,5.156]],["title/interfaces/ProductSearchResult.html",[611,1.329,1288,3.164]],["body/interfaces/ProductSearchResult.html",[3,0.159,4,0.159,5,0.143,7,0.382,8,1.621,11,0.469,12,0.01,25,0.346,36,0.143,39,0.009,40,0.009,340,1.862,611,1.914,612,2.848,675,5.415,1286,4.263,1288,5.478,1289,5.415,1290,7.408,1291,7.406,1292,6.16,1293,6.16]],["title/controllers/ProductsController.html",[184,1.787,1294,3.164]],["body/controllers/ProductsController.html",[0,0.023,3,0.061,4,0.061,5,0.055,7,0.148,11,0.37,12,0.011,13,0.702,14,1.932,17,2.041,20,0.763,25,0.404,33,0.742,36,0.055,39,0.004,40,0.004,53,0.809,63,1.3,64,1.3,65,0.931,67,1.327,69,1.558,70,0.398,77,1.429,97,0.966,184,0.997,186,0.966,188,1.406,189,1.652,190,2.153,191,2.153,200,3.87,203,2.458,220,4.017,221,2.237,222,2.904,224,1.406,225,1.406,227,1.406,228,1.406,229,1.908,245,1.558,250,1.406,252,0.881,253,2.171,254,3.87,257,2.059,260,1.661,263,1.766,264,1.188,340,2.124,351,1.104,393,2.458,394,3.498,400,1.286,412,0.966,433,3.035,459,1.343,460,3.035,586,3.73,899,1.766,906,2.098,1058,3.338,1059,3.338,1172,3.987,1174,3.035,1175,3.035,1176,3.035,1224,2.098,1232,3.338,1270,3.035,1294,2.809,1295,2.098,1296,4.729,1297,4.157,1298,4.157,1299,4.729,1300,3.798,1301,5.39,1302,4.729,1303,2.387,1304,2.387,1305,2.387,1306,2.098,1307,3.798,1308,2.387,1309,2.098,1310,2.387,1311,3.338,1312,2.387,1313,2.387,1314,2.387,1315,3.338,1316,2.387,1317,2.387,1318,2.387,1319,2.387,1320,3.78,1321,2.387,1322,2.387,1323,2.387,1324,2.387,1325,3.798,1326,2.387,1327,2.387,1328,2.098,1329,2.387,1330,2.098,1331,3.338,1332,1.766,1333,3.086,1334,2.098,1335,1.766,1336,2.098,1337,2.387,1338,2.387,1339,2.387,1340,2.387,1341,2.387,1342,2.387,1343,2.098,1344,4.738,1345,3.798,1346,1.766,1347,2.387,1348,2.387,1349,2.387,1350,2.387,1351,2.387,1352,2.387,1353,2.387,1354,3.338,1355,3.338,1356,3.338,1357,2.387,1358,2.387,1359,2.387,1360,2.387,1361,2.387,1362,1.766]],["title/entities/ProductsEntity.html",[388,1.847,400,2.305]],["body/entities/ProductsEntity.html",[0,0.029,3,0.076,4,0.076,5,0.069,7,0.184,8,0.984,11,0.487,12,0.011,13,0.9,14,2.155,15,3.062,17,2.545,20,0.851,25,0.34,32,3.037,33,0.921,36,0.069,37,3.062,39,0.005,40,0.005,65,1.017,96,3.263,98,2.704,181,3.127,190,2.19,264,2.7,287,3.951,340,1.83,344,2.236,388,1.28,389,4.504,390,1.667,392,3.196,393,2.53,395,3.196,396,1.834,398,2.78,400,2.421,404,4.247,410,2.78,412,1.199,442,3.746,477,3.756,478,3.407,482,4.191,484,2.646,485,2.051,488,5.296,489,2.192,497,3.324,500,4.479,588,3.541,589,4.014,590,3.591,592,3.591,1141,4.247,1150,4.84,1151,4.84,1152,4.479,1154,4.337,1363,2.605,1364,6.508,1365,5.72,1366,2.964,1367,4.493,1368,2.964,1369,2.964,1370,2.964,1371,2.964,1372,4.493,1373,2.964,1374,2.964,1375,3.949,1376,2.964,1377,2.964,1378,2.964,1379,2.964,1380,2.605,1381,2.964]],["title/modules/ProductsModule.html",[99,1.293,113,2.961]],["body/modules/ProductsModule.html",[0,0.043,3,0.114,4,0.114,5,0.102,12,0.01,25,0.469,36,0.102,39,0.007,40,0.007,60,3.056,70,0.736,99,1.808,101,1.845,102,2.868,112,5.117,113,5.922,114,5.117,117,3.096,118,2.284,119,2.197,121,3.254,129,3.524,130,1.906,140,3.881,141,3.881,156,3.529,186,2.421,305,3.225,307,3.096,332,3.921,400,2.379,416,2.6,417,2.041,679,2.881,680,3.529,946,2.6,1294,5.021,1332,3.266,1333,5.547,1334,3.881,1346,3.266,1382,3.881,1383,4.416,1384,3.881,1385,3.881,1386,5.117,1387,4.416,1388,4.416,1389,4.416,1390,3.881,1391,5.984,1392,3.266,1393,5.26,1394,4.416,1395,4.416,1396,4.416,1397,4.416,1398,4.416,1399,4.416,1400,4.416]],["title/injectables/ProductsSearchService.html",[322,0.754,1386,2.791]],["body/injectables/ProductsSearchService.html",[0,0.041,3,0.108,4,0.108,5,0.097,7,0.479,8,1.263,11,0.42,12,0.011,13,1.057,20,0.826,25,0.419,36,0.097,39,0.007,40,0.007,53,1.229,55,2.73,56,2.73,63,1.37,64,1.37,65,0.981,67,1.165,70,0.697,77,1.743,190,2.036,191,2.036,203,2.273,222,3.557,251,1.641,252,1.544,257,1.895,260,1.405,264,2.87,322,1.016,323,1.414,393,1.748,394,4.267,400,3.834,459,2.354,478,3.245,588,3.764,589,3.095,1286,2.896,1288,3.095,1290,3.678,1320,4.61,1331,5.07,1332,3.095,1344,3.678,1386,3.764,1401,3.678,1402,5.769,1403,4.185,1404,7.716,1405,5.769,1406,5.769,1407,4.185,1408,5.769,1409,4.185,1410,3.344,1411,4.185,1412,4.185,1413,4.185,1414,5.769,1415,4.185,1416,4.185,1417,4.185,1418,4.185,1419,4.185,1420,4.185,1421,4.185,1422,4.185,1423,4.185,1424,4.185]],["title/injectables/ProductsService.html",[322,0.754,1333,2.791]],["body/injectables/ProductsService.html",[0,0.022,3,0.058,4,0.058,5,0.052,7,0.14,11,0.361,12,0.011,13,0.777,20,0.777,25,0.387,36,0.052,39,0.005,40,0.004,51,2.116,53,0.776,54,1.274,63,1.27,64,1.27,65,0.909,67,1.299,70,0.377,77,2.229,97,2.116,98,1.011,190,2.134,191,2.134,203,2.263,251,1.427,252,1.684,253,2.114,257,2.527,260,1.567,322,0.641,323,0.765,340,2.325,351,2.111,359,1.333,365,1.683,393,1.907,400,2.46,412,0.916,417,1.047,478,1.274,515,3.619,527,1.567,532,1.809,586,3.619,588,1.477,662,1.567,679,1.477,929,2.909,946,1.333,1174,4.179,1175,2.909,1176,4.579,1217,3.979,1270,2.909,1297,4.012,1298,4.596,1306,1.99,1309,1.99,1311,3.199,1328,1.99,1330,1.99,1332,1.674,1333,2.375,1335,1.674,1336,1.99,1354,3.199,1355,4.596,1356,3.199,1362,1.674,1365,1.99,1386,4.198,1390,1.99,1392,4.238,1425,1.99,1426,5.229,1427,3.64,1428,5.229,1429,3.64,1430,3.64,1431,2.264,1432,4.565,1433,2.264,1434,3.64,1435,2.264,1436,2.264,1437,2.264,1438,3.64,1439,2.264,1440,2.264,1441,3.64,1442,2.264,1443,4.012,1444,3.64,1445,2.264,1446,2.264,1447,2.264,1448,2.264,1449,2.264,1450,2.264,1451,2.264,1452,3.64,1453,2.264,1454,2.264,1455,2.264,1456,5.73,1457,2.264,1458,2.264,1459,2.264,1460,2.264,1461,2.264,1462,2.264,1463,2.264,1464,2.264,1465,2.264,1466,2.264,1467,2.264,1468,2.264,1469,2.264,1470,2.264,1471,2.264,1472,2.264,1473,2.264,1474,2.264,1475,2.264,1476,3.64,1477,2.264,1478,4.565,1479,2.264,1480,3.64,1481,3.64,1482,2.264,1483,2.264,1484,2.264,1485,2.264,1486,2.264,1487,4.565,1488,2.264,1489,2.264,1490,2.264,1491,2.264,1492,2.264,1493,2.264,1494,2.264,1495,2.264,1496,2.264,1497,2.264]],["title/modules/SearchModule.html",[99,1.293,114,2.791]],["body/modules/SearchModule.html",[0,0.056,3,0.148,4,0.148,5,0.133,12,0.01,25,0.432,36,0.133,39,0.008,40,0.008,70,0.956,99,2.143,101,2.397,114,4.627,121,3.399,129,4.533,130,2.477,189,3.971,191,1.514,203,1.833,307,2.968,332,4.333,362,3.228,679,3.744,680,4.585,684,5.043,1410,4.585,1498,5.738,1499,7.092,1500,5.738,1501,5.738,1502,5.738,1503,5.738,1504,5.738]],["title/injectables/SentryInterceptor.html",[322,0.754,1505,3.164]],["body/injectables/SentryInterceptor.html",[0,0.044,3,0.115,4,0.115,5,0.104,7,0.278,11,0.357,12,0.01,17,1.392,20,0.702,25,0.411,36,0.104,39,0.007,40,0.007,49,2.071,53,1.288,63,1.254,64,1.254,65,0.898,67,0.905,70,0.746,72,2.896,77,1.354,91,4.311,119,2.229,144,3.101,145,3.101,251,1.757,260,1.472,322,1.065,323,1.514,365,2.071,459,2.52,646,3.938,679,3.943,738,5.851,1026,6.011,1033,3.58,1505,4.47,1506,3.938,1507,6.435,1508,5.341,1509,6.043,1510,4.48,1511,4.48,1512,6.043,1513,7.321,1514,4.48,1515,4.48,1516,6.839,1517,6.043,1518,4.48,1519,6.043,1520,6.043,1521,3.938,1522,3.938,1523,3.938,1524,3.938,1525,3.938,1526,5.312,1527,4.48,1528,4.48,1529,4.48,1530,3.938,1531,3.938,1532,4.48,1533,4.48,1534,4.48,1535,4.48,1536,4.48,1537,4.48,1538,4.48,1539,4.48,1540,4.48,1541,4.48]],["title/modules/SentryModule.html",[99,1.293,115,2.961]],["body/modules/SentryModule.html",[0,0.047,3,0.123,4,0.123,5,0.111,11,0.282,12,0.011,20,0.554,25,0.438,36,0.146,39,0.007,40,0.007,53,1.017,63,0.99,64,0.99,65,0.709,67,0.963,70,0.795,77,1.442,99,2.269,101,1.993,102,3.02,115,5.745,117,3.26,118,2.468,119,2.373,144,4.884,145,3.302,260,1.162,305,4.045,307,3.26,636,2.809,797,3.545,857,5.539,1104,3.528,1505,4.661,1508,5.417,1522,4.193,1542,4.193,1543,4.193,1544,3.813,1545,4.771,1546,6.302,1547,7.058,1548,4.771,1549,6.302,1550,3.813,1551,4.771,1552,5.64,1553,4.771,1554,4.193,1555,4.771,1556,6.302,1557,4.771,1558,4.771]],["title/injectables/SentryService.html",[322,0.754,1508,2.791]],["body/injectables/SentryService.html",[0,0.039,3,0.102,4,0.102,5,0.092,7,0.245,11,0.327,12,0.011,20,0.806,25,0.437,36,0.092,39,0.006,40,0.006,51,1.599,53,1.181,63,1.15,64,1.328,65,0.823,67,0.798,70,0.923,72,3.92,73,1.894,77,2.097,94,3.96,97,2.243,144,2.734,145,2.734,251,2.511,260,1.559,287,2.578,322,0.977,323,1.335,351,2.563,365,1.827,679,3.617,740,4.43,772,5.628,803,4.872,861,4.872,881,3.473,1033,3.158,1104,2.922,1164,3.473,1507,5.628,1508,3.617,1523,3.473,1524,3.473,1525,3.473,1526,6.981,1530,3.473,1531,3.473,1550,3.158,1554,3.473,1559,3.473,1560,5.543,1561,3.951,1562,3.951,1563,5.543,1564,7.31,1565,3.951,1566,3.951,1567,3.951,1568,3.473,1569,3.951,1570,3.951,1571,6.403,1572,3.951,1573,5.543,1574,3.951,1575,3.951,1576,3.951,1577,7.31,1578,3.951,1579,5.543,1580,3.951,1581,3.951,1582,3.951,1583,3.951,1584,3.951,1585,3.951,1586,3.951,1587,3.951,1588,3.951,1589,3.951,1590,3.951,1591,3.951,1592,3.951]],["title/classes/StringValidationConstraint.html",[0,0.042,1593,3.419]],["body/classes/StringValidationConstraint.html",[0,0.06,2,1.463,3,0.118,4,0.118,5,0.106,7,0.284,11,0.408,12,0.011,13,1.177,20,0.712,25,0.257,29,2.134,36,0.142,39,0.007,40,0.007,49,2.836,53,1.307,63,1.273,64,1.273,65,0.911,67,1.239,68,2.118,89,2.195,181,1.796,191,1.209,260,1.799,344,3.052,619,4.073,620,3.612,621,2.94,622,3.612,623,4.845,627,3.451,628,3.612,629,3.891,630,3.612,636,2.697,664,4.245,797,2.577,818,3.451,820,4.073,821,2.833,822,2.833,934,4.786,952,4.902,954,4.902,955,3.388,1593,5.527,1594,3.661,1595,4.58,1596,4.58,1597,4.026]],["title/classes/TwoFactorAuthenticationCodeDto.html",[0,0.042,1598,3.164]],["body/classes/TwoFactorAuthenticationCodeDto.html",[0,0.069,2,1.794,3,0.145,4,0.145,5,0.13,7,0.348,8,1.532,11,0.332,12,0.01,13,1.039,14,1.651,15,2.346,17,2.174,20,0.652,25,0.448,26,3.524,27,2.794,28,3.481,29,1.953,30,3.235,31,2.794,32,2.831,33,1.744,36,0.13,37,2.346,38,2.691,39,0.008,40,0.008,699,4.935,1598,5.176,1599,4.935,1600,6.092,1601,5.592,1602,5.615]],["title/controllers/TwoFactorAuthenticationController.html",[184,1.787,306,3.164]],["body/controllers/TwoFactorAuthenticationController.html",[0,0.03,3,0.079,4,0.079,5,0.071,7,0.19,11,0.327,12,0.011,14,1.628,17,1.72,20,0.643,25,0.44,33,0.951,36,0.071,39,0.005,40,0.005,51,2.24,53,0.982,63,1.149,64,1.149,65,0.822,67,1.118,70,0.51,71,4.695,72,3.449,73,1.468,77,1.861,97,1.864,181,1.201,184,1.28,186,1.239,188,1.804,190,1.999,191,1.999,199,4.773,200,3.26,203,2.215,220,3.626,221,1.804,222,2.983,223,4.921,224,1.804,225,1.804,226,2.692,227,1.804,228,1.804,230,3.26,231,2.265,232,2.692,235,2.559,236,1.804,238,2.692,242,1.239,243,1.468,247,2.12,248,2.692,250,1.804,251,1.201,252,2.043,253,2.043,254,3.26,257,2.169,260,1.122,271,4.048,273,2.12,280,2.692,281,2.692,282,4.865,292,2.692,293,2.692,294,5.412,303,3.612,306,3.407,364,3.407,365,2.13,741,4.424,913,3.407,919,2.12,1598,5.322,1600,4.921,1601,5.276,1603,2.692,1604,5.536,1605,5.536,1606,4.865,1607,3.063,1608,3.063,1609,3.063,1610,3.063,1611,3.063,1612,3.063,1613,3.063,1614,3.063,1615,3.063,1616,3.063,1617,4.606,1618,3.063,1619,3.063,1620,2.692,1621,3.063,1622,3.063,1623,3.063,1624,3.063,1625,3.063,1626,3.063,1627,6.157,1628,4.606,1629,3.063,1630,3.063]],["title/injectables/TwoFactorAuthenticationService.html",[303,2.791,322,0.754]],["body/injectables/TwoFactorAuthenticationService.html",[0,0.035,3,0.093,4,0.093,5,0.084,7,0.224,11,0.394,12,0.011,13,1.093,20,0.774,25,0.443,36,0.084,39,0.006,40,0.006,51,2.103,53,1.108,63,1.383,64,1.383,65,0.99,67,1.23,70,0.601,71,4.348,73,1.73,77,2.014,97,1.461,130,1.558,190,2.085,191,2.085,203,2.35,235,3.401,236,2.126,242,3.067,243,1.73,251,2.038,252,1.918,253,2.248,257,1.186,260,1.484,270,3.514,275,2.126,279,3.173,303,3.392,322,0.916,323,1.22,330,3.173,332,4.085,351,2.403,365,1.669,369,4.348,911,2.67,913,5.441,919,2.498,921,4.569,1600,4.868,1620,3.173,1631,3.173,1632,6.092,1633,6.664,1634,6.092,1635,3.61,1636,3.61,1637,3.61,1638,3.61,1639,3.61,1640,3.61,1641,3.61,1642,3.61,1643,3.61,1644,3.173,1645,3.61,1646,3.173,1647,3.61,1648,5.198,1649,3.61,1650,3.61,1651,3.61,1652,5.198,1653,5.198,1654,3.61,1655,3.61]],["title/classes/UpdateCompanyDto.html",[0,0.042,446,2.961]],["body/classes/UpdateCompanyDto.html",[0,0.046,2,0.995,3,0.08,4,0.08,5,0.072,7,0.193,8,1.021,9,3.649,11,0.449,12,0.011,13,1.227,14,2.237,15,3.179,16,3.45,17,2.598,18,1.678,19,1.834,20,0.883,25,0.373,26,2.157,27,1.55,28,2.321,29,1.084,30,3.518,31,1.55,32,3.135,33,0.968,36,0.072,37,3.179,38,1.493,39,0.005,40,0.005,65,1.227,98,2.083,395,3.657,446,3.228,470,4.469,471,4.469,472,4.469,473,4.469,474,4.469,475,4.469,476,4.469,480,3.728,487,3.728,492,3.728,494,3.728,549,2.489,553,2.489,560,4.965,561,4.965,562,3.043,563,2.304,706,2.738,1120,2.738,1656,6.81,1657,5.844,1658,3.115,1659,2.738,1660,3.115,1661,3.115,1662,3.115,1663,3.115,1664,3.115,1665,3.115,1666,3.115,1667,4.664,1668,3.115,1669,3.115]],["title/classes/UpdateManagerDto.html",[0,0.042,1055,2.961]],["body/classes/UpdateManagerDto.html",[0,0.055,2,1.284,3,0.103,4,0.103,5,0.093,7,0.249,8,1.228,11,0.435,12,0.011,13,1.185,14,2.163,15,3.073,17,2.55,18,2.166,20,0.854,25,0.439,26,2.594,27,2,28,2.791,29,1.399,30,3.233,31,2,32,3.083,33,1.249,34,3.47,35,2.782,36,0.093,37,3.073,38,1.927,39,0.007,40,0.007,65,1.185,337,2.615,340,1.695,393,3.073,484,3.304,560,4.8,561,4.8,562,3.661,563,2.973,566,4.217,567,4.473,568,4.473,569,4.931,572,4.484,574,4.484,576,4.484,593,3.533,596,4.15,597,3.533,1055,3.883,1657,4.931,1659,3.533,1670,3.533,1671,4.02,1672,4.02,1673,4.02,1674,4.02,1675,4.02,1676,4.02]],["title/controllers/UsersController.html",[184,1.787,1677,3.164]],["body/controllers/UsersController.html",[0,0.039,1,4.804,3,0.102,4,0.102,5,0.092,7,0.245,11,0.378,12,0.011,13,0.951,14,1.882,17,1.722,20,0.743,25,0.41,33,1.227,36,0.092,39,0.006,40,0.006,41,4.804,53,1.181,63,1.328,64,1.328,65,0.951,67,1.293,70,0.658,77,1.194,184,1.651,186,1.599,188,2.327,190,2.13,191,2.13,200,3.264,220,3.771,221,3.264,222,3.45,224,2.327,225,2.327,227,2.327,228,2.327,235,2.96,250,2.327,252,1.458,254,3.264,257,1.821,260,1.559,337,2.243,382,3.158,443,2.444,459,2.223,929,5.117,946,3.264,1343,4.872,1362,4.1,1677,4.1,1678,3.473,1679,5.628,1680,5.628,1681,4.872,1682,3.473,1683,5.543,1684,4.43,1685,3.951,1686,4.872,1687,3.473,1688,3.951,1689,4.872,1690,3.951,1691,5.543,1692,3.951,1693,3.473,1694,3.473,1695,3.473,1696,3.951,1697,3.951,1698,3.951,1699,3.951,1700,5.543]],["title/entities/UsersEntity.html",[242,1.731,388,1.847]],["body/entities/UsersEntity.html",[0,0.03,3,0.046,4,0.046,5,0.042,7,0.112,8,0.659,11,0.491,12,0.011,13,1.063,14,2.192,15,3.115,17,2.569,20,0.866,22,2.407,25,0.326,32,3.05,33,0.558,36,0.042,37,3.115,39,0.004,40,0.004,55,4.276,65,1.141,96,2.45,98,2.031,181,3.253,190,2.242,242,1.218,270,1.498,287,2.967,337,2.049,340,1.374,344,2.726,362,2.186,364,1.329,369,1.965,388,0.776,390,1.011,392,2.289,393,1.9,395,2.289,396,1.112,398,1.863,404,4.587,409,2.084,410,1.863,412,0.727,442,3.389,452,3.227,477,2.69,478,4.025,482,3.147,484,1.773,485,1.244,488,5.723,489,4.305,497,2.227,500,4.053,566,2.536,567,2.69,568,2.69,602,2.227,604,2.647,627,3.434,656,1.244,937,2.952,938,1.436,946,2.982,1084,2.647,1089,3.416,1141,3.575,1150,3.634,1151,3.634,1152,4.053,1154,3.106,1162,3.997,1375,2.647,1380,1.58,1601,3.634,1684,4.047,1701,1.58,1702,3.416,1703,3.416,1704,3.416,1705,5.064,1706,3.887,1707,3.887,1708,3.416,1709,1.797,1710,3.011,1711,1.797,1712,1.797,1713,1.797,1714,1.797,1715,1.797,1716,1.797,1717,3.011,1718,1.797,1719,1.797,1720,3.011,1721,1.797,1722,1.797,1723,3.011,1724,1.797,1725,1.797,1726,3.011,1727,1.797,1728,1.797,1729,3.011,1730,1.797,1731,3.011,1732,1.797,1733,4.451,1734,1.797,1735,1.797,1736,1.797,1737,1.58,1738,1.797,1739,1.797,1740,1.797]],["title/modules/UsersModule.html",[99,1.293,116,2.646]],["body/modules/UsersModule.html",[0,0.048,3,0.127,4,0.127,5,0.114,12,0.01,25,0.469,36,0.114,39,0.007,40,0.007,70,0.82,99,1.944,101,2.057,102,3.084,107,5.278,110,5.278,116,5.314,117,3.328,118,2.547,119,2.45,121,3.084,127,4.328,129,3.789,130,2.126,137,4.328,186,2.603,235,3.997,242,1.992,305,3.467,307,3.328,416,2.9,417,2.276,1677,5.301,1695,4.328,1741,4.328,1742,4.924,1743,4.328,1744,4.328,1745,4.924,1746,4.328,1747,4.924,1748,4.924]],["title/injectables/UsersService.html",[235,1.978,322,0.754]],["body/injectables/UsersService.html",[0,0.02,1,3.363,3,0.052,4,0.052,5,0.046,7,0.124,11,0.421,12,0.011,13,1.11,20,0.827,25,0.4,36,0.046,39,0.004,40,0.004,41,3.363,51,1.697,53,0.702,54,1.125,59,2.736,63,1.478,64,1.478,65,1.058,67,1.409,69,1.305,70,0.333,77,2.226,97,2.338,181,1.291,190,1.525,191,2.206,203,2.544,211,3.171,214,1.599,235,1.522,242,0.809,251,1.291,252,1.547,253,2.439,256,2.893,257,2.512,260,1.657,270,2.418,276,4.293,322,0.58,323,0.676,337,2.471,340,2.333,343,5.159,351,1.939,352,2.631,358,1.758,359,1.178,365,2.247,369,2.736,387,1.758,393,2.03,412,0.809,417,0.925,442,2.036,450,3.006,452,1.938,454,1.599,515,3.363,527,1.384,536,2.893,543,2.631,937,1.774,938,1.599,941,2.631,946,1.178,1063,3.006,1104,2.435,1117,2.893,1152,1.48,1606,2.893,1679,3.686,1680,3.686,1682,1.758,1684,1.599,1686,2.893,1687,1.758,1689,2.893,1693,1.758,1694,1.758,1702,3.686,1703,1.758,1704,1.758,1708,1.758,1737,1.758,1746,1.758,1749,1.758,1750,3.292,1751,3.292,1752,4.194,1753,4.194,1754,3.292,1755,4.194,1756,4.194,1757,2,1758,4.194,1759,4.194,1760,2,1761,3.292,1762,2,1763,2,1764,3.292,1765,2,1766,3.292,1767,2,1768,3.292,1769,2,1770,2,1771,2,1772,3.292,1773,2,1774,3.292,1775,2,1776,2,1777,2,1778,2,1779,2,1780,3.292,1781,2,1782,2,1783,2,1784,2,1785,2,1786,3.292,1787,2,1788,5.777,1789,4.86,1790,3.292,1791,2,1792,2,1793,4.86,1794,2,1795,3.292,1796,2,1797,3.292,1798,2,1799,4.86,1800,2,1801,2,1802,2,1803,2,1804,4.86,1805,3.292,1806,2,1807,2,1808,2,1809,2]],["title/classes/ViewAuthFilter.html",[0,0.042,1810,3.419]],["body/classes/ViewAuthFilter.html",[0,0.052,2,1.69,3,0.136,4,0.136,5,0.123,7,0.328,11,0.313,12,0.01,20,0.614,25,0.416,36,0.123,39,0.008,40,0.008,48,4.229,49,3.117,50,6.52,53,1.437,54,4.173,58,5.925,59,5.096,60,5.134,61,6.865,62,4.651,63,1.098,64,1.098,65,0.786,66,3.662,67,1.069,68,3.117,70,1.123,71,4.398,73,2.536,77,2.242,78,4.651,79,4.651,80,4.651,82,4.229,83,4.651,443,3.273,741,4.229,1030,4.651,1810,5.387,1811,5.925,1812,5.292,1813,5.292,1814,5.292,1815,5.292]],["title/coverage.html",[1816,4.681]],["body/coverage.html",[0,0.08,1,1.502,5,0.05,6,1.908,11,0.128,12,0.01,26,1.003,30,1.003,34,1.343,39,0.004,40,0.004,41,1.502,42,1.908,46,1.735,47,1.908,48,2.812,66,2.435,74,1.502,92,1.221,97,0.878,184,2.751,185,1.605,187,1.735,194,1.416,199,1.343,211,1.416,230,1.278,233,1.605,235,1.003,237,1.605,240,1.343,242,0.878,245,1.416,247,1.502,299,1.502,300,1.502,301,1.502,302,1.502,303,1.416,306,1.605,319,2.602,322,1.432,324,1.908,353,1.343,355,1.605,388,2.73,389,1.502,391,1.908,400,1.169,423,1.605,424,1.908,432,1.502,446,1.502,450,1.343,452,1.278,469,1.908,511,1.908,545,1.605,546,1.908,548,1.908,549,2.812,562,1.416,564,1.502,565,1.908,578,1.735,580,1.502,581,1.908,582,1.908,586,1.502,587,1.908,596,1.605,598,1.908,607,1.735,609,1.735,611,2.303,613,2.812,614,2.812,616,1.605,617,1.735,618,2.812,631,1.502,639,1.735,640,1.908,662,6.201,692,1.735,693,1.908,708,1.605,709,1.908,732,1.735,733,1.735,735,1.908,753,1.908,758,1.416,768,1.605,789,1.908,809,1.735,810,2.812,818,3.828,849,1.605,850,1.908,855,1.605,856,3.546,865,1.605,882,1.735,899,1.605,900,1.908,911,1.605,912,1.908,914,1.908,915,1.908,919,1.502,920,1.908,922,1.908,923,1.908,924,1.908,925,1.908,930,1.908,931,1.735,932,2.812,937,1.169,949,1.735,950,2.812,957,1.735,958,2.812,965,3.281,966,1.908,969,1.908,970,2.812,971,1.908,994,1.908,1003,1.735,1004,1.908,1006,1.908,1011,1.908,1013,1.908,1021,1.735,1022,1.908,1037,1.605,1038,1.908,1055,1.502,1063,1.343,1073,1.908,1097,1.908,1136,1.735,1137,2.812,1141,1.416,1142,1.908,1172,1.605,1173,1.908,1186,1.735,1187,2.812,1197,1.605,1198,2.812,1217,1.343,1219,1.416,1225,1.735,1246,1.908,1260,1.908,1286,1.502,1287,1.908,1288,1.605,1289,1.908,1294,1.605,1295,1.908,1333,1.416,1335,1.605,1363,1.908,1386,1.416,1401,1.908,1425,1.908,1505,1.605,1506,1.908,1508,1.416,1544,1.735,1552,1.735,1559,1.908,1593,1.735,1594,2.812,1598,1.605,1599,1.908,1603,1.908,1631,1.908,1656,1.908,1670,1.908,1677,1.605,1678,1.908,1701,1.908,1749,1.908,1810,1.735,1811,1.908,1816,1.735,1817,2.17,1818,2.17,1819,2.17,1820,2.17,1821,4.437,1822,8.278,1823,8.207,1824,7.152,1825,6.992,1826,6.004,1827,5.102,1828,3.518,1829,2.17,1830,1.908,1831,1.908,1832,2.17,1833,2.17,1834,6.323,1835,1.908,1836,2.17,1837,2.17,1838,2.17,1839,1.908,1840,1.908,1841,1.908,1842,1.908,1843,2.17,1844,2.17]],["title/dependencies.html",[102,2.468,1845,3.132]],["body/dependencies.html",[0,0.059,12,0.011,29,1.555,33,1.388,39,0.007,40,0.007,70,0.745,73,3.274,102,2.142,130,1.929,132,3.928,145,3.093,273,3.093,310,2.408,313,3.093,352,3.572,412,1.808,417,2.066,651,3.928,656,3.093,674,3.572,800,3.928,946,3.553,978,4.727,979,4.463,1017,5.303,1215,3.928,1239,3.572,1346,3.306,1392,4.463,1393,3.928,1410,3.572,1521,3.928,1550,3.572,1568,3.928,1644,3.928,1646,3.928,1846,4.469,1847,4.469,1848,4.469,1849,4.469,1850,4.469,1851,7.638,1852,4.469,1853,4.469,1854,4.469,1855,4.469,1856,4.469,1857,6.034,1858,4.469,1859,4.469,1860,4.469,1861,6.034,1862,6.034,1863,4.469,1864,4.469,1865,4.469,1866,4.469,1867,6.034,1868,4.469,1869,4.469,1870,4.469,1871,4.469,1872,4.469,1873,4.469,1874,4.469,1875,4.469,1876,4.469,1877,4.469,1878,4.469,1879,4.469,1880,4.469,1881,4.469,1882,4.469,1883,4.469,1884,4.469,1885,4.469,1886,4.469,1887,4.469,1888,4.469,1889,4.469,1890,4.469,1891,4.469,1892,4.469,1893,4.469,1894,4.469,1895,4.469,1896,4.469,1897,4.469,1898,4.469]],["title/miscellaneous/enumerations.html",[1899,2.099,1900,4.527]],["body/miscellaneous/enumerations.html",[7,0.361,12,0.01,39,0.008,40,0.008,56,5.68,270,3.556,1156,6.282,1158,6.282,1159,6.282,1733,6.282,1899,3.422,1900,5.107,1901,7.741,1902,5.81,1903,5.81,1904,7.147,1905,7.147,1906,7.147,1907,7.147,1908,7.147,1909,7.147,1910,7.147,1911,5.81,1912,7.147]],["title/miscellaneous/functions.html",[1899,2.099,1913,4.527]],["body/miscellaneous/functions.html",[7,0.295,11,0.49,12,0.01,30,2.909,34,3.892,39,0.007,40,0.007,63,1.721,64,1.721,65,1.232,67,0.961,562,4.105,578,5.028,596,4.653,607,5.028,609,5.028,618,3.803,629,5.023,631,3.293,810,3.803,819,4.182,932,3.803,948,4.182,950,3.803,956,4.182,958,3.803,964,4.182,1137,3.803,1140,4.182,1187,3.803,1193,4.182,1443,7.292,1594,3.803,1597,4.182,1830,4.182,1831,6.195,1840,5.53,1899,2.802,1913,4.182,1914,4.758,1915,4.758,1916,4.758,1917,4.758,1918,4.758,1919,4.758,1920,4.758,1921,4.758,1922,4.758,1923,4.758]],["title/index.html",[7,0.221,1924,3.564,1925,3.564]],["body/index.html",[0,0.035,12,0.011,36,0.082,39,0.006,40,0.006,55,2.297,60,2.436,68,1.627,92,1.98,94,2.177,100,3.533,120,3.094,123,3.094,124,3.094,144,4.156,166,3.094,167,3.094,168,3.094,175,3.094,176,4.486,177,3.094,182,3.094,183,3.094,187,2.813,253,1.299,359,2.073,393,1.471,412,1.424,674,2.813,681,3.094,756,3.094,1239,2.813,1315,3.094,1320,2.813,1346,2.603,1362,2.603,1392,2.603,1681,3.094,1816,4.079,1926,3.094,1927,3.094,1928,4.486,1929,4.486,1930,3.52,1931,3.52,1932,3.52,1933,3.52,1934,3.52,1935,3.52,1936,3.52,1937,5.104,1938,5.104,1939,6.993,1940,3.52,1941,3.52,1942,3.52,1943,3.52,1944,3.52,1945,3.52,1946,3.52,1947,3.52,1948,6.005,1949,6.005,1950,3.52,1951,3.52,1952,3.52,1953,5.104,1954,3.52,1955,3.52,1956,3.52,1957,5.104,1958,3.52,1959,5.104,1960,3.52,1961,3.52,1962,3.52,1963,3.52,1964,5.104,1965,3.52,1966,3.52,1967,3.52,1968,3.52,1969,3.52,1970,3.52,1971,3.52,1972,3.52,1973,3.52,1974,3.52,1975,3.52,1976,3.52,1977,3.52,1978,3.52,1979,3.52,1980,3.52]],["title/modules.html",[101,2.447]],["body/modules.html",[12,0.008,39,0.008,40,0.008,100,3.851,101,2.324,105,3.851,106,3.851,107,3.63,108,3.851,109,3.63,110,3.63,111,3.851,112,3.63,113,3.851,114,3.63,115,3.851,116,3.442,749,3.851,1981,8.701,1982,8.701,1983,8.701,1984,8.86,1985,7.954,1986,7.954]],["title/overview.html",[1987,5.148]],["body/overview.html",[2,1.05,12,0.01,39,0.006,40,0.006,100,6.003,101,1.373,102,2.327,103,2.889,104,2.889,105,5.888,106,3.995,107,4.805,108,3.995,109,5.196,110,4.805,111,3.995,112,4.805,113,5.577,114,4.16,115,4.707,116,4.985,117,2.511,118,1.7,119,1.635,186,1.33,230,4.337,235,3.405,240,4.555,295,2.889,296,2.889,298,2.889,299,3.995,300,3.995,301,3.995,302,3.995,303,3.767,323,1.111,390,1.849,450,4.555,484,1.936,505,2.889,506,2.889,507,2.889,612,1.52,732,2.627,745,2.889,746,2.889,747,2.889,748,2.889,749,4.927,758,4.805,784,2.889,785,2.889,786,2.889,1063,4.555,1091,2.889,1092,2.889,1093,2.889,1217,4.555,1254,2.889,1255,2.889,1256,2.889,1333,4.805,1382,2.889,1384,2.889,1385,2.889,1386,3.767,1508,3.767,1542,2.889,1543,2.889,1741,2.889,1743,2.889,1744,2.889,1987,2.889,1988,3.287,1989,3.287,1990,3.287,1991,3.287,1992,3.287,1993,3.287]],["title/properties.html",[8,1.127,1845,3.132]],["body/properties.html",[8,1.435,12,0.01,17,2.036,39,0.009,40,0.009,602,4.849,1926,5.762,1927,5.762,1928,5.762,1929,5.762,1994,6.555,1995,6.555,1996,6.555,1997,6.555,1998,6.555,1999,5.762]],["title/miscellaneous/typealiases.html",[1899,2.099,2000,5.15]],["body/miscellaneous/typealiases.html",[7,0.413,11,0.393,12,0.009,39,0.009,40,0.009,818,4.359,867,6.811,874,6.811,1899,3.916,2001,6.65,2002,7.749,2003,6.65]],["title/miscellaneous/variables.html",[1899,2.099,2004,4.527]],["body/miscellaneous/variables.html",[7,0.315,11,0.49,12,0.01,13,1.211,26,3.033,39,0.008,40,0.008,55,5.415,56,5.415,92,3.691,190,1.339,337,2.053,392,2.988,393,2.119,566,3.31,567,3.511,568,3.511,602,3.752,856,4.054,882,5.811,937,2.734,955,3.752,1198,4.054,1199,4.459,1225,5.243,1335,4.853,1544,4.054,1552,5.811,1835,4.459,1839,4.459,1841,4.459,1842,5.766,1899,2.988,1999,4.459,2004,4.459,2005,5.073,2006,5.073,2007,5.073,2008,6.561,2009,5.073,2010,5.073,2011,5.073,2012,5.073,2013,5.073,2014,5.073,2015,5.073,2016,5.073]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"modules/CategoriesModule.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"modules/DatabaseModule.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"modules/OrdersModule.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":662,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"classes/PhoneValidationConstraint.html":{},"injectables/PricesService.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1995,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1890,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1875,"title":{},"body":{"dependencies.html":{}}}],["0.18.2",{"_index":1898,"title":{},"body":{"dependencies.html":{}}}],["0.2.43",{"_index":1896,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1874,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":1883,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1822,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1829,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1838,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1824,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1823,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1825,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1826,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1827,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1820,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1821,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1828,"title":{},"body":{"coverage.html":{}}}],["00140",{"_index":590,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/EditProductDto.html":{},"entities/ProductsEntity.html":{}}}],["01.01.0001",{"_index":1074,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["01.01.2007",{"_index":1082,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["01.01.2021",{"_index":482,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CreatePriceDto.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["01.01.2022",{"_index":1667,"title":{},"body":{"classes/UpdateCompanyDto.html":{}}}],["1",{"_index":484,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/HelperFileLoader.html":{},"entities/ManagersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"classes/UpdateManagerDto.html":{},"entities/UsersEntity.html":{},"overview.html":{}}}],["1.0",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["1.0.0",{"_index":1885,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":1869,"title":{},"body":{"dependencies.html":{}}}],["1.1.19",{"_index":1847,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":1852,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1862,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1876,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":1888,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1837,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":1833,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":358,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["100",{"_index":1964,"title":{},"body":{"index.html":{}}}],["12",{"_index":1832,"title":{},"body":{"coverage.html":{}}}],["12.0.1",{"_index":1882,"title":{},"body":{"dependencies.html":{}}}],["120",{"_index":1398,"title":{},"body":{"modules/ProductsModule.html":{}}}],["13",{"_index":1993,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1988,"title":{},"body":{"overview.html":{}}}],["15",{"_index":1729,"title":{},"body":{"entities/UsersEntity.html":{}}}],["17.1.1",{"_index":1850,"title":{},"body":{"dependencies.html":{}}}],["17.1.8",{"_index":1864,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":892,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["2.0.0",{"_index":1873,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":492,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["211",{"_index":494,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["23",{"_index":1991,"title":{},"body":{"overview.html":{}}}],["2460113920",{"_index":16,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"entities/CompaniesEntity.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["25",{"_index":1992,"title":{},"body":{"overview.html":{}}}],["2fa",{"_index":1601,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/UsersEntity.html":{}}}],["2fa'})@httpcode(200)@post('authenticate')@useguards(jwtauthenticationguard",{"_index":1608,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["2fa'})@httpcode(200)@post('generate')@useguards(jwtauthenticationguard",{"_index":1611,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["2fa/refresh/emailconfirm/viewauthfilter/rbac",{"_index":1965,"title":{},"body":{"index.html":{}}}],["3.0.2",{"_index":1892,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":1868,"title":{},"body":{"dependencies.html":{}}}],["3.6.0",{"_index":1872,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":1836,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":1884,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":1880,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":1895,"title":{},"body":{"dependencies.html":{}}}],["420",{"_index":592,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/EditProductDto.html":{},"entities/ProductsEntity.html":{}}}],["4][0",{"_index":838,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["5",{"_index":487,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["5.0.0",{"_index":1859,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":1871,"title":{},"body":{"dependencies.html":{}}}],["5.2.0",{"_index":1855,"title":{},"body":{"dependencies.html":{}}}],["5]|[0",{"_index":837,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["6.0.2",{"_index":1878,"title":{},"body":{"dependencies.html":{}}}],["6.19.3",{"_index":1857,"title":{},"body":{"dependencies.html":{}}}],["6.4.4",{"_index":1866,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":1881,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1990,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1893,"title":{},"body":{"dependencies.html":{}}}],["7.9.0",{"_index":1849,"title":{},"body":{"dependencies.html":{}}}],["76664442200",{"_index":576,"title":{},"body":{"classes/CreateManagerDto.html":{},"entities/ManagersEntity.html":{},"classes/UpdateManagerDto.html":{}}}],["79998884422",{"_index":1731,"title":{},"body":{"entities/UsersEntity.html":{}}}],["79998885544",{"_index":2015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":1989,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":1851,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":1856,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":1854,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":1887,"title":{},"body":{"dependencies.html":{}}}],["89998887766",{"_index":480,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["9",{"_index":834,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["9!#$%&'*+/=?^_",{"_index":825,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["9](?:[a",{"_index":833,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["9]))\\.){3}(?:(2(5[0",{"_index":843,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["9])?\\.)+[a",{"_index":835,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["9])?|\\[(?:(?:(2(5[0",{"_index":836,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["9])|1[0",{"_index":839,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["9])|[a",{"_index":844,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["9]:(?:[\\x01",{"_index":845,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["9]?[0",{"_index":842,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["9][0",{"_index":840,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["9]{3",{"_index":1194,"title":{},"body":{"classes/PhoneValidationConstraint.html":{}}}],["9]{3})\\2([0",{"_index":1195,"title":{},"body":{"classes/PhoneValidationConstraint.html":{}}}],["9]{4",{"_index":1196,"title":{},"body":{"classes/PhoneValidationConstraint.html":{}}}],["9]|[1",{"_index":841,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["__dirname",{"_index":689,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["_context",{"_index":1515,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["_file",{"_index":871,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["_fileid",{"_index":1277,"title":{},"body":{"injectables/PricesService.html":{}}}],["_fileid.file",{"_index":1279,"title":{},"body":{"injectables/PricesService.html":{}}}],["_foundcompany",{"_index":536,"title":{},"body":{"injectables/CompaniesService.html":{},"injectables/UsersService.html":{}}}],["_foundmanager",{"_index":1117,"title":{},"body":{"injectables/ManagersService.html":{},"injectables/UsersService.html":{}}}],["_foundmanager.email",{"_index":1122,"title":{},"body":{"injectables/ManagersService.html":{}}}],["_foundmanager.firstname",{"_index":1124,"title":{},"body":{"injectables/ManagersService.html":{}}}],["_foundmanager.lastname",{"_index":1126,"title":{},"body":{"injectables/ManagersService.html":{}}}],["_foundmanager.phonenumber",{"_index":1128,"title":{},"body":{"injectables/ManagersService.html":{}}}],["_foundmanager.updatedat",{"_index":1130,"title":{},"body":{"injectables/ManagersService.html":{}}}],["_founduser",{"_index":1799,"title":{},"body":{"injectables/UsersService.html":{}}}],["_founduser.company",{"_index":1803,"title":{},"body":{"injectables/UsersService.html":{}}}],["_founduser.manager",{"_index":1809,"title":{},"body":{"injectables/UsersService.html":{}}}],["_path",{"_index":878,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["_req",{"_index":869,"title":{},"body":{"classes/HelperFileLoader.html":{},"injectables/LoggerMiddleware.html":{}}}],["_res",{"_index":1025,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["_user",{"_index":1788,"title":{},"body":{"injectables/UsersService.html":{}}}],["_validationarguments",{"_index":934,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["accessors",{"_index":861,"title":{},"body":{"classes/HelperFileLoader.html":{},"injectables/SentryService.html":{}}}],["accesstokencookie",{"_index":271,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["addcompanytouser",{"_index":1679,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addcompanytouser(companyanduserdata",{"_index":1682,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addcompanytouserdto",{"_index":1,"title":{"classes/AddCompanyToUserDto.html":{}},"body":{"classes/AddCompanyToUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["addmanagertouser",{"_index":1680,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addmanagertouser(manageranduserdata",{"_index":1687,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addmanagertouserdto",{"_index":41,"title":{"classes/AddManagerToUserDto.html":{}},"body":{"classes/AddManagerToUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["addproductstolocalstorage",{"_index":1296,"title":{},"body":{"controllers/ProductsController.html":{}}}],["addproductstolocalstorage(id",{"_index":1303,"title":{},"body":{"controllers/ProductsController.html":{}}}],["admin",{"_index":1912,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["again",{"_index":1539,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["age=${this.configservice.get",{"_index":377,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":381,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["aliases",{"_index":2001,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all')@render('products/products",{"_index":1314,"title":{},"body":{"controllers/ProductsController.html":{}}}],["allexceptionsfilter",{"_index":46,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["already",{"_index":940,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{}}}],["api",{"_index":1973,"title":{},"body":{"index.html":{}}}],["apibasicauth",{"_index":219,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibody",{"_index":1221,"title":{},"body":{"controllers/PricesController.html":{}}}],["apiconsumes",{"_index":1222,"title":{},"body":{"controllers/PricesController.html":{}}}],["apiconsumes('multipart/form",{"_index":1240,"title":{},"body":{"controllers/PricesController.html":{}}}],["apioperation",{"_index":220,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["apioperation({description",{"_index":200,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":32,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"entities/CompaniesEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EditProductDto.html":{},"classes/FileUploadDto.html":{},"entities/ManagersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"entities/UsersEntity.html":{}}}],["apiproperty({example",{"_index":15,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"entities/CompaniesEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EditProductDto.html":{},"entities/ManagersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"entities/UsersEntity.html":{}}}],["apiproperty({type",{"_index":852,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["apipropertyoptional",{"_index":561,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/CreatePriceDto.html":{},"classes/EditProductDto.html":{},"entities/ManagersEntity.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{}}}],["apipropertyoptional()@emailvalidation()@isoptional",{"_index":1671,"title":{},"body":{"classes/UpdateManagerDto.html":{}}}],["apipropertyoptional()@isnotempty({message",{"_index":695,"title":{},"body":{"classes/EditProductDto.html":{}}}],["apipropertyoptional()@isoptional",{"_index":1668,"title":{},"body":{"classes/UpdateCompanyDto.html":{}}}],["apipropertyoptional()@isoptional()@stringvalidation",{"_index":553,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/CreatePriceDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["apipropertyoptional()@stringvalidation()@isoptional",{"_index":1657,"title":{},"body":{"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{}}}],["apipropertyoptional()@stringvalidation()@phonevalidation()@isoptional",{"_index":1659,"title":{},"body":{"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{}}}],["apitags",{"_index":221,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["apitags('2fa",{"_index":1622,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["app_interceptor",{"_index":1549,"title":{},"body":{"modules/SentryModule.html":{}}}],["appmodule",{"_index":100,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":652,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["argumentshost",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ViewAuthFilter.html":{}}}],["array",{"_index":675,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"interfaces/ProductSearchResult.html":{}}}],["asc",{"_index":1492,"title":{},"body":{"injectables/ProductsService.html":{}}}],["async",{"_index":191,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"classes/StringValidationConstraint.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":189,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/EmailService.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"modules/SearchModule.html":{}}}],["authenticate",{"_index":1604,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(request",{"_index":1607,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication",{"_index":380,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authentication.controller",{"_index":308,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.guard",{"_index":248,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.guard.ts",{"_index":966,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":231,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication/authentication.module",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication/interfaces/renderauthtemplate.interface",{"_index":1224,"title":{},"body":{"controllers/PricesController.html":{},"controllers/ProductsController.html":{}}}],["authentication/interfaces/requestwithuser.interface",{"_index":723,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{}}}],["authentication=${token",{"_index":374,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":185,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":105,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":230,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"overview.html":{}}}],["authenticationservice.getauthenticateduser",{"_index":1019,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["authenticator",{"_index":1643,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.generatesecret",{"_index":1647,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.keyuri(user.email",{"_index":1650,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.verify",{"_index":1654,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authguard",{"_index":967,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":968,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{}}}],["authguard('local",{"_index":1012,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":1998,"title":{},"body":{"properties.html":{}}}],["available",{"_index":1986,"title":{},"body":{"modules.html":{}}}],["await",{"_index":257,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"injectables/CustomValidationPipe.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1926,"title":{},"body":{"index.html":{},"properties.html":{}}}],["badrequestexception",{"_index":351,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SentryService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('2fa",{"_index":1010,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["based",{"_index":1582,"title":{},"body":{"injectables/SentryService.html":{}}}],["bcrypt",{"_index":352,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":387,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":1798,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(userdata.password",{"_index":357,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["big",{"_index":572,"title":{},"body":{"classes/CreateManagerDto.html":{},"entities/ManagersEntity.html":{},"classes/UpdateManagerDto.html":{}}}],["binary",{"_index":853,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["blunshtelega@gmail.com",{"_index":2014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":222,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["body.hits.hits",{"_index":1422,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["boolean",{"_index":627,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"interfaces/ITokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/StringValidationConstraint.html":{},"entities/UsersEntity.html":{}}}],["bootstrap",{"_index":1831,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1984,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1981,"title":{},"body":{"modules.html":{}}}],["build",{"_index":1954,"title":{},"body":{"index.html":{}}}],["builderror",{"_index":641,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["builderror(errors",{"_index":644,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["cache",{"_index":1392,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"dependencies.html":{},"index.html":{}}}],["cache_key_metadata",{"_index":905,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache_manager",{"_index":1446,"title":{},"body":{"injectables/ProductsService.html":{}}}],["cacheinterceptor",{"_index":901,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cachekey",{"_index":906,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/ProductsController.html":{}}}],["cachekey(get_products_cache_key",{"_index":1348,"title":{},"body":{"controllers/ProductsController.html":{}}}],["cachemanager",{"_index":1432,"title":{},"body":{"injectables/ProductsService.html":{}}}],["cachemodule",{"_index":1388,"title":{},"body":{"modules/ProductsModule.html":{}}}],["cachemodule.register",{"_index":1399,"title":{},"body":{"modules/ProductsModule.html":{}}}],["cachemodule.registerasync",{"_index":1394,"title":{},"body":{"modules/ProductsModule.html":{}}}],["callhandler",{"_index":1513,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["canactivate",{"_index":736,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["canactivate(context",{"_index":737,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["capture",{"_index":1535,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["cascade",{"_index":1150,"title":{},"body":{"entities/OrdersEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["catch",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthenticationService.html":{},"injectables/CompaniesService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/ManagersService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{}}}],["catch(exception",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ViewAuthFilter.html":{}}}],["catch(unauthorizedexception",{"_index":1814,"title":{},"body":{"classes/ViewAuthFilter.html":{}}}],["catcherror",{"_index":1518,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["catcherror((error",{"_index":1534,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["categories.controller",{"_index":421,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.entity",{"_index":415,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":419,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories/categories.entity",{"_index":1379,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["categories/categories.module",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["categoriescontroller",{"_index":420,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categoriesentity",{"_index":389,"title":{"entities/CategoriesEntity.html":{}},"body":{"entities/CategoriesEntity.html":{},"modules/CategoriesModule.html":{},"entities/ProductsEntity.html":{},"coverage.html":{}}}],["categoriesentity})@manytoone(undefined",{"_index":1366,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["categoriesmodule",{"_index":106,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesservice",{"_index":418,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["category",{"_index":1364,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["category.products",{"_index":1367,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["cb",{"_index":866,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["cb(error",{"_index":898,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["cb(null",{"_index":895,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["change",{"_index":1957,"title":{},"body":{"index.html":{}}}],["checking",{"_index":939,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{}}}],["checks",{"_index":1977,"title":{},"body":{"index.html":{}}}],["child",{"_index":1525,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{}}}],["class",{"_index":0,"title":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomPasswordLengthConstraint.html":{},"classes/EditProductDto.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"classes/ViewAuthFilter.html":{}},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"modules/CategoriesModule.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"modules/DatabaseModule.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"modules/OrdersModule.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomPasswordLengthConstraint.html":{},"classes/EditProductDto.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"classes/ViewAuthFilter.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":227,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["clearcache",{"_index":1426,"title":{},"body":{"injectables/ProductsService.html":{}}}],["cluster_appmodule",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":295,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":296,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":297,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":298,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_companiesmodule",{"_index":505,"title":{},"body":{"modules/CompaniesModule.html":{},"overview.html":{}}}],["cluster_companiesmodule_exports",{"_index":507,"title":{},"body":{"modules/CompaniesModule.html":{},"overview.html":{}}}],["cluster_companiesmodule_providers",{"_index":506,"title":{},"body":{"modules/CompaniesModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule",{"_index":745,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_exports",{"_index":746,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_imports",{"_index":748,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_providers",{"_index":747,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":784,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":785,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":786,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_managersmodule",{"_index":1091,"title":{},"body":{"modules/ManagersModule.html":{},"overview.html":{}}}],["cluster_managersmodule_exports",{"_index":1093,"title":{},"body":{"modules/ManagersModule.html":{},"overview.html":{}}}],["cluster_managersmodule_providers",{"_index":1092,"title":{},"body":{"modules/ManagersModule.html":{},"overview.html":{}}}],["cluster_pricesmodule",{"_index":1254,"title":{},"body":{"modules/PricesModule.html":{},"overview.html":{}}}],["cluster_pricesmodule_exports",{"_index":1256,"title":{},"body":{"modules/PricesModule.html":{},"overview.html":{}}}],["cluster_pricesmodule_providers",{"_index":1255,"title":{},"body":{"modules/PricesModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1382,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_exports",{"_index":1385,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_imports",{"_index":1383,"title":{},"body":{"modules/ProductsModule.html":{}}}],["cluster_productsmodule_providers",{"_index":1384,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_sentrymodule",{"_index":1542,"title":{},"body":{"modules/SentryModule.html":{},"overview.html":{}}}],["cluster_sentrymodule_providers",{"_index":1543,"title":{},"body":{"modules/SentryModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1741,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1744,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1742,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1743,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":404,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["column({type",{"_index":477,"title":{},"body":{"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["companies",{"_index":425,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["companies.controller",{"_index":509,"title":{},"body":{"modules/CompaniesModule.html":{}}}],["companies.entity",{"_index":453,"title":{},"body":{"controllers/CompaniesController.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{}}}],["companies.service",{"_index":451,"title":{},"body":{"controllers/CompaniesController.html":{},"modules/CompaniesModule.html":{}}}],["companies/companies.entity",{"_index":1737,"title":{},"body":{"entities/UsersEntity.html":{},"injectables/UsersService.html":{}}}],["companies/companies.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["companies/companies.service",{"_index":1783,"title":{},"body":{"injectables/UsersService.html":{}}}],["companiescontroller",{"_index":423,"title":{"controllers/CompaniesController.html":{}},"body":{"controllers/CompaniesController.html":{},"modules/CompaniesModule.html":{},"coverage.html":{}}}],["companiesentity",{"_index":452,"title":{"entities/CompaniesEntity.html":{}},"body":{"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["companiesentity})@manytoone(undefined",{"_index":1709,"title":{},"body":{"entities/UsersEntity.html":{}}}],["companiesmodule",{"_index":107,"title":{"modules/CompaniesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CompaniesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["companiesservice",{"_index":450,"title":{"injectables/CompaniesService.html":{}},"body":{"controllers/CompaniesController.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["company",{"_index":1684,"title":{},"body":{"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{}}}],["company.dto",{"_index":456,"title":{},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{}}}],["company.dto.ts",{"_index":549,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{},"coverage.html":{}}}],["company.dto.ts:15",{"_index":1658,"title":{},"body":{"classes/UpdateCompanyDto.html":{}}}],["company.dto.ts:16",{"_index":550,"title":{},"body":{"classes/CreateCompanyDto.html":{}}}],["company.dto.ts:25",{"_index":1666,"title":{},"body":{"classes/UpdateCompanyDto.html":{}}}],["company.dto.ts:26",{"_index":559,"title":{},"body":{"classes/CreateCompanyDto.html":{}}}],["company.dto.ts:35",{"_index":1660,"title":{},"body":{"classes/UpdateCompanyDto.html":{}}}],["company.dto.ts:37",{"_index":552,"title":{},"body":{"classes/CreateCompanyDto.html":{}}}],["company.dto.ts:44",{"_index":1662,"title":{},"body":{"classes/UpdateCompanyDto.html":{}}}],["company.dto.ts:47",{"_index":555,"title":{},"body":{"classes/CreateCompanyDto.html":{}}}],["company.dto.ts:53",{"_index":1665,"title":{},"body":{"classes/UpdateCompanyDto.html":{}}}],["company.dto.ts:57",{"_index":558,"title":{},"body":{"classes/CreateCompanyDto.html":{}}}],["company.dto.ts:62",{"_index":1663,"title":{},"body":{"classes/UpdateCompanyDto.html":{}}}],["company.dto.ts:67",{"_index":556,"title":{},"body":{"classes/CreateCompanyDto.html":{}}}],["company.dto.ts:71",{"_index":1661,"title":{},"body":{"classes/UpdateCompanyDto.html":{}}}],["company.dto.ts:76",{"_index":554,"title":{},"body":{"classes/CreateCompanyDto.html":{}}}],["company.dto.ts:80",{"_index":1664,"title":{},"body":{"classes/UpdateCompanyDto.html":{}}}],["company.dto.ts:85",{"_index":557,"title":{},"body":{"classes/CreateCompanyDto.html":{}}}],["company.dto.ts:88",{"_index":1669,"title":{},"body":{"classes/UpdateCompanyDto.html":{}}}],["company.users",{"_index":1710,"title":{},"body":{"entities/UsersEntity.html":{}}}],["companyanduserdata",{"_index":1686,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["companyanduserdata.taxpayeridentificationnumber",{"_index":1802,"title":{},"body":{"injectables/UsersService.html":{}}}],["companyanduserdata.useremail",{"_index":1800,"title":{},"body":{"injectables/UsersService.html":{}}}],["companydata",{"_index":435,"title":{},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{}}}],["companydata.taxpayeridentificationnumber",{"_index":540,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["companydata.updatedat",{"_index":541,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["companyname",{"_index":470,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["companyrepository",{"_index":517,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["companyservice",{"_index":1758,"title":{},"body":{"injectables/UsersService.html":{}}}],["companytelephonenumbers",{"_index":471,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["comparepassword",{"_index":1795,"title":{},"body":{"injectables/UsersService.html":{}}}],["compodoc/compodoc",{"_index":1846,"title":{},"body":{"dependencies.html":{}}}],["compose",{"_index":1953,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":332,"title":{},"body":{"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["configservice.get('elasticsearch_node",{"_index":1502,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('elasticsearch_password",{"_index":1504,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('elasticsearch_username",{"_index":1503,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":1000,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":988,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('postgres_db",{"_index":688,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":682,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":686,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":683,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":685,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('redis_host",{"_index":1395,"title":{},"body":{"modules/ProductsModule.html":{}}}],["configservice.get('redis_port",{"_index":1396,"title":{},"body":{"modules/ProductsModule.html":{}}}],["configure",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["confirm",{"_index":711,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{}}}],["confirm(confirmationdata",{"_index":713,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation",{"_index":710,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmationdata",{"_index":716,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmationdata.token",{"_index":728,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmemail",{"_index":754,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail(email",{"_index":760,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemaildto",{"_index":545,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["console.log('request",{"_index":1036,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(count",{"_index":1496,"title":{},"body":{"injectables/ProductsService.html":{}}}],["console.log(items",{"_index":1495,"title":{},"body":{"injectables/ProductsService.html":{}}}],["const",{"_index":77,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CompaniesService.html":{},"injectables/CustomValidationPipe.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/ManagersService.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{}}}],["constraint[0",{"_index":672,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["constraint[1",{"_index":673,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["constraints",{"_index":823,"title":{},"body":{"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/PhoneValidationConstraint.html":{}}}],["constructor",{"_index":251,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CompaniesService.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ManagersService.html":{},"injectables/PricesService.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(request",{"_index":1578,"title":{},"body":{"injectables/SentryService.html":{}}}],["constructor(authenticationservice",{"_index":1014,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(companyrepository",{"_index":514,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["constructor(configservice",{"_index":792,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["constructor(elasticsearchservice",{"_index":1403,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["constructor(jwtservice",{"_index":757,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["constructor(managersrepository",{"_index":1100,"title":{},"body":{"injectables/ManagersService.html":{}}}],["constructor(pricesrepository",{"_index":1263,"title":{},"body":{"injectables/PricesService.html":{}}}],["constructor(private",{"_index":459,"title":{},"body":{"controllers/CompaniesController.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"injectables/SentryInterceptor.html":{},"controllers/UsersController.html":{}}}],["constructor(productsrepository",{"_index":1431,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(request",{"_index":1561,"title":{},"body":{"injectables/SentryService.html":{}}}],["constructor(sentryservice",{"_index":1510,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["constructor(usersrepository",{"_index":1757,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":330,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["constructor.getspan",{"_index":1574,"title":{},"body":{"injectables/SentryService.html":{}}}],["constructorspan",{"_index":1573,"title":{},"body":{"injectables/SentryService.html":{}}}],["consumer",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(sentry.handlers.requesthandler()).forroutes",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["container",{"_index":1945,"title":{},"body":{"index.html":{}}}],["context",{"_index":740,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/SentryService.html":{}}}],["context.gethandler",{"_index":908,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":742,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["controller",{"_index":184,"title":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('2fa",{"_index":1621,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["controller('auth",{"_index":249,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('companies",{"_index":458,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["controller('email",{"_index":724,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["controller('managers",{"_index":1065,"title":{},"body":{"controllers/ManagersController.html":{}}}],["controller('prices",{"_index":1227,"title":{},"body":{"controllers/PricesController.html":{}}}],["controller('products",{"_index":1337,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('users",{"_index":1696,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":186,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/CompaniesController.html":{},"modules/CompaniesModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"controllers/ManagersController.html":{},"modules/ManagersModule.html":{},"modules/OrdersModule.html":{},"controllers/PricesController.html":{},"modules/PricesModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convertedprice",{"_index":1457,"title":{},"body":{"injectables/ProductsService.html":{}}}],["convertedprice.foreach((element",{"_index":1460,"title":{},"body":{"injectables/ProductsService.html":{}}}],["convertedprice[0].productcode",{"_index":1463,"title":{},"body":{"injectables/ProductsService.html":{}}}],["convertedprice[0].productprice",{"_index":1467,"title":{},"body":{"injectables/ProductsService.html":{}}}],["convertedprice[0].title",{"_index":1465,"title":{},"body":{"injectables/ProductsService.html":{}}}],["cookie",{"_index":273,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"interfaces/ICookiesFromJwt.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{}}}],["count",{"_index":1355,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["coverage",{"_index":1816,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":1104,"title":{},"body":{"injectables/ManagersService.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"injectables/UsersService.html":{}}}],["create(userdata",{"_index":1764,"title":{},"body":{"injectables/UsersService.html":{}}}],["createcompany",{"_index":426,"title":{},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{}}}],["createcompany(companydata",{"_index":431,"title":{},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{}}}],["createcompanydto",{"_index":432,"title":{"classes/CreateCompanyDto.html":{}},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"classes/CreateCompanyDto.html":{},"coverage.html":{}}}],["created",{"_index":1586,"title":{},"body":{"injectables/SentryService.html":{}}}],["createdat",{"_index":392,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{},"miscellaneous/variables.html":{}}}],["createdatecolumn",{"_index":410,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["createdatecolumn({type",{"_index":396,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["createdprice",{"_index":1244,"title":{},"body":{"controllers/PricesController.html":{}}}],["createduser",{"_index":360,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createduser.password",{"_index":363,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["creategoodsfromconvertedprice",{"_index":1297,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["creategoodsfromconvertedprice(priceid",{"_index":1306,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createmanager",{"_index":1040,"title":{},"body":{"controllers/ManagersController.html":{},"injectables/ManagersService.html":{}}}],["createmanager(managerdata",{"_index":1044,"title":{},"body":{"controllers/ManagersController.html":{},"injectables/ManagersService.html":{}}}],["createmanagerdto",{"_index":564,"title":{"classes/CreateManagerDto.html":{}},"body":{"classes/CreateManagerDto.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"coverage.html":{}}}],["createprice",{"_index":1261,"title":{},"body":{"injectables/PricesService.html":{}}}],["createprice(pricedata",{"_index":1266,"title":{},"body":{"injectables/PricesService.html":{}}}],["createpricedto",{"_index":580,"title":{"classes/CreatePriceDto.html":{}},"body":{"classes/CreatePriceDto.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{},"coverage.html":{}}}],["createproduct",{"_index":1298,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproduct(productdata",{"_index":1309,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproductdto",{"_index":586,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["createtransport",{"_index":799,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuserdto",{"_index":211,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["ctx",{"_index":78,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ViewAuthFilter.html":{}}}],["ctx.getrequest",{"_index":81,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getresponse",{"_index":80,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ViewAuthFilter.html":{}}}],["current",{"_index":1571,"title":{},"body":{"injectables/SentryService.html":{}}}],["currenthashedrefreshtoken",{"_index":1702,"title":{},"body":{"entities/UsersEntity.html":{},"injectables/UsersService.html":{}}}],["cursor",{"_index":1960,"title":{},"body":{"index.html":{}}}],["custom",{"_index":633,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{}}}],["customfilename",{"_index":858,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["customfilename(_req",{"_index":863,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["customhttpexceptionresponse",{"_index":74,"title":{"interfaces/CustomHttpExceptionResponse.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["customize",{"_index":1589,"title":{},"body":{"injectables/SentryService.html":{}}}],["custompasswordlength",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["custompasswordlength(validationoptions",{"_index":1923,"title":{},"body":{"miscellaneous/functions.html":{}}}],["custompasswordlengthconstraint",{"_index":617,"title":{"classes/CustomPasswordLengthConstraint.html":{}},"body":{"classes/CustomPasswordLengthConstraint.html":{},"coverage.html":{}}}],["customvalidateisnumber",{"_index":1840,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["customvalidateisnumber(validationoptions",{"_index":956,"title":{},"body":{"classes/IsNumberConstraint.html":{},"miscellaneous/functions.html":{}}}],["customvalidationpipe",{"_index":639,"title":{"injectables/CustomValidationPipe.html":{}},"body":{"injectables/CustomValidationPipe.html":{},"coverage.html":{}}}],["d",{"_index":1956,"title":{},"body":{"index.html":{}}}],["data",{"_index":664,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"classes/IsNumberConstraint.html":{},"classes/NumberValidationConstraint.html":{},"controllers/PricesController.html":{},"classes/StringValidationConstraint.html":{}}}],["data')@apibody({description",{"_index":1207,"title":{},"body":{"controllers/PricesController.html":{}}}],["database",{"_index":687,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":108,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["datadog",{"_index":1979,"title":{},"body":{"index.html":{}}}],["date",{"_index":98,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"injectables/CompaniesService.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/HelperFileLoader.html":{},"interfaces/HttpExceptionResponse.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsService.html":{},"classes/UpdateCompanyDto.html":{},"entities/UsersEntity.html":{}}}],["dateaspartforname",{"_index":888,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["debug",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["decodeconfirmationtoken",{"_index":755,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decodeconfirmationtoken(token",{"_index":762,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"controllers/AuthenticationController.html":{},"entities/CategoriesEntity.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"classes/FileUploadDto.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"classes/PaginationParams.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{}}}],["default",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthenticationService.html":{},"injectables/ProductsSearchService.html":{},"entities/UsersEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":620,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["defaultmessage(validationarguments",{"_index":622,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["defined",{"_index":20,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{}}}],["delete",{"_index":1034,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/ManagersService.html":{}}}],["deletecompany",{"_index":427,"title":{},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{}}}],["deletecompany(taxpayeridentificationnumber",{"_index":436,"title":{},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{}}}],["deletemanager",{"_index":1041,"title":{},"body":{"controllers/ManagersController.html":{},"injectables/ManagersService.html":{}}}],["deletemanager(id",{"_index":1046,"title":{},"body":{"controllers/ManagersController.html":{},"injectables/ManagersService.html":{}}}],["dependencies",{"_index":102,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CompaniesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/ManagersModule.html":{},"modules/PricesModule.html":{},"modules/ProductsModule.html":{},"modules/SentryModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":17,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"injectables/SentryInterceptor.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"properties.html":{}}}],["destination",{"_index":1233,"title":{},"body":{"controllers/PricesController.html":{}}}],["destinationpath",{"_index":859,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["destinationpath(_req",{"_index":870,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["detail",{"_index":1325,"title":{},"body":{"controllers/ProductsController.html":{}}}],["diskstorage",{"_index":1212,"title":{},"body":{"controllers/PricesController.html":{}}}],["docker",{"_index":1939,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1817,"title":{},"body":{"coverage.html":{}}}],["documentation:serve",{"_index":1950,"title":{},"body":{"index.html":{}}}],["done",{"_index":253,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["dsn",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["dto",{"_index":706,"title":{},"body":{"classes/EditProductDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["dto/addcompanytouser",{"_index":1694,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/addmanagertouser",{"_index":1693,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/confirmemail.dto",{"_index":721,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["dto/create",{"_index":457,"title":{},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{}}}],["dto/createmanager.dto",{"_index":1062,"title":{},"body":{"controllers/ManagersController.html":{},"injectables/ManagersService.html":{}}}],["dto/createproduct.dto",{"_index":1330,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["dto/createuser.dto",{"_index":1784,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/fileupload.dto",{"_index":1223,"title":{},"body":{"controllers/PricesController.html":{}}}],["dto/twofactorauthenticationcode.dto",{"_index":1619,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["dto/update",{"_index":455,"title":{},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{}}}],["dto/updatemanager.dto",{"_index":1061,"title":{},"body":{"controllers/ManagersController.html":{},"injectables/ManagersService.html":{}}}],["e",{"_index":532,"title":{},"body":{"injectables/CompaniesService.html":{},"injectables/ManagersService.html":{},"injectables/ProductsService.html":{}}}],["editproductdto",{"_index":692,"title":{"classes/EditProductDto.html":{}},"body":{"classes/EditProductDto.html":{},"coverage.html":{}}}],["el.property",{"_index":670,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["elastic",{"_index":1934,"title":{},"body":{"index.html":{}}}],["elastic/elasticsearch",{"_index":1848,"title":{},"body":{"dependencies.html":{}}}],["elasticsearch_node",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["elasticsearch_password",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["elasticsearch_username",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["elasticsearchmodule",{"_index":1499,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchmodule.registerasync",{"_index":1500,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchservice",{"_index":1404,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["email",{"_index":337,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateManagerDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailValidationConstraint.html":{},"interfaces/IVerificationTokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/LocalStrategy.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email.match(validationarguments.constraints[0",{"_index":814,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["email.service",{"_index":788,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":751,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["email/email.service",{"_index":770,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["email@gmail.com",{"_index":569,"title":{},"body":{"classes/CreateManagerDto.html":{},"classes/UpdateManagerDto.html":{}}}],["email_confirmation_url",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailConfirmationService.html":{}}}],["email_password",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["email_service",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["email_user",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["emailconfirmation.controller",{"_index":752,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["emailconfirmation.service",{"_index":722,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{}}}],["emailconfirmation/emailconfirmation.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["emailconfirmation/emailconfirmation.service",{"_index":241,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["emailconfirmationcontroller",{"_index":708,"title":{"controllers/EmailConfirmationController.html":{}},"body":{"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"coverage.html":{}}}],["emailconfirmationguard",{"_index":733,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["emailconfirmationmodule",{"_index":109,"title":{"modules/EmailConfirmationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailconfirmationservice",{"_index":240,"title":{"injectables/EmailConfirmationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"coverage.html":{},"overview.html":{}}}],["emailconfirmed",{"_index":1786,"title":{},"body":{"injectables/UsersService.html":{}}}],["emailmodule",{"_index":749,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailservice",{"_index":758,"title":{"injectables/EmailService.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["emailvalidation",{"_index":34,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateManagerDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["emailvalidation(validationoptions",{"_index":819,"title":{},"body":{"classes/EmailValidationConstraint.html":{},"miscellaneous/functions.html":{}}}],["emailvalidationconstraint",{"_index":809,"title":{"classes/EmailValidationConstraint.html":{}},"body":{"classes/EmailValidationConstraint.html":{},"coverage.html":{}}}],["encoding",{"_index":916,"title":{},"body":{"interfaces/IFileFormatForDownload.html":{}}}],["entities",{"_index":390,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"modules/DatabaseModule.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{},"overview.html":{}}}],["entity",{"_index":388,"title":{"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}},"body":{"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{},"coverage.html":{}}}],["entity('categories",{"_index":413,"title":{},"body":{"entities/CategoriesEntity.html":{}}}],["entity('companies",{"_index":504,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["entity('managers",{"_index":1090,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["entity('orders",{"_index":1155,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["entity('prices",{"_index":1253,"title":{},"body":{"entities/PricesEntity.html":{}}}],["entity('products",{"_index":1381,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["entity('users",{"_index":1739,"title":{},"body":{"entities/UsersEntity.html":{}}}],["entity{.ts,.js",{"_index":690,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enum",{"_index":1162,"title":{},"body":{"entities/OrdersEntity.html":{},"entities/UsersEntity.html":{}}}],["enumerations",{"_index":1900,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env.example",{"_index":1940,"title":{},"body":{"index.html":{}}}],["error",{"_index":91,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthenticationService.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/HelperFileLoader.html":{},"interfaces/HttpExceptionResponse.html":{},"injectables/SentryInterceptor.html":{}}}],["error?.name",{"_index":778,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["errorhttpstatuscode",{"_index":1360,"title":{},"body":{"controllers/ProductsController.html":{}}}],["errormessage",{"_index":86,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errorresponse",{"_index":84,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errors",{"_index":646,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"injectables/SentryInterceptor.html":{}}}],["errors.foreach((el",{"_index":668,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["errors.length",{"_index":661,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["example",{"_index":37,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"entities/CompaniesEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EditProductDto.html":{},"entities/ManagersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"entities/UsersEntity.html":{}}}],["exception",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"classes/ViewAuthFilter.html":{},"coverage.html":{}}}],["exception.filter.ts",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ViewAuthFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:13",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ViewAuthFilter.html":{}}}],["exception.filter.ts:23",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getresponse",{"_index":85,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":83,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ViewAuthFilter.html":{}}}],["exceptionfilter",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ViewAuthFilter.html":{}}}],["exclude",{"_index":1089,"title":{},"body":{"entities/ManagersEntity.html":{},"entities/UsersEntity.html":{}}}],["executioncontext",{"_index":738,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/SentryInterceptor.html":{}}}],["exist",{"_index":941,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/UsersService.html":{}}}],["exists",{"_index":947,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{}}}],["expect.any(date",{"_index":2016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expect.any(number",{"_index":2013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":371,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["exploring",{"_index":1968,"title":{},"body":{"index.html":{}}}],["export",{"_index":36,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"modules/CategoriesModule.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"modules/DatabaseModule.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"modules/OrdersModule.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"index.html":{}}}],["exports",{"_index":307,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/CompaniesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/ManagersModule.html":{},"modules/OrdersModule.html":{},"modules/PricesModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/SentryModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":73,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/FileUploadDto.html":{},"interfaces/IRequestWithUser.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PricesController.html":{},"injectables/SentryService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/ViewAuthFilter.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":851,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/PricesController.html":{}}}],["extends",{"_index":615,"title":{},"body":{"interfaces/CustomHttpExceptionResponse.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IRequestWithUser.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":976,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":985,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor",{"_index":1005,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.guard.ts",{"_index":1004,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["factor.strategy",{"_index":320,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["factor.strategy.ts",{"_index":1006,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["factor.strategy.ts:14",{"_index":1007,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.strategy.ts:29",{"_index":1008,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["failed",{"_index":665,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["false",{"_index":344,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CustomPasswordLengthConstraint.html":{},"classes/EmailValidationConstraint.html":{},"classes/HelperFileLoader.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"entities/ProductsEntity.html":{},"classes/StringValidationConstraint.html":{},"entities/UsersEntity.html":{}}}],["false})@column({type",{"_index":1717,"title":{},"body":{"entities/UsersEntity.html":{}}}],["field",{"_index":955,"title":{},"body":{"classes/IsNumberConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/StringValidationConstraint.html":{},"miscellaneous/variables.html":{}}}],["fieldname",{"_index":917,"title":{},"body":{"interfaces/IFileFormatForDownload.html":{}}}],["fields",{"_index":1421,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"modules/CategoriesModule.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"modules/DatabaseModule.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"modules/OrdersModule.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"coverage.html":{}}}],["file.filename",{"_index":1243,"title":{},"body":{"controllers/PricesController.html":{}}}],["file.originalname.match(/\\.(xlsx|xls",{"_index":897,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["file.originalname.split",{"_index":885,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["file.sheetnames",{"_index":1284,"title":{},"body":{"injectables/PricesService.html":{}}}],["file.xls",{"_index":583,"title":{},"body":{"classes/CreatePriceDto.html":{}}}],["file?.filename",{"_index":1241,"title":{},"body":{"controllers/PricesController.html":{}}}],["fileextension",{"_index":886,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["filefilter",{"_index":1237,"title":{},"body":{"controllers/PricesController.html":{}}}],["filefiltercallback",{"_index":874,"title":{},"body":{"classes/HelperFileLoader.html":{},"miscellaneous/typealiases.html":{}}}],["filefilterprices",{"_index":860,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["filefilterprices(_req",{"_index":873,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["fileinterceptor",{"_index":1214,"title":{},"body":{"controllers/PricesController.html":{}}}],["fileinterceptor('file",{"_index":1231,"title":{},"body":{"controllers/PricesController.html":{}}}],["filename",{"_index":1235,"title":{},"body":{"controllers/PricesController.html":{},"injectables/PricesService.html":{}}}],["filenameandpathcallback",{"_index":867,"title":{},"body":{"classes/HelperFileLoader.html":{},"miscellaneous/typealiases.html":{}}}],["filepath",{"_index":1280,"title":{},"body":{"injectables/PricesService.html":{}}}],["fileuploaddto",{"_index":849,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/PricesController.html":{},"coverage.html":{}}}],["filter",{"_index":1536,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["finalize",{"_index":1519,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["findallcompanies",{"_index":428,"title":{},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{}}}],["findallmanagers",{"_index":1042,"title":{},"body":{"controllers/ManagersController.html":{},"injectables/ManagersService.html":{}}}],["findbyid",{"_index":1427,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findbyid(id",{"_index":1438,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findcompanybytaxpayernumber",{"_index":512,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["findcompanybytaxpayernumber(taxpayeridentificationnumber",{"_index":521,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["findmanager",{"_index":1098,"title":{},"body":{"injectables/ManagersService.html":{}}}],["findmanager(email",{"_index":1108,"title":{},"body":{"injectables/ManagersService.html":{}}}],["findmanyoptions",{"_index":1447,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findmanyoptions['where",{"_index":1486,"title":{},"body":{"injectables/ProductsService.html":{}}}],["findone",{"_index":944,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{}}}],["first",{"_index":744,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["firstname",{"_index":566,"title":{},"body":{"classes/CreateManagerDto.html":{},"classes/CreateUserDto.html":{},"entities/ManagersEntity.html":{},"classes/UpdateManagerDto.html":{},"entities/UsersEntity.html":{},"miscellaneous/variables.html":{}}}],["format",{"_index":817,"title":{},"body":{"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/PhoneValidationConstraint.html":{}}}],["forroot",{"_index":1545,"title":{},"body":{"modules/SentryModule.html":{}}}],["forroot(options",{"_index":1546,"title":{},"body":{"modules/SentryModule.html":{}}}],["foundproduct",{"_index":1478,"title":{},"body":{"injectables/ProductsService.html":{}}}],["foundproducts",{"_index":1480,"title":{},"body":{"injectables/ProductsService.html":{}}}],["founduser",{"_index":1700,"title":{},"body":{"controllers/UsersController.html":{}}}],["function",{"_index":818,"title":{},"body":{"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1913,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":894,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["generatetwofactorauthenticationsecret",{"_index":1632,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["generatetwofactorauthenticationsecret(user",{"_index":1636,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["get('/:id",{"_index":1358,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('convert",{"_index":1339,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('download",{"_index":1228,"title":{},"body":{"controllers/PricesController.html":{}}}],["get('login",{"_index":265,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get('refresh",{"_index":290,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get('registration",{"_index":261,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get('show",{"_index":1352,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get_products_cache",{"_index":2011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_products_cache_key",{"_index":1335,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getall",{"_index":1428,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getallview",{"_index":1299,"title":{},"body":{"controllers/ProductsController.html":{}}}],["getallview(undefined",{"_index":1312,"title":{},"body":{"controllers/ProductsController.html":{}}}],["getauthenticateduser",{"_index":325,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":334,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":1750,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":1766,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":1751,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":1768,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcompanyandhisusers",{"_index":429,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["getcompanyandhisusers(taxpayeridentificationnumber",{"_index":441,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["getcompanybytaxpayernumwithallusers",{"_index":513,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["getcompanybytaxpayernumwithallusers(taxpayeridentificationnumber",{"_index":523,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["getcookiesforlogout",{"_index":326,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":327,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":339,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":328,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":345,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["geterrorresponse",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["getmanagerandhisusers",{"_index":1043,"title":{},"body":{"controllers/ManagersController.html":{}}}],["getmanagerandhisusers(id",{"_index":1051,"title":{},"body":{"controllers/ManagersController.html":{}}}],["getmanagerbyemailwithallusers",{"_index":1099,"title":{},"body":{"injectables/ManagersService.html":{}}}],["getmanagerbyemailwithallusers(id",{"_index":1110,"title":{},"body":{"injectables/ManagersService.html":{}}}],["getposts",{"_index":1429,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getposts(offset",{"_index":1441,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getproducts",{"_index":1300,"title":{},"body":{"controllers/ProductsController.html":{}}}],["getproducts(@query('search",{"_index":1349,"title":{},"body":{"controllers/ProductsController.html":{}}}],["getproducts(search",{"_index":1317,"title":{},"body":{"controllers/ProductsController.html":{}}}],["getrepository",{"_index":936,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{}}}],["getrepository(managersentity",{"_index":943,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{}}}],["getrepository(usersentity",{"_index":962,"title":{},"body":{"classes/IsUserAlreadyExistConstraint.html":{}}}],["getspan",{"_index":1566,"title":{},"body":{"injectables/SentryService.html":{}}}],["getting",{"_index":1924,"title":{"index.html":{}},"body":{}}],["getuserifrefreshtokenmatches",{"_index":1752,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":1770,"title":{},"body":{"injectables/UsersService.html":{}}}],["graph",{"_index":1985,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":1970,"title":{},"body":{"index.html":{}}}],["guard",{"_index":732,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":734,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["guards/jwt",{"_index":238,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["guards/localauthentication.guard",{"_index":234,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["handlebars",{"_index":1877,"title":{},"body":{"dependencies.html":{}}}],["handler",{"_index":1532,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["hapi/joi",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hashedpassword",{"_index":349,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hbs",{"_index":1879,"title":{},"body":{"dependencies.html":{}}}],["headers",{"_index":1579,"title":{},"body":{"injectables/SentryService.html":{}}}],["health",{"_index":1976,"title":{},"body":{"index.html":{}}}],["helperfileloader",{"_index":855,"title":{"classes/HelperFileLoader.html":{}},"body":{"classes/HelperFileLoader.html":{},"controllers/PricesController.html":{},"coverage.html":{}}}],["helperfileloader.customfilename",{"_index":1236,"title":{},"body":{"controllers/PricesController.html":{}}}],["helperfileloader.destinationpath",{"_index":1234,"title":{},"body":{"controllers/PricesController.html":{}}}],["helperfileloader.filefilterprices",{"_index":1238,"title":{},"body":{"controllers/PricesController.html":{}}}],["helperfileloader.path",{"_index":1226,"title":{},"body":{"controllers/PricesController.html":{}}}],["here",{"_index":1033,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{}}}],["hits",{"_index":1290,"title":{},"body":{"interfaces/ProductSearchResult.html":{},"injectables/ProductsSearchService.html":{}}}],["hits.map((item",{"_index":1423,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["host",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"classes/ViewAuthFilter.html":{},"index.html":{}}}],["host.switchtohttp",{"_index":79,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ViewAuthFilter.html":{}}}],["http",{"_index":881,"title":{},"body":{"classes/HelperFileLoader.html":{},"injectables/SentryService.html":{}}}],["http://localhost:3000/api",{"_index":1938,"title":{},"body":{"index.html":{}}}],["httpcacheinterceptor",{"_index":899,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/ProductsController.html":{},"coverage.html":{}}}],["httpcode",{"_index":224,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["httpcode(200",{"_index":254,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["httpcode(200)@get('/:id')@render('products/product",{"_index":1324,"title":{},"body":{"controllers/ProductsController.html":{}}}],["httpcode(200)@get('convert')@render('price/convert",{"_index":1321,"title":{},"body":{"controllers/ProductsController.html":{}}}],["httpcode(200)@get('download')@render('price/download",{"_index":1202,"title":{},"body":{"controllers/PricesController.html":{}}}],["httpcode(200)@get('login')@render('auth/login",{"_index":215,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@get('registration')@render('auth/registration",{"_index":217,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@get('show",{"_index":1313,"title":{},"body":{"controllers/ProductsController.html":{}}}],["httpcode(200)@post('add",{"_index":1683,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(200)@post('confirm",{"_index":714,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["httpcode(200)@post('create",{"_index":433,"title":{},"body":{"controllers/CompaniesController.html":{},"controllers/ManagersController.html":{},"controllers/ProductsController.html":{}}}],["httpcode(200)@post('delete",{"_index":437,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["httpcode(200)@post('delete/:id",{"_index":1047,"title":{},"body":{"controllers/ManagersController.html":{}}}],["httpcode(200)@post('find",{"_index":439,"title":{},"body":{"controllers/CompaniesController.html":{},"controllers/ManagersController.html":{}}}],["httpcode(200)@post('registration",{"_index":212,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@post('resend",{"_index":718,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["httpcode(200)@post('turn",{"_index":1614,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200)@post('update",{"_index":447,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["httpcode(200)@useguards(jwtauthenticationguard)@post('logout",{"_index":205,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@useguards(jwtrefreshguard)@get('refresh",{"_index":208,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@apibasicauth()@post('login",{"_index":201,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1206,"title":{},"body":{"controllers/PricesController.html":{}}}],["httpexception",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomValidationPipe.html":{},"classes/HelperFileLoader.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{}}}],["httpexceptionresponse",{"_index":616,"title":{"interfaces/HttpExceptionResponse.html":{}},"body":{"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["httponly",{"_index":375,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["https://2a32b564d67a4cc0a94d3e4ab5716847@o1182144.ingest.sentry.io/6327156",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["httpstatus",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomValidationPipe.html":{},"classes/HelperFileLoader.html":{},"controllers/ProductsController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":385,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CustomValidationPipe.html":{},"classes/HelperFileLoader.html":{}}}],["httpstatus.internal_server_error",{"_index":366,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_acceptable",{"_index":1361,"title":{},"body":{"controllers/ProductsController.html":{}}}],["httpstatus.not_found",{"_index":1790,"title":{},"body":{"injectables/UsersService.html":{}}}],["hub",{"_index":1554,"title":{},"body":{"modules/SentryModule.html":{},"injectables/SentryService.html":{}}}],["i2fagenerate",{"_index":911,"title":{"interfaces/I2faGenerate.html":{}},"body":{"interfaces/I2faGenerate.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["icookiesfromjwt",{"_index":355,"title":{"interfaces/ICookiesFromJwt.html":{}},"body":{"injectables/AuthenticationService.html":{},"interfaces/ICookiesFromJwt.html":{},"coverage.html":{}}}],["id",{"_index":393,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"interfaces/ProductSearchBody.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"classes/UpdateManagerDto.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id'})@httpcode(200)@post('update",{"_index":1056,"title":{},"body":{"controllers/ManagersController.html":{}}}],["id'})@primarygeneratedcolumn",{"_index":485,"title":{},"body":{"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["identifier",{"_index":1818,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1472,"title":{},"body":{"injectables/ProductsService.html":{}}}],["ids.length",{"_index":1475,"title":{},"body":{"injectables/ProductsService.html":{}}}],["ifileformatfordownload",{"_index":865,"title":{"interfaces/IFileFormatForDownload.html":{}},"body":{"classes/HelperFileLoader.html":{},"interfaces/IFileFormatForDownload.html":{},"coverage.html":{}}}],["implemented",{"_index":1032,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["implements",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"guards/EmailConfirmationGuard.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/LoggerMiddleware.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"injectables/SentryInterceptor.html":{},"classes/StringValidationConstraint.html":{},"classes/ViewAuthFilter.html":{}}}],["import",{"_index":25,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"modules/CategoriesModule.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"modules/DatabaseModule.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IRequestWithUser.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"modules/OrdersModule.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"interfaces/ProductSearchResult.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{}}}],["imports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CompaniesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/ManagersModule.html":{},"modules/OrdersModule.html":{},"modules/PricesModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{}}}],["in(ids",{"_index":1477,"title":{},"body":{"injectables/ProductsService.html":{}}}],["incomingmessage",{"_index":864,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"injectables/PricesService.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexpost",{"_index":1402,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["indexpost(product",{"_index":1406,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"modules/CategoriesModule.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"modules/DatabaseModule.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"modules/OrdersModule.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{}}}],["initialization",{"_index":1553,"title":{},"body":{"modules/SentryModule.html":{}}}],["inject",{"_index":679,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{}}}],["inject(cache_manager",{"_index":1451,"title":{},"body":{"injectables/ProductsService.html":{}}}],["injectable",{"_index":322,"title":{"injectables/AuthenticationService.html":{},"injectables/CompaniesService.html":{},"injectables/CustomValidationPipe.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ManagersService.html":{},"injectables/PricesService.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/CompaniesService.html":{},"injectables/CustomValidationPipe.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ManagersService.html":{},"injectables/PricesService.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":323,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CompaniesService.html":{},"injectables/CustomValidationPipe.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ManagersService.html":{},"injectables/PricesService.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":1575,"title":{},"body":{"injectables/SentryService.html":{}}}],["injectrepository",{"_index":527,"title":{},"body":{"injectables/CompaniesService.html":{},"injectables/ManagersService.html":{},"injectables/PricesService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(companiesentity",{"_index":528,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["injectrepository(managersentity",{"_index":1113,"title":{},"body":{"injectables/ManagersService.html":{}}}],["injectrepository(pricesentity",{"_index":1271,"title":{},"body":{"injectables/PricesService.html":{}}}],["injectrepository(productsentity",{"_index":1450,"title":{},"body":{"injectables/ProductsService.html":{}}}],["injectrepository(usersentity",{"_index":1785,"title":{},"body":{"injectables/UsersService.html":{}}}],["input",{"_index":663,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["insertresult",{"_index":1328,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["inspect",{"_index":1944,"title":{},"body":{"index.html":{}}}],["instead",{"_index":1971,"title":{},"body":{"index.html":{}}}],["insted",{"_index":1134,"title":{},"body":{"injectables/ManagersService.html":{}}}],["int",{"_index":1375,"title":{},"body":{"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["intercept",{"_index":1509,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["intercept(_context",{"_index":1512,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["interface",{"_index":611,"title":{"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{}},"body":{"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"coverage.html":{}}}],["interface/productsearchbody.interface",{"_index":1412,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["interface/productsearchresult.interface",{"_index":1411,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["interfaces",{"_index":612,"title":{},"body":{"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"overview.html":{}}}],["interfaces/2fagenerate.interface",{"_index":1642,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["interfaces/cookieswithjwt.interface",{"_index":356,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["interfaces/fileformatfordownload.interface",{"_index":880,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["interfaces/qrcodestream.interface",{"_index":1620,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["interfaces/renderauthtemplate.interface",{"_index":246,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["interfaces/requestwithuser.interface",{"_index":232,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["interfaces/tokenpayload.interface",{"_index":354,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["interfaces/validationresultasfunction.interface",{"_index":632,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{}}}],["interfaces/verificationtokenpayload.interface",{"_index":769,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["ip",{"_index":1942,"title":{},"body":{"index.html":{}}}],["iqrcodestream",{"_index":919,"title":{"interfaces/IQrCodeStream.html":{}},"body":{"interfaces/IQrCodeStream.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["irendertemplate",{"_index":245,"title":{"interfaces/IRenderTemplate.html":{}},"body":{"controllers/AuthenticationController.html":{},"interfaces/IRenderTemplate.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"coverage.html":{}}}],["irequestwithuser",{"_index":199,"title":{"interfaces/IRequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"interfaces/IRequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["iscodevalid",{"_index":1627,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["isemailconfirmed",{"_index":1703,"title":{},"body":{"entities/UsersEntity.html":{},"injectables/UsersService.html":{}}}],["ismanageralreadyexist",{"_index":578,"title":{},"body":{"classes/CreateManagerDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ismanageralreadyexist(validationoptions",{"_index":948,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"miscellaneous/functions.html":{}}}],["ismanageralreadyexistconstraint",{"_index":931,"title":{"classes/IsManagerAlreadyExistConstraint.html":{}},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"coverage.html":{}}}],["isnotempty",{"_index":28,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EditProductDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{}}}],["isnotempty({message",{"_index":18,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{}}}],["isnotemptymessage",{"_index":26,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EditProductDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnotemptymessage})@emailvalidation()@ismanageralreadyexist",{"_index":570,"title":{},"body":{"classes/CreateManagerDto.html":{}}}],["isnotemptymessage})@emailvalidation()@isuseralreadyexist",{"_index":600,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotemptymessage})@numbervalidation",{"_index":593,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateManagerDto.html":{}}}],["isnotemptymessage})@stringvalidation",{"_index":19,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["isnotemptymessage})@stringvalidation()@custompasswordlength",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotemptymessage})@stringvalidation()@emailvalidation",{"_index":23,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{}}}],["isnotemptymessage})@stringvalidation()@isoptional()@validateif(o",{"_index":696,"title":{},"body":{"classes/EditProductDto.html":{}}}],["isnotemptymessage})@stringvalidation()@phonevalidation",{"_index":551,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{}}}],["isnotemptymessage})@validateif(o",{"_index":700,"title":{},"body":{"classes/EditProductDto.html":{}}}],["isnumber",{"_index":1182,"title":{},"body":{"classes/PaginationParams.html":{}}}],["isnumberconstraint",{"_index":949,"title":{"classes/IsNumberConstraint.html":{}},"body":{"classes/IsNumberConstraint.html":{},"coverage.html":{}}}],["isoptional",{"_index":560,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/CreatePriceDto.html":{},"classes/EditProductDto.html":{},"classes/PaginationParams.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(0",{"_index":1179,"title":{},"body":{"classes/PaginationParams.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":1177,"title":{},"body":{"classes/PaginationParams.html":{}}}],["ispasswordmatching",{"_index":386,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isrefreshtokenmatching",{"_index":1797,"title":{},"body":{"injectables/UsersService.html":{}}}],["issecondfactorauthenticated",{"_index":341,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/ITokenPayload.html":{}}}],["issuer",{"_index":1648,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationcodevalid",{"_index":1633,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationcodevalid(twofactorauthenticationcode",{"_index":1638,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationenabled",{"_index":1704,"title":{},"body":{"entities/UsersEntity.html":{},"injectables/UsersService.html":{}}}],["isuseralreadyexist",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isuseralreadyexist(validationoptions",{"_index":964,"title":{},"body":{"classes/IsUserAlreadyExistConstraint.html":{},"miscellaneous/functions.html":{}}}],["isuseralreadyexistconstraint",{"_index":957,"title":{"classes/IsUserAlreadyExistConstraint.html":{}},"body":{"classes/IsUserAlreadyExistConstraint.html":{},"coverage.html":{}}}],["item._source",{"_index":1424,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["items",{"_index":1354,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["items.length",{"_index":1497,"title":{},"body":{"injectables/ProductsService.html":{}}}],["itokenpayload",{"_index":353,"title":{"interfaces/ITokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"interfaces/ITokenPayload.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["ivalidationresultasfunction",{"_index":631,"title":{"interfaces/IValidationResultAsfunction.html":{}},"body":{"classes/CustomPasswordLengthConstraint.html":{},"interfaces/IValidationResultAsfunction.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["iverificationtokenpayload",{"_index":768,"title":{"interfaces/IVerificationTokenPayload.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"interfaces/IVerificationTokenPayload.html":{},"coverage.html":{}}}],["joi",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["jsdoc",{"_index":1980,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":979,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"dependencies.html":{}}}],["jwt_access_token_expiration_time",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwt_access_token_secret",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwt_refresh_token_secret",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_verification_token_expiration_time",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailConfirmationService.html":{}}}],["jwt_verification_token_secret",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthenticationguard",{"_index":247,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":984,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["jwtmodule",{"_index":312,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{}}}],["jwtmodule.register",{"_index":321,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{}}}],["jwtrefreshguard",{"_index":237,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":299,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":331,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["jwtstrategy",{"_index":300,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttwofactorguard",{"_index":1003,"title":{"injectables/JwtTwoFactorGuard.html":{}},"body":{"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["jwttwofactorstrategy",{"_index":301,"title":{"injectables/JwtTwoFactorStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key.startswith(get_products_cache_key",{"_index":1484,"title":{},"body":{"injectables/ProductsService.html":{}}}],["keys",{"_index":1482,"title":{},"body":{"injectables/ProductsService.html":{}}}],["keys.foreach((key",{"_index":1483,"title":{},"body":{"injectables/ProductsService.html":{}}}],["keyset",{"_index":1958,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":567,"title":{},"body":{"classes/CreateManagerDto.html":{},"entities/ManagersEntity.html":{},"classes/UpdateManagerDto.html":{},"entities/UsersEntity.html":{},"miscellaneous/variables.html":{}}}],["layout",{"_index":263,"title":{},"body":{"controllers/AuthenticationController.html":{},"interfaces/IRenderTemplate.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{}}}],["lebovski",{"_index":1720,"title":{},"body":{"entities/UsersEntity.html":{}}}],["lebowski",{"_index":574,"title":{},"body":{"classes/CreateManagerDto.html":{},"entities/ManagersEntity.html":{},"classes/UpdateManagerDto.html":{}}}],["length",{"_index":635,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"classes/EmailValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{}}}],["leonovich",{"_index":1999,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1996,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":1174,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["link",{"_index":719,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["list",{"_index":1315,"title":{},"body":{"controllers/ProductsController.html":{},"index.html":{}}}],["literal",{"_index":1291,"title":{},"body":{"interfaces/ProductSearchResult.html":{}}}],["local",{"_index":1017,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthenticationguard",{"_index":233,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localstorage",{"_index":1342,"title":{},"body":{"controllers/ProductsController.html":{}}}],["localstorage'})@httpcode(200)@post('add",{"_index":1304,"title":{},"body":{"controllers/ProductsController.html":{}}}],["localstrategy",{"_index":302,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["loggermiddleware",{"_index":1021,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["logic",{"_index":1031,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["login",{"_index":192,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":198,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login/password",{"_index":1932,"title":{},"body":{"index.html":{}}}],["logout",{"_index":193,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":284,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":204,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logs",{"_index":1936,"title":{},"body":{"index.html":{}}}],["mail",{"_index":798,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.@mail.ru",{"_index":22,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"entities/UsersEntity.html":{}}}],["mail.options",{"_index":795,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail@gmail.com",{"_index":1076,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["mail@mail.ru",{"_index":599,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["main",{"_index":1576,"title":{},"body":{"injectables/SentryService.html":{}}}],["manager",{"_index":946,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"injectables/ManagersService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["manager.controller",{"_index":1095,"title":{},"body":{"modules/ManagersModule.html":{}}}],["manager.users",{"_index":1723,"title":{},"body":{"entities/UsersEntity.html":{}}}],["manageranduserdata",{"_index":1689,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["manageranduserdata.manageremail",{"_index":1808,"title":{},"body":{"injectables/UsersService.html":{}}}],["manageranduserdata.useremail",{"_index":1806,"title":{},"body":{"injectables/UsersService.html":{}}}],["managerdata",{"_index":449,"title":{},"body":{"controllers/CompaniesController.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{}}}],["managerdata.email",{"_index":1123,"title":{},"body":{"injectables/ManagersService.html":{}}}],["managerdata.firstname",{"_index":1125,"title":{},"body":{"injectables/ManagersService.html":{}}}],["managerdata.id",{"_index":1121,"title":{},"body":{"injectables/ManagersService.html":{}}}],["managerdata.lastname",{"_index":1127,"title":{},"body":{"injectables/ManagersService.html":{}}}],["managerdata.phonenumber",{"_index":1129,"title":{},"body":{"injectables/ManagersService.html":{}}}],["manageremail",{"_index":43,"title":{},"body":{"classes/AddManagerToUserDto.html":{}}}],["managerrepository",{"_index":942,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{}}}],["managers",{"_index":1039,"title":{},"body":{"controllers/ManagersController.html":{}}}],["managers.entity",{"_index":1060,"title":{},"body":{"controllers/ManagersController.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{}}}],["managers.service",{"_index":1064,"title":{},"body":{"controllers/ManagersController.html":{},"modules/ManagersModule.html":{}}}],["managers/managers.entity",{"_index":938,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{}}}],["managers/managers.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["managers/managers.service",{"_index":1782,"title":{},"body":{"injectables/UsersService.html":{}}}],["managerscontroller",{"_index":1037,"title":{"controllers/ManagersController.html":{}},"body":{"controllers/ManagersController.html":{},"modules/ManagersModule.html":{},"coverage.html":{}}}],["managersentity",{"_index":937,"title":{"entities/ManagersEntity.html":{}},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["managersentity})@manytoone(undefined",{"_index":1722,"title":{},"body":{"entities/UsersEntity.html":{}}}],["managerservice",{"_index":1759,"title":{},"body":{"injectables/UsersService.html":{}}}],["managersmodule",{"_index":110,"title":{"modules/ManagersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ManagersModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["managersrepository",{"_index":1102,"title":{},"body":{"injectables/ManagersService.html":{}}}],["managersservice",{"_index":1063,"title":{"injectables/ManagersService.html":{}},"body":{"controllers/ManagersController.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["many",{"_index":500,"title":{},"body":{"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["manytoone",{"_index":1154,"title":{},"body":{"entities/OrdersEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["manytoone(undefined",{"_index":1148,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["markemailasconfirmed",{"_index":1753,"title":{},"body":{"injectables/UsersService.html":{}}}],["markemailasconfirmed(email",{"_index":1772,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":40,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"modules/CategoriesModule.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"modules/DatabaseModule.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"modules/OrdersModule.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":376,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["message",{"_index":38,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomValidationPipe.html":{},"classes/EditProductDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{}}}],["metadata",{"_index":651,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":649,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["method",{"_index":94,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"injectables/ManagersService.html":{},"injectables/SentryService.html":{},"index.html":{}}}],["methods",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{}}}],["microservices",{"_index":1969,"title":{},"body":{"index.html":{}}}],["middleware",{"_index":1946,"title":{},"body":{"index.html":{}}}],["middlewareconsumer",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["mimetype",{"_index":918,"title":{},"body":{"interfaces/IFileFormatForDownload.html":{}}}],["min",{"_index":1183,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(0",{"_index":1184,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(1",{"_index":1185,"title":{},"body":{"classes/PaginationParams.html":{}}}],["miscellaneous",{"_index":1899,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mockedmanager",{"_index":1842,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["models/http",{"_index":75,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["module",{"_index":99,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CompaniesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/ManagersModule.html":{},"modules/OrdersModule.html":{},"modules/PricesModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/SentryModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CompaniesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/ManagersModule.html":{},"modules/OrdersModule.html":{},"modules/PricesModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/SentryModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":101,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/CompaniesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/ManagersModule.html":{},"modules/OrdersModule.html":{},"modules/PricesModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/SentryModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["morethan",{"_index":1448,"title":{},"body":{"injectables/ProductsService.html":{}}}],["morethan(startid",{"_index":1489,"title":{},"body":{"injectables/ProductsService.html":{}}}],["multer",{"_index":1213,"title":{},"body":{"controllers/PricesController.html":{}}}],["multi_match",{"_index":1420,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["name",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"miscellaneous/functions.html":{}}}],["name/address",{"_index":1941,"title":{},"body":{"index.html":{}}}],["need",{"_index":1164,"title":{},"body":{"entities/OrdersEntity.html":{},"injectables/SentryService.html":{}}}],["needed",{"_index":1035,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestinterceptor",{"_index":1517,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["nestjs",{"_index":1927,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/common",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CategoriesModule.html":{},"controllers/CompaniesController.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"injectables/CustomValidationPipe.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"modules/OrdersModule.html":{},"controllers/PricesController.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"dependencies.html":{}}}],["nestjs/common/exceptions/http.exception",{"_index":657,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["nestjs/config",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"injectables/TwoFactorAuthenticationService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1550,"title":{},"body":{"modules/SentryModule.html":{},"injectables/SentryService.html":{},"dependencies.html":{}}}],["nestjs/elasticsearch",{"_index":1410,"title":{},"body":{"injectables/ProductsSearchService.html":{},"modules/SearchModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":313,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1853,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":310,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1215,"title":{},"body":{"controllers/PricesController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":33,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"classes/FileUploadDto.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":417,"title":{},"body":{"modules/CategoriesModule.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"modules/DatabaseModule.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"modules/OrdersModule.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1029,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["never",{"_index":1966,"title":{},"body":{"index.html":{}}}],["new",{"_index":97,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthenticationService.html":{},"injectables/CompaniesService.html":{},"injectables/CustomValidationPipe.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/HelperFileLoader.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/ManagersService.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SentryService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newcompany",{"_index":529,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["newly",{"_index":1585,"title":{},"body":{"injectables/SentryService.html":{}}}],["newmanager",{"_index":1114,"title":{},"body":{"injectables/ManagersService.html":{}}}],["newprice",{"_index":1272,"title":{},"body":{"injectables/PricesService.html":{}}}],["newproduct",{"_index":1452,"title":{},"body":{"injectables/ProductsService.html":{}}}],["newuser",{"_index":256,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/UsersService.html":{}}}],["next",{"_index":1026,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/SentryInterceptor.html":{}}}],["next.handle().pipe",{"_index":1533,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["nextfunction",{"_index":1027,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["node",{"_index":1501,"title":{},"body":{"modules/SearchModule.html":{}}}],["nodemailer",{"_index":800,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":801,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":790,"title":{},"body":{"injectables/EmailService.html":{}}}],["npm",{"_index":1948,"title":{},"body":{"index.html":{}}}],["null",{"_index":1152,"title":{},"body":{"entities/OrdersEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":488,"title":{},"body":{"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["number",{"_index":340,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"classes/CreateProductDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"injectables/CustomValidationPipe.html":{},"classes/EditProductDto.html":{},"injectables/EmailConfirmationService.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/ITokenPayload.html":{},"classes/IsNumberConstraint.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"entities/PricesEntity.html":{},"injectables/PricesService.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsService.html":{},"classes/UpdateManagerDto.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{}}}],["numbervalidation",{"_index":596,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateManagerDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["numbervalidation(validationoptions",{"_index":1140,"title":{},"body":{"classes/NumberValidationConstraint.html":{},"miscellaneous/functions.html":{}}}],["numbervalidationconstraint",{"_index":1136,"title":{"classes/NumberValidationConstraint.html":{}},"body":{"classes/NumberValidationConstraint.html":{},"coverage.html":{}}}],["o.producerprice",{"_index":697,"title":{},"body":{"classes/EditProductDto.html":{}}}],["o.productcode",{"_index":701,"title":{},"body":{"classes/EditProductDto.html":{}}}],["o.title",{"_index":703,"title":{},"body":{"classes/EditProductDto.html":{}}}],["object",{"_index":89,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"injectables/CustomValidationPipe.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailValidationConstraint.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IValidationResultAsfunction.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["object.constructor",{"_index":822,"title":{},"body":{"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["object.entries(el.constraints).foreach((constraint",{"_index":671,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["observable",{"_index":1516,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["offset",{"_index":1175,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["ompodoc",{"_index":1951,"title":{},"body":{"index.html":{}}}],["on')@useguards(jwtauthenticationguard",{"_index":1615,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["ondelete",{"_index":1151,"title":{},"body":{"entities/OrdersEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["one",{"_index":442,"title":{},"body":{"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":409,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"entities/UsersEntity.html":{}}}],["onetomany(undefined",{"_index":401,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/OrdersEntity.html":{}}}],["op",{"_index":1530,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{}}}],["openapi",{"_index":1937,"title":{},"body":{"index.html":{}}}],["optional",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"injectables/CompaniesService.html":{},"classes/CreateCompanyDto.html":{},"classes/CreatePriceDto.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/ITokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":797,"title":{},"body":{"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"modules/SentryModule.html":{},"classes/StringValidationConstraint.html":{}}}],["order",{"_index":1365,"title":{},"body":{"entities/ProductsEntity.html":{},"injectables/ProductsService.html":{}}}],["order.products",{"_index":1372,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["orderpayment",{"_index":1158,"title":{},"body":{"entities/OrdersEntity.html":{},"miscellaneous/enumerations.html":{}}}],["orderpaymentbill",{"_index":1904,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["orderpaymentcash",{"_index":1905,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["orderrecipient",{"_index":1156,"title":{},"body":{"entities/OrdersEntity.html":{},"miscellaneous/enumerations.html":{}}}],["orderrecipientcompany",{"_index":1907,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["orderrecipienthuman",{"_index":1906,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["orders",{"_index":1705,"title":{},"body":{"entities/UsersEntity.html":{}}}],["orders.controller",{"_index":1170,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders.entity",{"_index":1166,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders.service",{"_index":1168,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders.user",{"_index":1726,"title":{},"body":{"entities/UsersEntity.html":{}}}],["orders/orders.entity",{"_index":1380,"title":{},"body":{"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["orders/orders.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["orderscontroller",{"_index":1169,"title":{},"body":{"modules/OrdersModule.html":{}}}],["ordersentity",{"_index":1141,"title":{"entities/OrdersEntity.html":{}},"body":{"entities/OrdersEntity.html":{},"modules/OrdersModule.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{},"coverage.html":{}}}],["ordersentity})@manytoone(undefined",{"_index":1371,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["ordersentity})@onetomany(undefined",{"_index":1725,"title":{},"body":{"entities/UsersEntity.html":{}}}],["ordershipment",{"_index":1159,"title":{},"body":{"entities/OrdersEntity.html":{},"miscellaneous/enumerations.html":{}}}],["ordershipmentcity",{"_index":1908,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ordershipmentpickup",{"_index":1909,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ordershipmenttransportcompany",{"_index":1910,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ordersmodule",{"_index":111,"title":{"modules/OrdersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["ordersservice",{"_index":1167,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orderstatus",{"_index":1161,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["originalname",{"_index":884,"title":{},"body":{"classes/HelperFileLoader.html":{},"interfaces/IFileFormatForDownload.html":{}}}],["originalname[originalname.length",{"_index":887,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["orm",{"_index":1931,"title":{},"body":{"index.html":{}}}],["otpauthurl",{"_index":913,"title":{},"body":{"interfaces/I2faGenerate.html":{},"interfaces/IQrCodeStream.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["otplib",{"_index":1644,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["out",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CompaniesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/ManagersModule.html":{},"modules/PricesModule.html":{},"modules/ProductsModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1987,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1845,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pages",{"_index":1356,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["pagination",{"_index":1959,"title":{},"body":{"index.html":{}}}],["pagination/pagination.dto",{"_index":1329,"title":{},"body":{"controllers/ProductsController.html":{}}}],["paginationparams",{"_index":1172,"title":{"classes/PaginationParams.html":{}},"body":{"classes/PaginationParams.html":{},"controllers/ProductsController.html":{},"coverage.html":{}}}],["param",{"_index":1058,"title":{},"body":{"controllers/ManagersController.html":{},"controllers/ProductsController.html":{}}}],["param('id",{"_index":1069,"title":{},"body":{"controllers/ManagersController.html":{}}}],["parameters",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"miscellaneous/functions.html":{}}}],["parseintpipe",{"_index":1059,"title":{},"body":{"controllers/ManagersController.html":{},"controllers/ProductsController.html":{}}}],["parseprice",{"_index":1262,"title":{},"body":{"injectables/PricesService.html":{}}}],["parseprice(priceid",{"_index":1268,"title":{},"body":{"injectables/PricesService.html":{}}}],["parser",{"_index":1861,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":806,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":978,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":309,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":980,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":998,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":989,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":362,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"classes/CustomPasswordLengthConstraint.html":{},"modules/DatabaseModule.html":{},"classes/EmailValidationConstraint.html":{},"injectables/LocalStrategy.html":{},"classes/PhoneValidationConstraint.html":{},"modules/SearchModule.html":{},"entities/UsersEntity.html":{}}}],["path",{"_index":92,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/HelperFileLoader.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["path(_path",{"_index":883,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["path_news",{"_index":1225,"title":{},"body":{"controllers/PricesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pavel",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/UsersEntity.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":367,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.email",{"_index":777,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["payload.issecondfactorauthenticated",{"_index":1009,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.userid",{"_index":993,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["performance",{"_index":1527,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["personaldiscount",{"_index":1706,"title":{},"body":{"entities/UsersEntity.html":{}}}],["pet",{"_index":1928,"title":{},"body":{"index.html":{},"properties.html":{}}}],["pg",{"_index":1886,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":1191,"title":{},"body":{"classes/PhoneValidationConstraint.html":{}}}],["phone.match(validationarguments.constraints[0",{"_index":1192,"title":{},"body":{"classes/PhoneValidationConstraint.html":{}}}],["phonenumber",{"_index":568,"title":{},"body":{"classes/CreateManagerDto.html":{},"entities/ManagersEntity.html":{},"classes/UpdateManagerDto.html":{},"entities/UsersEntity.html":{},"miscellaneous/variables.html":{}}}],["phonevalidation",{"_index":562,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["phonevalidation(validationoptions",{"_index":1193,"title":{},"body":{"classes/PhoneValidationConstraint.html":{},"miscellaneous/functions.html":{}}}],["phonevalidationconstraint",{"_index":1186,"title":{"classes/PhoneValidationConstraint.html":{}},"body":{"classes/PhoneValidationConstraint.html":{},"coverage.html":{}}}],["pipeqrcodestream",{"_index":1634,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["pipeqrcodestream(stream",{"_index":1640,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["pipetransform",{"_index":654,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["plaintextpassword",{"_index":335,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["plaintoclass",{"_index":655,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":659,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["port",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{}}}],["post",{"_index":225,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["post('add",{"_index":1343,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["post('authenticate",{"_index":1630,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('confirm",{"_index":725,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('create",{"_index":460,"title":{},"body":{"controllers/CompaniesController.html":{},"controllers/ManagersController.html":{},"controllers/ProductsController.html":{}}}],["post('delete",{"_index":467,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["post('delete/:id",{"_index":1071,"title":{},"body":{"controllers/ManagersController.html":{}}}],["post('find",{"_index":462,"title":{},"body":{"controllers/CompaniesController.html":{},"controllers/ManagersController.html":{}}}],["post('generate",{"_index":1623,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('login",{"_index":269,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('logout",{"_index":283,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('registration",{"_index":255,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('resend",{"_index":730,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('test",{"_index":1691,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('turn",{"_index":1626,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('update",{"_index":464,"title":{},"body":{"controllers/CompaniesController.html":{},"controllers/ManagersController.html":{}}}],["post('upload",{"_index":1230,"title":{},"body":{"controllers/PricesController.html":{}}}],["post('upload')@apioperation({description",{"_index":1205,"title":{},"body":{"controllers/PricesController.html":{}}}],["postgres",{"_index":681,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["postgres_db",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["postgresql",{"_index":1930,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":188,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":1307,"title":{},"body":{"controllers/ProductsController.html":{}}}],["price.dto",{"_index":1211,"title":{},"body":{"controllers/PricesController.html":{},"injectables/PricesService.html":{}}}],["price.dto.ts",{"_index":582,"title":{},"body":{"classes/CreatePriceDto.html":{},"coverage.html":{}}}],["price.dto.ts:14",{"_index":584,"title":{},"body":{"classes/CreatePriceDto.html":{}}}],["price.dto.ts:24",{"_index":585,"title":{},"body":{"classes/CreatePriceDto.html":{}}}],["price.xls",{"_index":1248,"title":{},"body":{"entities/PricesEntity.html":{}}}],["pricedata",{"_index":1209,"title":{},"body":{"controllers/PricesController.html":{},"injectables/PricesService.html":{}}}],["pricedata.file",{"_index":1242,"title":{},"body":{"controllers/PricesController.html":{}}}],["priceid",{"_index":1270,"title":{},"body":{"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["prices",{"_index":1199,"title":{},"body":{"controllers/PricesController.html":{},"miscellaneous/variables.html":{}}}],["prices.controller",{"_index":1258,"title":{},"body":{"modules/PricesModule.html":{}}}],["prices.entity",{"_index":1220,"title":{},"body":{"controllers/PricesController.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{}}}],["prices.service",{"_index":1218,"title":{},"body":{"controllers/PricesController.html":{},"modules/PricesModule.html":{}}}],["prices/prices.module",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{}}}],["prices/prices.service",{"_index":1449,"title":{},"body":{"injectables/ProductsService.html":{}}}],["pricescontroller",{"_index":1197,"title":{"controllers/PricesController.html":{}},"body":{"controllers/PricesController.html":{},"modules/PricesModule.html":{},"coverage.html":{}}}],["pricesentity",{"_index":1219,"title":{"entities/PricesEntity.html":{}},"body":{"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"coverage.html":{}}}],["pricesmodule",{"_index":112,"title":{"modules/PricesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PricesModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["pricesrepository",{"_index":1265,"title":{},"body":{"injectables/PricesService.html":{}}}],["pricesservice",{"_index":1217,"title":{"injectables/PricesService.html":{}},"body":{"controllers/PricesController.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["primarygeneratedcolumn",{"_index":398,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["private",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CompaniesService.html":{},"injectables/CustomValidationPipe.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/ManagersService.html":{},"injectables/PricesService.html":{},"injectables/ProductsService.html":{},"injectables/SentryService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["producerprice",{"_index":694,"title":{},"body":{"classes/EditProductDto.html":{}}}],["product",{"_index":1344,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{}}}],["product.id",{"_index":1415,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["product.productcode",{"_index":1416,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["product.productprice",{"_index":1418,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["product.title",{"_index":1417,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["productcode",{"_index":588,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/EditProductDto.html":{},"interfaces/ProductSearchBody.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{}}}],["productdata",{"_index":1311,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["productentities",{"_index":1282,"title":{},"body":{"injectables/PricesService.html":{}}}],["productentities.push(product",{"_index":1285,"title":{},"body":{"injectables/PricesService.html":{}}}],["productentity",{"_index":1461,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productentity.productcode",{"_index":1462,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productentity.productprice",{"_index":1466,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productentity.title",{"_index":1464,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productentity.updatedat",{"_index":1468,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productprice",{"_index":589,"title":{},"body":{"classes/CreateProductDto.html":{},"interfaces/ProductSearchBody.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsSearchService.html":{}}}],["products",{"_index":394,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/OrdersEntity.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{}}}],["products.category",{"_index":402,"title":{},"body":{"entities/CategoriesEntity.html":{}}}],["products.controller",{"_index":1389,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.entity",{"_index":1332,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{}}}],["products.order",{"_index":1145,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["products.service",{"_index":1334,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["products/products.entity",{"_index":408,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/OrdersEntity.html":{},"injectables/PricesService.html":{}}}],["products/products.module",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["productscache/httpcache.interceptor",{"_index":1327,"title":{},"body":{"controllers/ProductsController.html":{}}}],["productscache/productscachekey.constant",{"_index":1336,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["productscontroller",{"_index":1294,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsearchbody",{"_index":1286,"title":{"interfaces/ProductSearchBody.html":{}},"body":{"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"injectables/ProductsSearchService.html":{},"coverage.html":{}}}],["productsearchbody.interface",{"_index":1292,"title":{},"body":{"interfaces/ProductSearchResult.html":{}}}],["productsearchresult",{"_index":1288,"title":{"interfaces/ProductSearchResult.html":{}},"body":{"interfaces/ProductSearchResult.html":{},"injectables/ProductsSearchService.html":{},"coverage.html":{}}}],["productsentities",{"_index":1459,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productsentities.push(element",{"_index":1469,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productsentity",{"_index":400,"title":{"entities/ProductsEntity.html":{}},"body":{"entities/CategoriesEntity.html":{},"entities/OrdersEntity.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["productsmodule",{"_index":113,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsrepository",{"_index":1434,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productssearch/productssearch.service",{"_index":1390,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["productssearchservice",{"_index":1386,"title":{"injectables/ProductsSearchService.html":{}},"body":{"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["productsservice",{"_index":1333,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["project",{"_index":1929,"title":{},"body":{"index.html":{},"properties.html":{}}}],["promise",{"_index":203,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"injectables/CustomValidationPipe.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":669,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/EditProductDto.html":{},"injectables/EmailService.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"classes/PaginationParams.html":{},"entities/PricesEntity.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsSearchService.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"entities/UsersEntity.html":{},"properties.html":{}}}],["property",{"_index":927,"title":{},"body":{"interfaces/IValidationResultAsfunction.html":{}}}],["propertyname",{"_index":820,"title":{},"body":{"classes/EmailValidationConstraint.html":{},"interfaces/IValidationResultAsfunction.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["protected",{"_index":981,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["provide",{"_index":1556,"title":{},"body":{"modules/SentryModule.html":{}}}],["providers",{"_index":305,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/CompaniesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/ManagersModule.html":{},"modules/OrdersModule.html":{},"modules/PricesModule.html":{},"modules/ProductsModule.html":{},"modules/SentryModule.html":{},"modules/UsersModule.html":{}}}],["ps",{"_index":1943,"title":{},"body":{"index.html":{}}}],["public",{"_index":190,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"injectables/CompaniesService.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/HelperFileLoader.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"entities/OrdersEntity.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["publicpath",{"_index":882,"title":{},"body":{"classes/HelperFileLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["qrcode",{"_index":1646,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["query",{"_index":1331,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{}}}],["reader",{"_index":1275,"title":{},"body":{"injectables/PricesService.html":{}}}],["reader.readfile(filepath",{"_index":1281,"title":{},"body":{"injectables/PricesService.html":{}}}],["readonly",{"_index":252,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["recreate",{"_index":1581,"title":{},"body":{"injectables/SentryService.html":{}}}],["redirect",{"_index":1030,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"classes/ViewAuthFilter.html":{}}}],["redis",{"_index":1346,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"dependencies.html":{},"index.html":{}}}],["redis'})@httpcode(200)@useinterceptors(httpcacheinterceptor)@cachekey(get_products_cache_key)@get",{"_index":1318,"title":{},"body":{"controllers/ProductsController.html":{}}}],["redis_host",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["redisstore",{"_index":1391,"title":{},"body":{"modules/ProductsModule.html":{}}}],["reflect",{"_index":1889,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":194,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":291,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":207,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":239,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":969,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":379,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":276,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":274,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register",{"_index":1605,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["register(response",{"_index":1610,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["registerdecorator",{"_index":628,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["registration",{"_index":195,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["registration(userdata",{"_index":210,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["relations",{"_index":543,"title":{},"body":{"injectables/CompaniesService.html":{},"injectables/ManagersService.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":1133,"title":{},"body":{"injectables/ManagersService.html":{}}}],["removerefreshtoken",{"_index":1754,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(userid",{"_index":1774,"title":{},"body":{"injectables/UsersService.html":{}}}],["render",{"_index":229,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{}}}],["render('auth/login",{"_index":266,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["render('auth/registration",{"_index":262,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["render('email/confirm",{"_index":726,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["render('price/convert",{"_index":1340,"title":{},"body":{"controllers/ProductsController.html":{}}}],["render('price/download",{"_index":1229,"title":{},"body":{"controllers/PricesController.html":{}}}],["render('products/product",{"_index":1359,"title":{},"body":{"controllers/ProductsController.html":{}}}],["render('products/products",{"_index":1353,"title":{},"body":{"controllers/ProductsController.html":{}}}],["renderlogin",{"_index":1301,"title":{},"body":{"controllers/ProductsController.html":{}}}],["renderloginpage",{"_index":196,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["renderoneproduct",{"_index":1302,"title":{},"body":{"controllers/ProductsController.html":{}}}],["renderoneproduct(id",{"_index":1323,"title":{},"body":{"controllers/ProductsController.html":{}}}],["renderpricedownloadpage",{"_index":1200,"title":{},"body":{"controllers/PricesController.html":{}}}],["renderregistrationpage",{"_index":197,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["replace",{"_index":893,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["repository",{"_index":515,"title":{},"body":{"injectables/CompaniesService.html":{},"injectables/ManagersService.html":{},"injectables/PricesService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["repository.save",{"_index":538,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["repository.update",{"_index":1120,"title":{},"body":{"injectables/ManagersService.html":{},"classes/UpdateCompanyDto.html":{}}}],["req",{"_index":223,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request",{"_index":72,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IRequestWithUser.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request._parsedurl.query",{"_index":909,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["request.cookies?.refresh",{"_index":991,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.method",{"_index":95,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["request.res",{"_index":280,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.res.setheader",{"_index":286,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":281,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.url",{"_index":93,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["request.user",{"_index":294,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user.id",{"_index":293,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user?.isemailconfirmed",{"_index":743,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["request?.cookies?.authentication",{"_index":999,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":986,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestmethod",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["requests",{"_index":1813,"title":{},"body":{"classes/ViewAuthFilter.html":{}}}],["require('xlsx",{"_index":1276,"title":{},"body":{"injectables/PricesService.html":{}}}],["required",{"_index":2012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":1617,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["resendconfirmationlink",{"_index":712,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["resendconfirmationlink(request",{"_index":717,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(userid",{"_index":764,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["reset",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CompaniesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/ManagersModule.html":{},"modules/PricesModule.html":{},"modules/ProductsModule.html":{},"modules/SentryModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/IQrCodeStream.html":{},"injectables/LoggerMiddleware.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/ViewAuthFilter.html":{}}}],["response.interface",{"_index":76,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["response.interface.ts",{"_index":614,"title":{},"body":{"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["response.status(status).json(errormessage",{"_index":88,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["response.status(status).redirect('/auth/registration",{"_index":1815,"title":{},"body":{"classes/ViewAuthFilter.html":{}}}],["rest",{"_index":1972,"title":{},"body":{"index.html":{}}}],["result",{"_index":667,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["result.id",{"_index":1474,"title":{},"body":{"injectables/ProductsService.html":{}}}],["results",{"_index":39,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"modules/CategoriesModule.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"modules/DatabaseModule.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"modules/OrdersModule.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.map((result",{"_index":1473,"title":{},"body":{"injectables/ProductsService.html":{}}}],["return",{"_index":260,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IValidationResultAsfunction.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1891,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":1707,"title":{},"body":{"entities/UsersEntity.html":{}}}],["roles/role.enum",{"_index":1738,"title":{},"body":{"entities/UsersEntity.html":{}}}],["root/root",{"_index":1933,"title":{},"body":{"index.html":{}}}],["route",{"_index":1531,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{}}}],["run",{"_index":1949,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1521,"title":{},"body":{"injectables/SentryInterceptor.html":{},"dependencies.html":{}}}],["s",{"_index":373,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["save",{"_index":1105,"title":{},"body":{"injectables/ManagersService.html":{}}}],["scheduling",{"_index":1975,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1163,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["scope",{"_index":1507,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{}}}],["scope.request",{"_index":1523,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{}}}],["scope.setcontext('http",{"_index":1590,"title":{},"body":{"injectables/SentryService.html":{}}}],["scope.setspan(transaction",{"_index":1588,"title":{},"body":{"injectables/SentryService.html":{}}}],["scoped",{"_index":1570,"title":{},"body":{"injectables/SentryService.html":{}}}],["search",{"_index":1320,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsSearchService.html":{},"index.html":{}}}],["search(text",{"_index":1408,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["search/search.module",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{}}}],["searchforproduct",{"_index":1430,"title":{},"body":{"injectables/ProductsService.html":{}}}],["searchforproduct(text",{"_index":1444,"title":{},"body":{"injectables/ProductsService.html":{}}}],["searchmodule",{"_index":114,"title":{"modules/SearchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["secret",{"_index":369,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"interfaces/I2faGenerate.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{}}}],["secretkey",{"_index":1653,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["secretorkey",{"_index":987,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["sendmail",{"_index":791,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":794,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendverificationlink",{"_index":756,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"index.html":{}}}],["sendverificationlink(email",{"_index":766,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["sentry",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"index.html":{}}}],["sentry.captureexception",{"_index":1537,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["sentry.getcurrenthub().configurescope((scope",{"_index":1587,"title":{},"body":{"injectables/SentryService.html":{}}}],["sentry.getcurrenthub().getscope",{"_index":1572,"title":{},"body":{"injectables/SentryService.html":{}}}],["sentry.init(options",{"_index":1555,"title":{},"body":{"modules/SentryModule.html":{}}}],["sentry.interceptor",{"_index":1551,"title":{},"body":{"modules/SentryModule.html":{}}}],["sentry.nodeoptions",{"_index":1547,"title":{},"body":{"modules/SentryModule.html":{}}}],["sentry.service",{"_index":1522,"title":{},"body":{"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{}}}],["sentry.starttransaction",{"_index":1583,"title":{},"body":{"injectables/SentryService.html":{}}}],["sentry/node",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"dependencies.html":{}}}],["sentry/sentry.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["sentry/tracing",{"_index":1568,"title":{},"body":{"injectables/SentryService.html":{},"dependencies.html":{}}}],["sentry/types",{"_index":1569,"title":{},"body":{"injectables/SentryService.html":{}}}],["sentry_options",{"_index":1552,"title":{},"body":{"modules/SentryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sentryinterceptor",{"_index":1505,"title":{"injectables/SentryInterceptor.html":{}},"body":{"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"coverage.html":{}}}],["sentrymodule",{"_index":115,"title":{"modules/SentryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SentryModule.html":{},"modules.html":{},"overview.html":{}}}],["sentrymodule.forroot",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["sentryservice",{"_index":1508,"title":{"injectables/SentryService.html":{}},"body":{"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"coverage.html":{},"overview.html":{}}}],["separatecount",{"_index":1487,"title":{},"body":{"injectables/ProductsService.html":{}}}],["service",{"_index":803,"title":{},"body":{"injectables/EmailService.html":{},"injectables/SentryService.html":{}}}],["set",{"_index":287,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/HelperFileLoader.html":{},"entities/OrdersEntity.html":{},"entities/ProductsEntity.html":{},"injectables/SentryService.html":{},"entities/UsersEntity.html":{}}}],["setcurrentrefreshtoken",{"_index":1755,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":1776,"title":{},"body":{"injectables/UsersService.html":{}}}],["setpath(_path",{"_index":876,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["settwofactorauthenticationsecret",{"_index":1756,"title":{},"body":{"injectables/UsersService.html":{}}}],["settwofactorauthenticationsecret(secret",{"_index":1778,"title":{},"body":{"injectables/UsersService.html":{}}}],["setup",{"_index":1584,"title":{},"body":{"injectables/SentryService.html":{}}}],["sheets",{"_index":1283,"title":{},"body":{"injectables/PricesService.html":{}}}],["shipmentadditionalhousenumber",{"_index":472,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["shipmentcity",{"_index":473,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["shipmenthousenumber",{"_index":474,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["shipmentoffice",{"_index":475,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["shipmentstreet",{"_index":476,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["signature",{"_index":928,"title":{},"body":{"interfaces/IValidationResultAsfunction.html":{}}}],["simply",{"_index":1591,"title":{},"body":{"injectables/SentryService.html":{}}}],["skip",{"_index":1493,"title":{},"body":{"injectables/ProductsService.html":{}}}],["slice(0",{"_index":891,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"modules/CategoriesModule.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"modules/DatabaseModule.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"modules/ManagersModule.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"modules/OrdersModule.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"modules/PricesModule.html":{},"injectables/PricesService.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"modules/ProductsModule.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{}}}],["span",{"_index":1526,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{}}}],["span.finish",{"_index":1540,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["spancontext",{"_index":1564,"title":{},"body":{"injectables/SentryService.html":{}}}],["splitdateforname",{"_index":889,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["splitdateforname}.${fileextension",{"_index":896,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["src/.../customisnumber.validation.ts",{"_index":1916,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../fileloader.types.ts",{"_index":2002,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../helperfileloader.ts",{"_index":2008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../isemailvalid.validation.ts",{"_index":1917,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../ismanagerexist.validation.ts",{"_index":1918,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../isnotemptymessage.ts",{"_index":2006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../isnumber.validation.ts",{"_index":1920,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../isphonevalid.validation.ts",{"_index":1921,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../isstring.validation.ts",{"_index":1922,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../isuserexist.validation.ts",{"_index":1919,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1914,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../orders.enum.ts",{"_index":1901,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../passwordlength.validation.ts",{"_index":1915,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prices.controller.ts",{"_index":2009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../productscachekey.constant.ts",{"_index":2005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":1902,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../sentry.module.ts",{"_index":2010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["src/app.module.ts:65",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":187,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{},"index.html":{}}}],["src/authentication/authentication.controller.ts:107",{"_index":206,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:123",{"_index":209,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:40",{"_index":213,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:54",{"_index":218,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:64",{"_index":216,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:76",{"_index":202,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":304,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":324,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:113",{"_index":350,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:17",{"_index":333,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:24",{"_index":347,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:41",{"_index":342,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:63",{"_index":346,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:88",{"_index":338,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:95",{"_index":336,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/guards/jwt",{"_index":965,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["src/authentication/guards/localauthentication.guard.ts",{"_index":1011,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/interfaces/2fagenerate.interface.ts",{"_index":912,"title":{},"body":{"interfaces/I2faGenerate.html":{},"coverage.html":{}}}],["src/authentication/interfaces/cookieswithjwt.interface.ts",{"_index":914,"title":{},"body":{"interfaces/ICookiesFromJwt.html":{},"coverage.html":{}}}],["src/authentication/interfaces/qrcodestream.interface.ts",{"_index":920,"title":{},"body":{"interfaces/IQrCodeStream.html":{},"coverage.html":{}}}],["src/authentication/interfaces/renderauthtemplate.interface.ts",{"_index":922,"title":{},"body":{"interfaces/IRenderTemplate.html":{},"coverage.html":{}}}],["src/authentication/interfaces/requestwithuser.interface.ts",{"_index":923,"title":{},"body":{"interfaces/IRequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/interfaces/tokenpayload.interface.ts",{"_index":924,"title":{},"body":{"interfaces/ITokenPayload.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt",{"_index":970,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt.strategy.ts",{"_index":994,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt.strategy.ts:11",{"_index":995,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategies/jwt.strategy.ts:27",{"_index":997,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategies/local.strategy.ts",{"_index":1013,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/local.strategy.ts:16",{"_index":1016,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/strategies/local.strategy.ts:8",{"_index":1015,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/twofactor/dto/twofactorauthenticationcode.dto.ts",{"_index":1599,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["src/authentication/twofactor/dto/twofactorauthenticationcode.dto.ts:15",{"_index":1602,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts",{"_index":1603,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts:40",{"_index":1612,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts:61",{"_index":1616,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts:82",{"_index":1609,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts",{"_index":1631,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:12",{"_index":1635,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:18",{"_index":1637,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:33",{"_index":1639,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:50",{"_index":1641,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/categories/categories.entity.ts",{"_index":391,"title":{},"body":{"entities/CategoriesEntity.html":{},"coverage.html":{}}}],["src/categories/categories.entity.ts:14",{"_index":399,"title":{},"body":{"entities/CategoriesEntity.html":{}}}],["src/categories/categories.entity.ts:17",{"_index":405,"title":{},"body":{"entities/CategoriesEntity.html":{}}}],["src/categories/categories.entity.ts:20",{"_index":403,"title":{},"body":{"entities/CategoriesEntity.html":{}}}],["src/categories/categories.entity.ts:23",{"_index":397,"title":{},"body":{"entities/CategoriesEntity.html":{}}}],["src/categories/categories.entity.ts:26",{"_index":407,"title":{},"body":{"entities/CategoriesEntity.html":{}}}],["src/categories/categories.module.ts",{"_index":414,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/companies/companies.controller.ts",{"_index":424,"title":{},"body":{"controllers/CompaniesController.html":{},"coverage.html":{}}}],["src/companies/companies.controller.ts:28",{"_index":434,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["src/companies/companies.controller.ts:39",{"_index":440,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["src/companies/companies.controller.ts:50",{"_index":448,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["src/companies/companies.controller.ts:61",{"_index":444,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["src/companies/companies.controller.ts:74",{"_index":438,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["src/companies/companies.entity.ts",{"_index":469,"title":{},"body":{"entities/CompaniesEntity.html":{},"coverage.html":{}}}],["src/companies/companies.entity.ts:103",{"_index":499,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["src/companies/companies.entity.ts:112",{"_index":503,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["src/companies/companies.entity.ts:18",{"_index":486,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["src/companies/companies.entity.ts:25",{"_index":479,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["src/companies/companies.entity.ts:35",{"_index":498,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["src/companies/companies.entity.ts:42",{"_index":481,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["src/companies/companies.entity.ts:49",{"_index":491,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["src/companies/companies.entity.ts:56",{"_index":496,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["src/companies/companies.entity.ts:63",{"_index":493,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["src/companies/companies.entity.ts:74",{"_index":490,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["src/companies/companies.entity.ts:85",{"_index":495,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["src/companies/companies.entity.ts:92",{"_index":483,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["src/companies/companies.module.ts",{"_index":508,"title":{},"body":{"modules/CompaniesModule.html":{}}}],["src/companies/companies.service.ts",{"_index":511,"title":{},"body":{"injectables/CompaniesService.html":{},"coverage.html":{}}}],["src/companies/companies.service.ts:15",{"_index":518,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["src/companies/companies.service.ts:27",{"_index":520,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["src/companies/companies.service.ts:38",{"_index":522,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["src/companies/companies.service.ts:50",{"_index":526,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["src/companies/companies.service.ts:69",{"_index":524,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["src/companies/companies.service.ts:88",{"_index":519,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["src/companies/companies.service.ts:9",{"_index":516,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["src/companies/dto/create",{"_index":548,"title":{},"body":{"classes/CreateCompanyDto.html":{},"coverage.html":{}}}],["src/companies/dto/update",{"_index":1656,"title":{},"body":{"classes/UpdateCompanyDto.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":677,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/email/email.module.ts",{"_index":787,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":789,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:20",{"_index":796,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":793,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/emailconfirmation/dto/confirmemail.dto.ts",{"_index":546,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["src/emailconfirmation/dto/confirmemail.dto.ts:15",{"_index":547,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["src/emailconfirmation/emailconfirmation.controller.ts",{"_index":709,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["src/emailconfirmation/emailconfirmation.controller.ts:29",{"_index":715,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["src/emailconfirmation/emailconfirmation.controller.ts:43",{"_index":720,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["src/emailconfirmation/emailconfirmation.module.ts",{"_index":750,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts",{"_index":753,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:17",{"_index":767,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:45",{"_index":763,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:63",{"_index":761,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:75",{"_index":765,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:9",{"_index":759,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/guards/emailconfirmation.guard.ts",{"_index":735,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["src/emailconfirmation/guards/emailconfirmation.guard.ts:11",{"_index":739,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["src/emailconfirmation/interfaces/verificationtokenpayload.interface.ts",{"_index":930,"title":{},"body":{"interfaces/IVerificationTokenPayload.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1830,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/managers/dto/createmanager.dto.ts",{"_index":565,"title":{},"body":{"classes/CreateManagerDto.html":{},"coverage.html":{}}}],["src/managers/dto/createmanager.dto.ts:19",{"_index":571,"title":{},"body":{"classes/CreateManagerDto.html":{}}}],["src/managers/dto/createmanager.dto.ts:30",{"_index":577,"title":{},"body":{"classes/CreateManagerDto.html":{}}}],["src/managers/dto/createmanager.dto.ts:40",{"_index":573,"title":{},"body":{"classes/CreateManagerDto.html":{}}}],["src/managers/dto/createmanager.dto.ts:50",{"_index":575,"title":{},"body":{"classes/CreateManagerDto.html":{}}}],["src/managers/dto/updatemanager.dto.ts",{"_index":1670,"title":{},"body":{"classes/UpdateManagerDto.html":{},"coverage.html":{}}}],["src/managers/dto/updatemanager.dto.ts:18",{"_index":1674,"title":{},"body":{"classes/UpdateManagerDto.html":{}}}],["src/managers/dto/updatemanager.dto.ts:27",{"_index":1672,"title":{},"body":{"classes/UpdateManagerDto.html":{}}}],["src/managers/dto/updatemanager.dto.ts:37",{"_index":1676,"title":{},"body":{"classes/UpdateManagerDto.html":{}}}],["src/managers/dto/updatemanager.dto.ts:46",{"_index":1673,"title":{},"body":{"classes/UpdateManagerDto.html":{}}}],["src/managers/dto/updatemanager.dto.ts:55",{"_index":1675,"title":{},"body":{"classes/UpdateManagerDto.html":{}}}],["src/managers/manager.controller.ts",{"_index":1038,"title":{},"body":{"controllers/ManagersController.html":{},"coverage.html":{}}}],["src/managers/manager.controller.ts:30",{"_index":1045,"title":{},"body":{"controllers/ManagersController.html":{}}}],["src/managers/manager.controller.ts:42",{"_index":1050,"title":{},"body":{"controllers/ManagersController.html":{}}}],["src/managers/manager.controller.ts:51",{"_index":1057,"title":{},"body":{"controllers/ManagersController.html":{}}}],["src/managers/manager.controller.ts:62",{"_index":1053,"title":{},"body":{"controllers/ManagersController.html":{}}}],["src/managers/manager.controller.ts:73",{"_index":1048,"title":{},"body":{"controllers/ManagersController.html":{}}}],["src/managers/managers.entity.ts",{"_index":1073,"title":{},"body":{"entities/ManagersEntity.html":{},"coverage.html":{}}}],["src/managers/managers.entity.ts:19",{"_index":1079,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["src/managers/managers.entity.ts:29",{"_index":1077,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["src/managers/managers.entity.ts:36",{"_index":1081,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["src/managers/managers.entity.ts:43",{"_index":1078,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["src/managers/managers.entity.ts:50",{"_index":1080,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["src/managers/managers.entity.ts:58",{"_index":1075,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["src/managers/managers.entity.ts:71",{"_index":1085,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["src/managers/managers.entity.ts:81",{"_index":1088,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["src/managers/managers.module.ts",{"_index":1094,"title":{},"body":{"modules/ManagersModule.html":{}}}],["src/managers/managers.service.ts",{"_index":1097,"title":{},"body":{"injectables/ManagersService.html":{},"coverage.html":{}}}],["src/managers/managers.service.ts:19",{"_index":1103,"title":{},"body":{"injectables/ManagersService.html":{}}}],["src/managers/managers.service.ts:32",{"_index":1109,"title":{},"body":{"injectables/ManagersService.html":{}}}],["src/managers/managers.service.ts:39",{"_index":1107,"title":{},"body":{"injectables/ManagersService.html":{}}}],["src/managers/managers.service.ts:48",{"_index":1112,"title":{},"body":{"injectables/ManagersService.html":{}}}],["src/managers/managers.service.ts:71",{"_index":1111,"title":{},"body":{"injectables/ManagersService.html":{}}}],["src/managers/managers.service.ts:9",{"_index":1101,"title":{},"body":{"injectables/ManagersService.html":{}}}],["src/managers/managers.service.ts:90",{"_index":1106,"title":{},"body":{"injectables/ManagersService.html":{}}}],["src/orders/orders.entity.ts",{"_index":1142,"title":{},"body":{"entities/OrdersEntity.html":{},"coverage.html":{}}}],["src/orders/orders.entity.ts:15",{"_index":1144,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["src/orders/orders.entity.ts:21",{"_index":1153,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["src/orders/orders.entity.ts:24",{"_index":1146,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["src/orders/orders.entity.ts:27",{"_index":1143,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["src/orders/orders.entity.ts:30",{"_index":1147,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["src/orders/orders.enum.ts",{"_index":1903,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/orders/orders.module.ts",{"_index":1165,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/pagination/pagination.dto.ts",{"_index":1173,"title":{},"body":{"classes/PaginationParams.html":{},"coverage.html":{}}}],["src/pagination/pagination.dto.ts:15",{"_index":1180,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/pagination/pagination.dto.ts:21",{"_index":1178,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/pagination/pagination.dto.ts:9",{"_index":1181,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/prices/dto/create",{"_index":581,"title":{},"body":{"classes/CreatePriceDto.html":{},"coverage.html":{}}}],["src/prices/dto/fileupload.dto.ts",{"_index":850,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/prices/dto/fileupload.dto.ts:6",{"_index":854,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["src/prices/prices.controller.ts",{"_index":1198,"title":{},"body":{"controllers/PricesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/prices/prices.controller.ts:37",{"_index":1203,"title":{},"body":{"controllers/PricesController.html":{}}}],["src/prices/prices.controller.ts:61",{"_index":1208,"title":{},"body":{"controllers/PricesController.html":{}}}],["src/prices/prices.entity.ts",{"_index":1246,"title":{},"body":{"entities/PricesEntity.html":{},"coverage.html":{}}}],["src/prices/prices.entity.ts:16",{"_index":1250,"title":{},"body":{"entities/PricesEntity.html":{}}}],["src/prices/prices.entity.ts:23",{"_index":1249,"title":{},"body":{"entities/PricesEntity.html":{}}}],["src/prices/prices.entity.ts:30",{"_index":1251,"title":{},"body":{"entities/PricesEntity.html":{}}}],["src/prices/prices.entity.ts:37",{"_index":1247,"title":{},"body":{"entities/PricesEntity.html":{}}}],["src/prices/prices.entity.ts:48",{"_index":1252,"title":{},"body":{"entities/PricesEntity.html":{}}}],["src/prices/prices.module.ts",{"_index":1257,"title":{},"body":{"modules/PricesModule.html":{}}}],["src/prices/prices.service.ts",{"_index":1260,"title":{},"body":{"injectables/PricesService.html":{},"coverage.html":{}}}],["src/prices/prices.service.ts:15",{"_index":1267,"title":{},"body":{"injectables/PricesService.html":{}}}],["src/prices/prices.service.ts:21",{"_index":1269,"title":{},"body":{"injectables/PricesService.html":{}}}],["src/prices/prices.service.ts:9",{"_index":1264,"title":{},"body":{"injectables/PricesService.html":{}}}],["src/products/dto/createproduct.dto.ts",{"_index":587,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dto/createproduct.dto.ts:16",{"_index":591,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/dto/createproduct.dto.ts:26",{"_index":595,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/dto/createproduct.dto.ts:36",{"_index":594,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/dto/updateproduct.dto.ts",{"_index":693,"title":{},"body":{"classes/EditProductDto.html":{},"coverage.html":{}}}],["src/products/dto/updateproduct.dto.ts:17",{"_index":702,"title":{},"body":{"classes/EditProductDto.html":{}}}],["src/products/dto/updateproduct.dto.ts:30",{"_index":704,"title":{},"body":{"classes/EditProductDto.html":{}}}],["src/products/dto/updateproduct.dto.ts:43",{"_index":698,"title":{},"body":{"classes/EditProductDto.html":{}}}],["src/products/products.controller.ts",{"_index":1295,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:114",{"_index":1326,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:38",{"_index":1310,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:50",{"_index":1322,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:59",{"_index":1308,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:70",{"_index":1305,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:84",{"_index":1319,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:97",{"_index":1316,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.entity.ts",{"_index":1363,"title":{},"body":{"entities/ProductsEntity.html":{},"coverage.html":{}}}],["src/products/products.entity.ts:19",{"_index":1370,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["src/products/products.entity.ts:30",{"_index":1374,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["src/products/products.entity.ts:37",{"_index":1377,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["src/products/products.entity.ts:44",{"_index":1376,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["src/products/products.entity.ts:56",{"_index":1373,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["src/products/products.entity.ts:68",{"_index":1368,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["src/products/products.entity.ts:75",{"_index":1369,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["src/products/products.entity.ts:86",{"_index":1378,"title":{},"body":{"entities/ProductsEntity.html":{}}}],["src/products/products.module.ts",{"_index":1387,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/products.service.ts",{"_index":1425,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/products.service.ts:107",{"_index":1442,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:23",{"_index":1433,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:32",{"_index":1437,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:47",{"_index":1436,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:67",{"_index":1445,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:78",{"_index":1439,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:86",{"_index":1440,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:93",{"_index":1435,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/productscache/httpcache.interceptor.ts",{"_index":900,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/products/productscache/httpcache.interceptor.ts:10",{"_index":904,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["src/products/productscache/productscachekey.constant.ts",{"_index":1835,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/products/productssearch/interface/productsearchbody.interface.ts",{"_index":1287,"title":{},"body":{"interfaces/ProductSearchBody.html":{},"coverage.html":{}}}],["src/products/productssearch/interface/productsearchresult.interface.ts",{"_index":1289,"title":{},"body":{"interfaces/ProductSearchResult.html":{},"coverage.html":{}}}],["src/products/productssearch/productssearch.service.ts",{"_index":1401,"title":{},"body":{"injectables/ProductsSearchService.html":{},"coverage.html":{}}}],["src/products/productssearch/productssearch.service.ts:13",{"_index":1407,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["src/products/productssearch/productssearch.service.ts:28",{"_index":1409,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["src/products/productssearch/productssearch.service.ts:9",{"_index":1405,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["src/search/search.module.ts",{"_index":1498,"title":{},"body":{"modules/SearchModule.html":{}}}],["src/sentry/sentry.interceptor.ts",{"_index":1506,"title":{},"body":{"injectables/SentryInterceptor.html":{},"coverage.html":{}}}],["src/sentry/sentry.interceptor.ts:16",{"_index":1511,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["src/sentry/sentry.interceptor.ts:19",{"_index":1514,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["src/sentry/sentry.module.ts",{"_index":1544,"title":{},"body":{"modules/SentryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/sentry/sentry.module.ts:13",{"_index":1548,"title":{},"body":{"modules/SentryModule.html":{}}}],["src/sentry/sentry.service.ts",{"_index":1559,"title":{},"body":{"injectables/SentryService.html":{},"coverage.html":{}}}],["src/sentry/sentry.service.ts:14",{"_index":1567,"title":{},"body":{"injectables/SentryService.html":{}}}],["src/sentry/sentry.service.ts:22",{"_index":1562,"title":{},"body":{"injectables/SentryService.html":{}}}],["src/sentry/sentry.service.ts:49",{"_index":1565,"title":{},"body":{"injectables/SentryService.html":{}}}],["src/users/dto/addcompanytouser.ts",{"_index":6,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"coverage.html":{}}}],["src/users/dto/addcompanytouser.ts:17",{"_index":24,"title":{},"body":{"classes/AddCompanyToUserDto.html":{}}}],["src/users/dto/addcompanytouser.ts:27",{"_index":21,"title":{},"body":{"classes/AddCompanyToUserDto.html":{}}}],["src/users/dto/addmanagertouser.ts",{"_index":42,"title":{},"body":{"classes/AddManagerToUserDto.html":{},"coverage.html":{}}}],["src/users/dto/addmanagertouser.ts:17",{"_index":45,"title":{},"body":{"classes/AddManagerToUserDto.html":{}}}],["src/users/dto/addmanagertouser.ts:28",{"_index":44,"title":{},"body":{"classes/AddManagerToUserDto.html":{}}}],["src/users/dto/createuser.dto.ts",{"_index":598,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/createuser.dto.ts:19",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuser.dto.ts:29",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuser.dto.ts:40",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/roles/role.enum.ts",{"_index":1911,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/users.controller.ts",{"_index":1678,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:25",{"_index":1685,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:36",{"_index":1688,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:43",{"_index":1692,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.entity.ts",{"_index":1701,"title":{},"body":{"entities/UsersEntity.html":{},"coverage.html":{}}}],["src/users/users.entity.ts:108",{"_index":1713,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:119",{"_index":1735,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:130",{"_index":1719,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:141",{"_index":1718,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:154",{"_index":1711,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:166",{"_index":1724,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:175",{"_index":1727,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:182",{"_index":1712,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:193",{"_index":1736,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:23",{"_index":1716,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:33",{"_index":1714,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:44",{"_index":1732,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:51",{"_index":1715,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:62",{"_index":1721,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:74",{"_index":1728,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:85",{"_index":1730,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.entity.ts:96",{"_index":1734,"title":{},"body":{"entities/UsersEntity.html":{}}}],["src/users/users.module.ts",{"_index":1745,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1749,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:110",{"_index":1777,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:120",{"_index":1762,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:138",{"_index":1763,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":1760,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":1773,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:44",{"_index":1767,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:55",{"_index":1765,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:61",{"_index":1769,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:72",{"_index":1775,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:78",{"_index":1779,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:87",{"_index":1781,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:93",{"_index":1771,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/exceptionfilters/http",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/utils/exceptionfilters/models/http",{"_index":613,"title":{},"body":{"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["src/utils/exceptionfilters/unauthorized",{"_index":1811,"title":{},"body":{"classes/ViewAuthFilter.html":{},"coverage.html":{}}}],["src/utils/fileloader/helperfileloader.ts",{"_index":856,"title":{},"body":{"classes/HelperFileLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/fileloader/helperfileloader.ts:13",{"_index":862,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["src/utils/fileloader/helperfileloader.ts:14",{"_index":877,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["src/utils/fileloader/helperfileloader.ts:18",{"_index":868,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["src/utils/fileloader/helperfileloader.ts:33",{"_index":872,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["src/utils/fileloader/helperfileloader.ts:41",{"_index":875,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["src/utils/interfaces/fileformatfordownload.interface.ts",{"_index":915,"title":{},"body":{"interfaces/IFileFormatForDownload.html":{},"coverage.html":{}}}],["src/utils/interfaces/validationresultasfunction.interface.ts",{"_index":925,"title":{},"body":{"interfaces/IValidationResultAsfunction.html":{},"coverage.html":{}}}],["src/utils/middlewares/logger.middleware.ts",{"_index":1022,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/utils/middlewares/logger.middleware.ts:7",{"_index":1028,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/utils/repeatableconsts/isnotemptymessage.ts",{"_index":1839,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/types/fileloader.types.ts",{"_index":2003,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/validation/customisnumber.validation.ts",{"_index":950,"title":{},"body":{"classes/IsNumberConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/validation/customisnumber.validation.ts:12",{"_index":953,"title":{},"body":{"classes/IsNumberConstraint.html":{}}}],["src/utils/validation/customisnumber.validation.ts:19",{"_index":951,"title":{},"body":{"classes/IsNumberConstraint.html":{}}}],["src/utils/validation/customvalidation.pipe.ts",{"_index":640,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"coverage.html":{}}}],["src/utils/validation/customvalidation.pipe.ts:13",{"_index":653,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["src/utils/validation/customvalidation.pipe.ts:32",{"_index":645,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["src/utils/validation/customvalidation.pipe.ts:45",{"_index":648,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["src/utils/validation/isemailvalid.validation.ts",{"_index":810,"title":{},"body":{"classes/EmailValidationConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/validation/isemailvalid.validation.ts:12",{"_index":813,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["src/utils/validation/isemailvalid.validation.ts:19",{"_index":811,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["src/utils/validation/ismanagerexist.validation.ts",{"_index":932,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/validation/ismanagerexist.validation.ts:16",{"_index":935,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{}}}],["src/utils/validation/ismanagerexist.validation.ts:26",{"_index":933,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{}}}],["src/utils/validation/isnumber.validation.ts",{"_index":1137,"title":{},"body":{"classes/NumberValidationConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/validation/isnumber.validation.ts:14",{"_index":1139,"title":{},"body":{"classes/NumberValidationConstraint.html":{}}}],["src/utils/validation/isnumber.validation.ts:21",{"_index":1138,"title":{},"body":{"classes/NumberValidationConstraint.html":{}}}],["src/utils/validation/isphonevalid.validation.ts",{"_index":1187,"title":{},"body":{"classes/PhoneValidationConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/validation/isphonevalid.validation.ts:12",{"_index":1190,"title":{},"body":{"classes/PhoneValidationConstraint.html":{}}}],["src/utils/validation/isphonevalid.validation.ts:19",{"_index":1188,"title":{},"body":{"classes/PhoneValidationConstraint.html":{}}}],["src/utils/validation/isstring.validation.ts",{"_index":1594,"title":{},"body":{"classes/StringValidationConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/validation/isstring.validation.ts:14",{"_index":1596,"title":{},"body":{"classes/StringValidationConstraint.html":{}}}],["src/utils/validation/isstring.validation.ts:21",{"_index":1595,"title":{},"body":{"classes/StringValidationConstraint.html":{}}}],["src/utils/validation/isuserexist.validation.ts",{"_index":958,"title":{},"body":{"classes/IsUserAlreadyExistConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/validation/isuserexist.validation.ts:16",{"_index":960,"title":{},"body":{"classes/IsUserAlreadyExistConstraint.html":{}}}],["src/utils/validation/isuserexist.validation.ts:26",{"_index":959,"title":{},"body":{"classes/IsUserAlreadyExistConstraint.html":{}}}],["src/utils/validation/passwordlength.validation.ts",{"_index":618,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/validation/passwordlength.validation.ts:15",{"_index":626,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{}}}],["src/utils/validation/passwordlength.validation.ts:25",{"_index":624,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{}}}],["stack",{"_index":1935,"title":{},"body":{"index.html":{}}}],["start",{"_index":1524,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{}}}],["startchild",{"_index":1560,"title":{},"body":{"injectables/SentryService.html":{}}}],["startchild(spancontext",{"_index":1563,"title":{},"body":{"injectables/SentryService.html":{}}}],["started",{"_index":1925,"title":{"index.html":{}},"body":{}}],["startid",{"_index":1176,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["statements",{"_index":1819,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":857,"title":{},"body":{"classes/HelperFileLoader.html":{},"modules/SentryModule.html":{}}}],["status",{"_index":82,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HelperFileLoader.html":{},"classes/ViewAuthFilter.html":{}}}],["statuscode",{"_index":90,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{}}}],["storage",{"_index":1232,"title":{},"body":{"controllers/PricesController.html":{},"controllers/ProductsController.html":{}}}],["store",{"_index":1393,"title":{},"body":{"modules/ProductsModule.html":{},"dependencies.html":{}}}],["strategies/jwt",{"_index":315,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategies/jwt.strategy",{"_index":314,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategies/local.strategy",{"_index":311,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy",{"_index":977,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":921,"title":{},"body":{"interfaces/IQrCodeStream.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["string",{"_index":13,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"classes/EditProductDto.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IValidationResultAsfunction.html":{},"interfaces/IVerificationTokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/LocalStrategy.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"entities/PricesEntity.html":{},"interfaces/ProductSearchBody.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stringvalidation",{"_index":30,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EditProductDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringvalidation()@isnotempty({message",{"_index":699,"title":{},"body":{"classes/EditProductDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["stringvalidation(validationoptions",{"_index":1597,"title":{},"body":{"classes/StringValidationConstraint.html":{},"miscellaneous/functions.html":{}}}],["stringvalidationconstraint",{"_index":1593,"title":{"classes/StringValidationConstraint.html":{}},"body":{"classes/StringValidationConstraint.html":{},"coverage.html":{}}}],["subject",{"_index":775,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["super",{"_index":982,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.trackby(context",{"_index":910,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["support",{"_index":1982,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1983,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1239,"title":{},"body":{"controllers/PricesController.html":{},"dependencies.html":{},"index.html":{}}}],["synchronize",{"_index":691,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":1844,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1843,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1494,"title":{},"body":{"injectables/ProductsService.html":{}}}],["target",{"_index":821,"title":{},"body":{"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["task",{"_index":1974,"title":{},"body":{"index.html":{}}}],["taxpayeridentificationnumber",{"_index":9,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"injectables/CompaniesService.html":{},"classes/CreateCompanyDto.html":{},"classes/UpdateCompanyDto.html":{}}}],["terminus",{"_index":1978,"title":{},"body":{"index.html":{}}}],["test",{"_index":1681,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["test(@body",{"_index":1699,"title":{},"body":{"controllers/UsersController.html":{}}}],["test(email",{"_index":1690,"title":{},"body":{"controllers/UsersController.html":{}}}],["test/.../manager.mock.ts",{"_index":2007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/manager.mock.ts",{"_index":1841,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test:e2e",{"_index":1952,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1963,"title":{},"body":{"index.html":{}}}],["text",{"_index":478,"title":{},"body":{"entities/CompaniesEntity.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/EmailConfirmationService.html":{},"entities/ManagersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"entities/UsersEntity.html":{}}}],["text.length",{"_index":637,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{}}}],["then((manager",{"_index":945,"title":{},"body":{"classes/IsManagerAlreadyExistConstraint.html":{}}}],["then((user",{"_index":963,"title":{},"body":{"classes/IsUserAlreadyExistConstraint.html":{}}}],["this.authenticationservice.getauthenticateduser",{"_index":1020,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":288,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken",{"_index":292,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":272,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":277,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.registration(userdata",{"_index":258,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.builderror(errors",{"_index":666,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["this.cachemanager.del(key",{"_index":1485,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.cachemanager.store.keys",{"_index":1481,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.clearcache",{"_index":1456,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.companiesservice.createcompany(companydata",{"_index":461,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["this.companiesservice.deletecompany(taxpayeridentificationnumber",{"_index":468,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["this.companiesservice.findallcompanies",{"_index":463,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["this.companiesservice.getcompanybytaxpayernumwithallusers",{"_index":466,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["this.companiesservice.updatecompany(managerdata",{"_index":465,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["this.companyrepository.create(companydata",{"_index":530,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["this.companyrepository.find",{"_index":533,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["this.companyrepository.findone",{"_index":537,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["this.companyrepository.remove(_foundcompany",{"_index":544,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["this.companyrepository.save(newcompany",{"_index":531,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["this.companyrepository.update(_foundcompany.id",{"_index":542,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["this.companyservice.findcompanybytaxpayernumber",{"_index":1801,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.configservice",{"_index":983,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.configservice.get",{"_index":372,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('email_password",{"_index":807,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('email_service",{"_index":804,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('email_user",{"_index":805,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":370,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":378,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_verification_token_secret",{"_index":771,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('two_factor_authentication_app_name",{"_index":1649,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.elasticsearchservice.index",{"_index":1413,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["this.elasticsearchservice.search",{"_index":1419,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["this.emailconfirmationservice.confirmemail(email",{"_index":729,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.decodeconfirmationtoken",{"_index":727,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.resendconfirmationlink(request.user.id",{"_index":731,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.sendverificationlink(userdata.email",{"_index":259,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.emailservice.sendmail",{"_index":774,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.getbyid(userid",{"_index":1794,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.geterrorresponse(status",{"_index":87,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.index",{"_index":1414,"title":{},"body":{"injectables/ProductsSearchService.html":{}}}],["this.jwtservice.sign(payload",{"_index":368,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.jwtservice.verify(token",{"_index":776,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.managerservice.findmanager",{"_index":1807,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.managersrepository.create(managerdata",{"_index":1115,"title":{},"body":{"injectables/ManagersService.html":{}}}],["this.managersrepository.find",{"_index":1119,"title":{},"body":{"injectables/ManagersService.html":{}}}],["this.managersrepository.findone",{"_index":1118,"title":{},"body":{"injectables/ManagersService.html":{}}}],["this.managersrepository.findone(id",{"_index":1132,"title":{},"body":{"injectables/ManagersService.html":{}}}],["this.managersrepository.remove(_foundmanager",{"_index":1135,"title":{},"body":{"injectables/ManagersService.html":{}}}],["this.managersrepository.save(_foundmanager",{"_index":1131,"title":{},"body":{"injectables/ManagersService.html":{}}}],["this.managersrepository.save(newmanager",{"_index":1116,"title":{},"body":{"injectables/ManagersService.html":{}}}],["this.managersservice.createmanager(managerdata",{"_index":1066,"title":{},"body":{"controllers/ManagersController.html":{}}}],["this.managersservice.deletemanager(id",{"_index":1072,"title":{},"body":{"controllers/ManagersController.html":{}}}],["this.managersservice.findallmanagers",{"_index":1067,"title":{},"body":{"controllers/ManagersController.html":{}}}],["this.managersservice.getmanagerbyemailwithallusers(id",{"_index":1070,"title":{},"body":{"controllers/ManagersController.html":{}}}],["this.managersservice.updatemanager(managerdata",{"_index":1068,"title":{},"body":{"controllers/ManagersController.html":{}}}],["this.nodemailertransport",{"_index":802,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":808,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.pricesrepository.create(pricedata",{"_index":1273,"title":{},"body":{"injectables/PricesService.html":{}}}],["this.pricesrepository.findone(priceid",{"_index":1278,"title":{},"body":{"injectables/PricesService.html":{}}}],["this.pricesrepository.save(newprice",{"_index":1274,"title":{},"body":{"injectables/PricesService.html":{}}}],["this.pricesservice.createprice(pricedata",{"_index":1245,"title":{},"body":{"controllers/PricesController.html":{}}}],["this.pricesservice.parseprice(priceid",{"_index":1458,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.count",{"_index":1490,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.create(productdata",{"_index":1453,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.find",{"_index":1476,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.findandcount",{"_index":1491,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.findone(id",{"_index":1479,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.save(newproduct",{"_index":1454,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.upsert(productsentities",{"_index":1470,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productssearchservice.indexpost(newproduct",{"_index":1455,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productssearchservice.search(text",{"_index":1471,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.creategoodsfromconvertedprice(priceid",{"_index":1341,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.createproduct(productdata",{"_index":1338,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findbyid(id",{"_index":1345,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.getall",{"_index":1351,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.getposts",{"_index":1357,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.searchforproduct(search",{"_index":1350,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.reflector.get",{"_index":907,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.request",{"_index":1580,"title":{},"body":{"injectables/SentryService.html":{}}}],["this.sendverificationlink(user.email",{"_index":783,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.sentryservice.span.finish",{"_index":1541,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["this.sentryservice.span.gettracecontext",{"_index":1538,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["this.sentryservice.startchild",{"_index":1529,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["this.span.startchild(spancontext",{"_index":1592,"title":{},"body":{"injectables/SentryService.html":{}}}],["this.tovalidate(metatype",{"_index":658,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["this.twofactorauthenticationservice.generatetwofactorauthenticationsecret",{"_index":1624,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.istwofactorauthenticationcodevalid",{"_index":1628,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.pipeqrcodestream",{"_index":1625,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":1002,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":992,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersrepository.create(userdata",{"_index":1791,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1789,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(_founduser",{"_index":1805,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1792,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update",{"_index":1787,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(userid",{"_index":1793,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.addcompanytouser(companyanduserdata",{"_index":1697,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addmanagertouser(manageranduserdata",{"_index":1698,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":361,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.getbyemail(email",{"_index":382,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.getbyid(userid",{"_index":782,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.markemailasconfirmed(email",{"_index":781,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":285,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":278,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.settwofactorauthenticationsecret(secret",{"_index":1651,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.usersservice.turnontwofactorauthentication(request.user.id",{"_index":1629,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":384,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":365,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CompaniesService.html":{},"injectables/CustomValidationPipe.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/ManagersService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"injectables/SentryService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["throwerror",{"_index":1520,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["timestamp",{"_index":96,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["title",{"_index":264,"title":{},"body":{"controllers/AuthenticationController.html":{},"entities/CategoriesEntity.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/EditProductDto.html":{},"interfaces/IRenderTemplate.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"interfaces/ProductSearchBody.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsSearchService.html":{}}}],["todo",{"_index":1362,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["tofilestream",{"_index":1645,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["tofilestream(stream",{"_index":1655,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["toisostring",{"_index":890,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["token",{"_index":275,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"injectables/EmailConfirmationService.html":{},"interfaces/ICookiesFromJwt.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["token.strategy",{"_index":316,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":971,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:14",{"_index":973,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:31",{"_index":975,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token=${token",{"_index":773,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokenexpirederror",{"_index":779,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["total",{"_index":1293,"title":{},"body":{"interfaces/ProductSearchResult.html":{}}}],["totalorderprice",{"_index":1160,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["tovalidate",{"_index":642,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":647,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["tracessamplerate",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["tracing",{"_index":1528,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["trackby",{"_index":902,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":903,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["transaction",{"_index":1577,"title":{},"body":{"injectables/SentryService.html":{}}}],["transform",{"_index":643,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["transform(value",{"_index":650,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["transformer",{"_index":656,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"entities/ManagersEntity.html":{},"classes/PaginationParams.html":{},"entities/UsersEntity.html":{},"dependencies.html":{}}}],["true",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"entities/CompaniesEntity.html":{},"classes/CustomPasswordLengthConstraint.html":{},"modules/DatabaseModule.html":{},"guards/EmailConfirmationGuard.html":{},"classes/HelperFileLoader.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"entities/ManagersEntity.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"classes/StringValidationConstraint.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{}}}],["true})@apipropertyoptional()@column({type",{"_index":1083,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["true})@column({type",{"_index":489,"title":{},"body":{"entities/CompaniesEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["true})@exclude",{"_index":1084,"title":{},"body":{"entities/ManagersEntity.html":{},"entities/UsersEntity.html":{}}}],["try",{"_index":359,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CompaniesService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/ManagersService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["ts",{"_index":534,"title":{},"body":{"injectables/CompaniesService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/ManagersService.html":{}}}],["tsconfig.json",{"_index":1947,"title":{},"body":{"index.html":{}}}],["ttl",{"_index":1397,"title":{},"body":{"modules/ProductsModule.html":{}}}],["turnontwofactorauthentication",{"_index":1606,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{}}}],["turnontwofactorauthentication(request",{"_index":1613,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnontwofactorauthentication(userid",{"_index":1780,"title":{},"body":{"injectables/UsersService.html":{}}}],["two",{"_index":319,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["two_factor_authentication_app_name",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["twofactor/twofactorauthentication.controller",{"_index":317,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["twofactor/twofactorauthentication.service",{"_index":318,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["twofactorauthentication.service",{"_index":1618,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["twofactorauthenticationcode",{"_index":1600,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["twofactorauthenticationcodedto",{"_index":1598,"title":{"classes/TwoFactorAuthenticationCodeDto.html":{}},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationcontroller",{"_index":306,"title":{"controllers/TwoFactorAuthenticationController.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationsecret",{"_index":1708,"title":{},"body":{"entities/UsersEntity.html":{},"injectables/UsersService.html":{}}}],["twofactorauthenticationservice",{"_index":303,"title":{"injectables/TwoFactorAuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"entities/CategoriesEntity.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"injectables/CompaniesService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"modules/DatabaseModule.html":{},"classes/EditProductDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/EmailValidationConstraint.html":{},"classes/FileUploadDto.html":{},"classes/HelperFileLoader.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/I2faGenerate.html":{},"interfaces/ICookiesFromJwt.html":{},"interfaces/IFileFormatForDownload.html":{},"interfaces/IQrCodeStream.html":{},"interfaces/IRenderTemplate.html":{},"interfaces/IRequestWithUser.html":{},"interfaces/ITokenPayload.html":{},"interfaces/IVerificationTokenPayload.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ManagersController.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"classes/NumberValidationConstraint.html":{},"entities/OrdersEntity.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"controllers/PricesController.html":{},"entities/PricesEntity.html":{},"injectables/PricesService.html":{},"interfaces/ProductSearchBody.html":{},"interfaces/ProductSearchResult.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsSearchService.html":{},"injectables/ProductsService.html":{},"injectables/SentryInterceptor.html":{},"modules/SentryModule.html":{},"injectables/SentryService.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"controllers/UsersController.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"classes/ViewAuthFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2000,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":636,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"modules/SentryModule.html":{},"classes/StringValidationConstraint.html":{}}}],["typeorm",{"_index":412,"title":{},"body":{"entities/CategoriesEntity.html":{},"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"injectables/CompaniesService.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"injectables/PricesService.html":{},"controllers/ProductsController.html":{},"entities/ProductsEntity.html":{},"injectables/ProductsService.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":416,"title":{},"body":{"modules/CategoriesModule.html":{},"modules/CompaniesModule.html":{},"modules/DatabaseModule.html":{},"modules/ManagersModule.html":{},"modules/OrdersModule.html":{},"modules/PricesModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([categoriesentity",{"_index":422,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([companiesentity",{"_index":510,"title":{},"body":{"modules/CompaniesModule.html":{}}}],["typeormmodule.forfeature([managersentity",{"_index":1096,"title":{},"body":{"modules/ManagersModule.html":{}}}],["typeormmodule.forfeature([ordersentity",{"_index":1171,"title":{},"body":{"modules/OrdersModule.html":{}}}],["typeormmodule.forfeature([pricesentity",{"_index":1259,"title":{},"body":{"modules/PricesModule.html":{}}}],["typeormmodule.forfeature([productsentity",{"_index":1400,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([usersentity",{"_index":1748,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":678,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":674,"title":{},"body":{"injectables/CustomValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["types.find((type",{"_index":676,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["types/bcrypt",{"_index":1858,"title":{},"body":{"dependencies.html":{}}}],["types/cookie",{"_index":1860,"title":{},"body":{"dependencies.html":{}}}],["types/fileloader.types",{"_index":879,"title":{},"body":{"classes/HelperFileLoader.html":{}}}],["types/hapi__joi",{"_index":1863,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":1865,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1867,"title":{},"body":{"dependencies.html":{}}}],["types/qrcode",{"_index":1870,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":1894,"title":{},"body":{"dependencies.html":{}}}],["unamed",{"_index":926,"title":{},"body":{"interfaces/IValidationResultAsfunction.html":{}}}],["unauthorized",{"_index":1812,"title":{},"body":{"classes/ViewAuthFilter.html":{}}}],["unauthorizedexception",{"_index":741,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/ViewAuthFilter.html":{}}}],["undefined",{"_index":364,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/UsersEntity.html":{}}}],["undefined})@apipropertyoptional()@onetomany(undefined",{"_index":1086,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["unique",{"_index":497,"title":{},"body":{"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/ProductsEntity.html":{},"entities/UsersEntity.html":{}}}],["unknown",{"_index":929,"title":{},"body":{"interfaces/IValidationResultAsfunction.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{}}}],["unlicensed",{"_index":1997,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1955,"title":{},"body":{"index.html":{}}}],["updatecompany",{"_index":430,"title":{},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"injectables/ManagersService.html":{}}}],["updatecompany(companydata",{"_index":525,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["updatecompany(managerdata",{"_index":445,"title":{},"body":{"controllers/CompaniesController.html":{}}}],["updatecompanydto",{"_index":446,"title":{"classes/UpdateCompanyDto.html":{}},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"classes/UpdateCompanyDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":395,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/CompaniesEntity.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"entities/PricesEntity.html":{},"entities/ProductsEntity.html":{},"classes/UpdateCompanyDto.html":{},"entities/UsersEntity.html":{}}}],["updatedatecolumn",{"_index":411,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/OrdersEntity.html":{}}}],["updatedatecolumn({type",{"_index":406,"title":{},"body":{"entities/CategoriesEntity.html":{},"entities/OrdersEntity.html":{}}}],["updateduser",{"_index":1804,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatemanager",{"_index":539,"title":{},"body":{"injectables/CompaniesService.html":{},"controllers/ManagersController.html":{},"injectables/ManagersService.html":{}}}],["updatemanager(managerdata",{"_index":1054,"title":{},"body":{"controllers/ManagersController.html":{},"injectables/ManagersService.html":{}}}],["updatemanager)'})@httpcode(200)@post('find",{"_index":1049,"title":{},"body":{"controllers/ManagersController.html":{}}}],["updatemanagerdto",{"_index":1055,"title":{"classes/UpdateManagerDto.html":{}},"body":{"controllers/ManagersController.html":{},"injectables/ManagersService.html":{},"classes/UpdateManagerDto.html":{},"coverage.html":{}}}],["updateresult",{"_index":454,"title":{},"body":{"controllers/CompaniesController.html":{},"injectables/CompaniesService.html":{},"injectables/UsersService.html":{}}}],["uploadedfile",{"_index":1210,"title":{},"body":{"controllers/PricesController.html":{}}}],["uploadpricetoserver",{"_index":1201,"title":{},"body":{"controllers/PricesController.html":{}}}],["uploadpricetoserver(pricedata",{"_index":1204,"title":{},"body":{"controllers/PricesController.html":{}}}],["url",{"_index":772,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/SentryService.html":{}}}],["use",{"_index":1023,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(_req",{"_index":1024,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useclass",{"_index":1558,"title":{},"body":{"modules/SentryModule.html":{}}}],["used",{"_index":1967,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":680,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{}}}],["useguards",{"_index":226,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":282,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":289,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(localauthenticationguard",{"_index":268,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useinterceptors",{"_index":228,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":250,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CompaniesController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/ManagersController.html":{},"controllers/PricesController.html":{},"controllers/ProductsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(httpcacheinterceptor",{"_index":1347,"title":{},"body":{"controllers/ProductsController.html":{}}}],["useless",{"_index":1961,"title":{},"body":{"index.html":{}}}],["user",{"_index":270,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"interfaces/IRequestWithUser.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtTwoFactorStrategy.html":{},"entities/OrdersEntity.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/UsersEntity.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["user.company",{"_index":1157,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["user.currenthashedrefreshtoken",{"_index":1796,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.id",{"_index":279,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["user.isemailconfirmed",{"_index":780,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["user.istwofactorauthenticationenabled",{"_index":267,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["user.orders",{"_index":1149,"title":{},"body":{"entities/OrdersEntity.html":{}}}],["user.password",{"_index":383,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.service",{"_index":535,"title":{},"body":{"injectables/CompaniesService.html":{},"injectables/ManagersService.html":{}}}],["user.twofactorauthenticationsecret",{"_index":1652,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["userdata",{"_index":214,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["useremail",{"_index":10,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{}}}],["userid",{"_index":343,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"interfaces/ITokenPayload.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":684,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/SearchModule.html":{}}}],["usernamefield",{"_index":1018,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrole",{"_index":1733,"title":{},"body":{"entities/UsersEntity.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":1740,"title":{},"body":{"entities/UsersEntity.html":{}}}],["users",{"_index":443,"title":{},"body":{"controllers/CompaniesController.html":{},"entities/CompaniesEntity.html":{},"injectables/CompaniesService.html":{},"entities/ManagersEntity.html":{},"injectables/ManagersService.html":{},"controllers/UsersController.html":{},"classes/ViewAuthFilter.html":{}}}],["users.company",{"_index":502,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["users.controller",{"_index":1747,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.entity",{"_index":1746,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.manager",{"_index":1087,"title":{},"body":{"entities/ManagersEntity.html":{}}}],["users.service",{"_index":1695,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/:id",{"_index":1052,"title":{},"body":{"controllers/ManagersController.html":{}}}],["users/dto/createuser.dto",{"_index":244,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["users/users.entity",{"_index":243,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"entities/CompaniesEntity.html":{},"interfaces/IRequestWithUser.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["users/users.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{}}}],["users/users.service",{"_index":236,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["userscontroller",{"_index":1677,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersentity",{"_index":242,"title":{"entities/UsersEntity.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"entities/CompaniesEntity.html":{},"interfaces/IRequestWithUser.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/ManagersEntity.html":{},"entities/OrdersEntity.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/UsersEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usersentity})@onetomany(undefined",{"_index":501,"title":{},"body":{"entities/CompaniesEntity.html":{}}}],["userservice",{"_index":972,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["userservice.getbyid",{"_index":1001,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["userservice.getuserifrefreshtokenmatches",{"_index":990,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["usersmodule",{"_index":116,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1761,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersreposity",{"_index":961,"title":{},"body":{"classes/IsUserAlreadyExistConstraint.html":{}}}],["usersservice",{"_index":235,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":1557,"title":{},"body":{"modules/SentryModule.html":{}}}],["utils/fileloader/helperfileloader",{"_index":1216,"title":{},"body":{"controllers/PricesController.html":{}}}],["utils/repeatableconsts/isnotemptymessage",{"_index":27,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EditProductDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{}}}],["utils/validation/isemailvalid.validation",{"_index":35,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateManagerDto.html":{}}}],["utils/validation/ismanagerexist.validation",{"_index":579,"title":{},"body":{"classes/CreateManagerDto.html":{}}}],["utils/validation/isnumber.validation",{"_index":597,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateManagerDto.html":{}}}],["utils/validation/isphonevalid.validation",{"_index":563,"title":{},"body":{"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{}}}],["utils/validation/isstring.validation",{"_index":31,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/EditProductDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{}}}],["utils/validation/isuserexist.validation",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["utils/validation/passwordlength.validation",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate",{"_index":621,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["validate(data",{"_index":952,"title":{},"body":{"classes/IsNumberConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["validate(email",{"_index":812,"title":{},"body":{"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/LocalStrategy.html":{}}}],["validate(object",{"_index":660,"title":{},"body":{"injectables/CustomValidationPipe.html":{}}}],["validate(payload",{"_index":996,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["validate(phone",{"_index":1189,"title":{},"body":{"classes/PhoneValidationConstraint.html":{}}}],["validate(request",{"_index":974,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validate(text",{"_index":625,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{}}}],["validateif",{"_index":705,"title":{},"body":{"classes/EditProductDto.html":{}}}],["validateif((o",{"_index":707,"title":{},"body":{"classes/EditProductDto.html":{}}}],["validation",{"_index":634,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{}}}],["validationarguments",{"_index":623,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["validationarguments.constraints[0",{"_index":638,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{}}}],["validationarguments.property",{"_index":954,"title":{},"body":{"classes/IsNumberConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["validationarguments.value",{"_index":815,"title":{},"body":{"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/PhoneValidationConstraint.html":{}}}],["validationoptions",{"_index":629,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{},"miscellaneous/functions.html":{}}}],["validationschema",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":29,"title":{},"body":{"classes/AddCompanyToUserDto.html":{},"classes/AddManagerToUserDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCompanyDto.html":{},"classes/CreateManagerDto.html":{},"classes/CreatePriceDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomPasswordLengthConstraint.html":{},"injectables/CustomValidationPipe.html":{},"classes/EditProductDto.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PaginationParams.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCompanyDto.html":{},"classes/UpdateManagerDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":630,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["validatorconstraintinterface",{"_index":619,"title":{},"body":{"classes/CustomPasswordLengthConstraint.html":{},"classes/EmailValidationConstraint.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{}}}],["value",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomValidationPipe.html":{},"injectables/ProductsSearchService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1834,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2004,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifypassword",{"_index":329,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":348,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":1994,"title":{},"body":{"properties.html":{}}}],["verystrongpassword",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/UsersEntity.html":{}}}],["viewauthfilter",{"_index":1810,"title":{"classes/ViewAuthFilter.html":{}},"body":{"classes/ViewAuthFilter.html":{},"coverage.html":{}}}],["void",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/EmailValidationConstraint.html":{},"classes/HelperFileLoader.html":{},"interfaces/IValidationResultAsfunction.html":{},"classes/IsManagerAlreadyExistConstraint.html":{},"classes/IsNumberConstraint.html":{},"classes/IsUserAlreadyExistConstraint.html":{},"injectables/LoggerMiddleware.html":{},"classes/NumberValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{},"classes/StringValidationConstraint.html":{},"classes/ViewAuthFilter.html":{},"index.html":{}}}],["where.id",{"_index":1488,"title":{},"body":{"injectables/ProductsService.html":{}}}],["write",{"_index":1962,"title":{},"body":{"index.html":{}}}],["wrong",{"_index":816,"title":{},"body":{"classes/EmailValidationConstraint.html":{},"classes/PhoneValidationConstraint.html":{}}}],["x01",{"_index":826,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["x08\\x0b\\x0c\\x0e",{"_index":827,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["x09\\x0b\\x0c\\x0e",{"_index":831,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["x1f\\x21",{"_index":846,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["x1f\\x21\\x23",{"_index":828,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["x5a\\x53",{"_index":847,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["x5b\\x5d",{"_index":829,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["x7f",{"_index":848,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["x7f])*\")@(?:(?:[a",{"_index":832,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["x7f]|\\\\[\\x01",{"_index":830,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["xlsx",{"_index":1897,"title":{},"body":{"dependencies.html":{}}}],["yes",{"_index":1443,"title":{},"body":{"injectables/ProductsService.html":{},"miscellaneous/functions.html":{}}}],["z0",{"_index":824,"title":{},"body":{"classes/EmailValidationConstraint.html":{}}}],["zoom",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CompaniesModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/ManagersModule.html":{},"modules/PricesModule.html":{},"modules/ProductsModule.html":{},"modules/SentryModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddCompanyToUserDto.html":{"url":"classes/AddCompanyToUserDto.html","title":"class - AddCompanyToUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddCompanyToUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/addCompanyToUser.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                taxpayerIdentificationNumber\n                            \n                            \n                                userEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        taxpayerIdentificationNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2460113920', description: 'ИНН компании'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/addCompanyToUser.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'mail.@mail.ru', description: 'Почта пользователя'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()@EmailValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/addCompanyToUser.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { isNotEmptyMessage } from '../../utils/repeatableConsts/isNotEmptyMessage';\nimport { IsNotEmpty } from 'class-validator';\nimport { StringValidation } from '../../utils/validation/isString.validation';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { EmailValidation } from '../../utils/validation/isEmailValid.validation';\n\nexport class AddCompanyToUserDto {\n  @ApiProperty({\n    example: 'mail.@mail.ru',\n    description: 'Почта пользователя',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  @EmailValidation()\n  userEmail!: string;\n\n  @ApiProperty({\n    example: '2460113920',\n    description: 'ИНН компании',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  taxpayerIdentificationNumber!: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddManagerToUserDto.html":{"url":"classes/AddManagerToUserDto.html","title":"class - AddManagerToUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddManagerToUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/addManagerToUser.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                managerEmail\n                            \n                            \n                                userEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        managerEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'mail.@mail.ru', description: 'Почта менеджера'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()@EmailValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/addManagerToUser.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'mail.@mail.ru', description: 'Почта пользователя'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()@EmailValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/addManagerToUser.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\nimport { EmailValidation } from '../../utils/validation/isEmailValid.validation';\nimport { isNotEmptyMessage } from '../../utils/repeatableConsts/isNotEmptyMessage';\nimport { StringValidation } from '../../utils/validation/isString.validation';\n\nexport class AddManagerToUserDto {\n  @ApiProperty({\n    example: 'mail.@mail.ru',\n    description: 'Почта пользователя',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  @EmailValidation()\n  userEmail!: string;\n\n  @ApiProperty({\n    example: 'mail.@mail.ru',\n    description: 'Почта менеджера',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  @EmailValidation()\n  managerEmail!: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exceptionFilters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getErrorResponse\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/utils/exceptionFilters/http-exception.filter.ts:23\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exceptionFilters/http-exception.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response, Request } from 'express';\nimport { CustomHttpExceptionResponse } from './models/http-exception-response.interface';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost): void {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const errorResponse = exception.getResponse();\n    const errorMessage = this.getErrorResponse(status, errorResponse, request);\n    response.status(status).json(errorMessage);\n  }\n\n  private getErrorResponse = (\n    status: HttpStatus,\n    errorResponse: string | object,\n    request: Request,\n  ): CustomHttpExceptionResponse => ({\n    statusCode: status,\n    error: errorResponse,\n    path: request.url,\n    method: request.method,\n    timeStamp: new Date(),\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCompaniesModule\n\nCompaniesModule\n\nAppModule -->\n\nCompaniesModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nManagersModule\n\nManagersModule\n\nAppModule -->\n\nManagersModule->AppModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nPricesModule\n\nPricesModule\n\nAppModule -->\n\nPricesModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSentryModule\n\nSentryModule\n\nAppModule -->\n\nSentryModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            CompaniesModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            ManagersModule\n                        \n                        \n                            OrdersModule\n                        \n                        \n                            PricesModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            SearchModule\n                        \n                        \n                            SentryModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ManagersModule } from './managers/managers.module';\nimport { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { UsersModule } from './users/users.module';\nimport { EmailConfirmationModule } from './emailConfirmation/emailConfirmation.module';\nimport { ProductsModule } from './products/products.module';\nimport { CompaniesModule } from './companies/companies.module';\nimport { OrdersModule } from './orders/orders.module';\nimport { CategoriesModule } from './categories/categories.module';\nimport { PricesModule } from './prices/prices.module';\nimport { SearchModule } from './search/search.module';\nimport { DatabaseModule } from './database/database.module';\nimport { SentryModule } from './sentry/sentry.module';\nimport * as Sentry from '@sentry/node';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n        PORT: Joi.number(),\n        ELASTICSEARCH_NODE: Joi.string(),\n        ELASTICSEARCH_USERNAME: Joi.string(),\n        ELASTICSEARCH_PASSWORD: Joi.string(),\n        JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        JWT_REFRESH_TOKEN_SECRET: Joi.string().required(),\n        JWT_REFRESH_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n        TWO_FACTOR_AUTHENTICATION_APP_NAME: Joi.string(),\n        JWT_VERIFICATION_TOKEN_SECRET: Joi.string().required(),\n        JWT_VERIFICATION_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_CONFIRMATION_URL: Joi.string().required(),\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n      }),\n    }),\n    SentryModule.forRoot({\n      dsn: 'https://2a32b564d67a4cc0a94d3e4ab5716847@o1182144.ingest.sentry.io/6327156',\n      tracesSampleRate: 1.0,\n      debug: true,\n    }),\n    DatabaseModule,\n    AuthenticationModule,\n    UsersModule,\n    EmailConfirmationModule,\n    ProductsModule,\n    CompaniesModule,\n    OrdersModule,\n    CategoriesModule,\n    PricesModule,\n    SearchModule,\n    ManagersModule,\n  ],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer): void {\n    consumer.apply(Sentry.Handlers.requestHandler()).forRoutes({\n      path: '*',\n      method: RequestMethod.ALL,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                logIn\n                            \n                            \n                                    Public\n                                    Async\n                                logOut\n                            \n                            \n                                    Public\n                                    Async\n                                refresh\n                            \n                            \n                                    Public\n                                    Async\n                                registration\n                            \n                            \n                                    Public\n                                    Async\n                                renderLoginPage\n                            \n                            \n                                    Public\n                                    Async\n                                renderRegistrationPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: IRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Авторизация пользователя'})@HttpCode(200)@UseGuards(LocalAuthenticationGuard)@ApiBasicAuth()@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: IRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Выход пользователя'})@HttpCode(200)@UseGuards(JwtAuthenticationGuard)@Post('logout')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(request: IRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Рефреш токена'})@HttpCode(200)@UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        registration\n                        \n                    \n                \n            \n            \n                \n                    \n                    registration(userData: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Регистрация пользователя'})@HttpCode(200)@Post('registration')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        renderLoginPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderLoginPage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Рендер страницы авторизации'})@HttpCode(200)@Get('login')@Render('auth/login')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        renderRegistrationPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderRegistrationPage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Рендер страницы регистрации'})@HttpCode(200)@Get('registration')@Render('auth/registration')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBasicAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n  Body,\n  Req,\n  Controller,\n  HttpCode,\n  Post,\n  UseGuards,\n  Get,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Render,\n} from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { IRequestWithUser } from './interfaces/requestWithUser.interface';\nimport { LocalAuthenticationGuard } from './guards/localAuthentication.guard';\nimport { UsersService } from '../users/users.service';\nimport { JwtRefreshGuard } from './guards/jwt-refresh.guard';\nimport { EmailConfirmationService } from '../emailConfirmation/emailConfirmation.service';\nimport { UsersEntity } from '../users/users.entity';\nimport { CreateUserDto } from './../users/dto/createUser.dto';\nimport { IRenderTemplate } from './interfaces/renderAuthTemplate.interface';\nimport { JwtAuthenticationGuard } from './guards/jwt-authentication.guard';\n\n@Controller('auth')\n@ApiTags('Аутенфикация пользователя')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class AuthenticationController {\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly emailConfirmationService: EmailConfirmationService,\n  ) {}\n  // DONE\n  @ApiOperation({\n    description: 'Регистрация пользователя',\n  })\n  @HttpCode(200)\n  @Post('registration')\n  public async registration(\n    @Body() userData: CreateUserDto,\n  ): Promise {\n    const newUser = await this.authenticationService.registration(userData);\n    await this.emailConfirmationService.sendVerificationLink(userData.email);\n    return newUser;\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Рендер страницы регистрации',\n  })\n  @HttpCode(200)\n  @Get('registration')\n  @Render('auth/registration')\n  public async renderRegistrationPage(): Promise {\n    return { layout: 'auth', title: 'Регистрация' };\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Рендер страницы авторизации',\n  })\n  @HttpCode(200)\n  @Get('login')\n  @Render('auth/login')\n  public async renderLoginPage(): Promise {\n    return { layout: 'auth', title: 'Авторизация' };\n  }\n  // DONE\n  // Изменил код в if (user.isTwoFactorAuthenticationEnabled) умышленно\n  @ApiOperation({\n    description: 'Авторизация пользователя',\n  })\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @ApiBasicAuth() // По идее этот декораторо только тут пригодится\n  @Post('login')\n  public async logIn(\n    @Req() request: IRequestWithUser,\n  ): Promise {\n    const { user } = request;\n    const accessTokenCookie =\n      await this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      await this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    if (request.res) {\n      request.res.setHeader('Set-Cookie', [\n        accessTokenCookie,\n        refreshTokenCookie,\n      ]);\n    }\n\n    if (user.isTwoFactorAuthenticationEnabled) {\n      return 'user'; // было просто return\n    }\n\n    return user;\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Выход пользователя',\n  })\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('logout')\n  public async logOut(@Req() request: IRequestWithUser): Promise {\n    await this.usersService.removeRefreshToken(request.user.id);\n    if (request.res) {\n      request.res.setHeader(\n        'Set-Cookie',\n        await this.authenticationService.getCookiesForLogOut(),\n      );\n    }\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Рефреш токена',\n  })\n  @HttpCode(200)\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  public async refresh(@Req() request: IRequestWithUser): Promise {\n    const accessTokenCookie =\n      await this.authenticationService.getCookieWithJwtAccessToken(\n        request.user.id,\n      );\n    if (request.res) {\n      request.res.setHeader('Set-Cookie', accessTokenCookie);\n    }\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            JwtTwoFactorStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TwoFactorAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                        \n                            TwoFactorAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { UsersModule } from '../users/users.module';\nimport { AuthenticationController } from './authentication.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtRefreshTokenStrategy } from './strategies/jwt-refresh-token.strategy';\nimport { TwoFactorAuthenticationController } from './twoFactor/twoFactorAuthentication.controller';\nimport { TwoFactorAuthenticationService } from './twoFactor/twoFactorAuthentication.service';\nimport { JwtTwoFactorStrategy } from './strategies/jwt-two-factor.strategy';\nimport { EmailConfirmationModule } from '../emailConfirmation/emailConfirmation.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.register({}),\n    EmailConfirmationModule,\n  ],\n  providers: [\n    AuthenticationService,\n    LocalStrategy,\n    JwtStrategy,\n    JwtRefreshTokenStrategy,\n    TwoFactorAuthenticationService,\n    JwtTwoFactorStrategy,\n  ],\n  controllers: [AuthenticationController, TwoFactorAuthenticationController],\n  exports: [AuthenticationService],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                    Async\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                    Async\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                    Async\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                registration\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number, isSecondFactorAuthenticated)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isSecondFactorAuthenticated\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        registration\n                        \n                    \n                \n            \n            \n                \n                    \n                    registration(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  BadRequestException,\n} from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { ITokenPayload } from './interfaces/tokenPayload.interface';\nimport { UsersEntity } from '../users/users.entity';\nimport { ICookiesFromJwt } from './interfaces/cookiesWithJwt.interface';\nimport { CreateUserDto } from './../users/dto/createUser.dto';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n  // DONE\n  public async registration(userData: CreateUserDto): Promise {\n    const hashedPassword = await bcrypt.hash(userData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...userData,\n        password: hashedPassword,\n      });\n      createdUser.password = undefined;\n      return createdUser;\n    } catch (error) {\n      throw new HttpException(\n        'Что-то пошло не так (registration)',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n  // DONE\n  public async getCookieWithJwtAccessToken(\n    userId: number,\n    isSecondFactorAuthenticated = false,\n  ): Promise {\n    try {\n      const payload: ITokenPayload = { userId, isSecondFactorAuthenticated };\n      const token: string = this.jwtService.sign(payload, {\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n        expiresIn: `${this.configService.get(\n          'JWT_ACCESS_TOKEN_EXPIRATION_TIME',\n        )}s`,\n      });\n      return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n        'JWT_ACCESS_TOKEN_EXPIRATION_TIME',\n      )}`;\n    } catch (error) {\n      throw new BadRequestException(\n        'Что-то пошло не так (getCookieWithJwtAccessToken)',\n      );\n    }\n  }\n  // DONE\n  public async getCookieWithJwtRefreshToken(\n    userId: number,\n  ): Promise {\n    try {\n      const payload: ITokenPayload = { userId };\n      const token = this.jwtService.sign(payload, {\n        secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n        expiresIn: `${this.configService.get(\n          'JWT_REFRESH_TOKEN_EXPIRATION_TIME',\n        )}s`,\n      });\n      const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n        'JWT_REFRESH_TOKEN_EXPIRATION_TIME',\n      )}`;\n      return {\n        cookie,\n        token,\n      };\n    } catch (error) {\n      throw new BadRequestException(\n        'Что-то пошло не так (getCookieWithJwtRefreshToken)',\n      );\n    }\n  }\n  // DONE\n  public async getCookiesForLogOut(): Promise> {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n  // DONE\n  public async getAuthenticatedUser(\n    email: string,\n    plainTextPassword: string,\n  ): Promise {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      if (user.password) {\n        await this.verifyPassword(plainTextPassword, user.password);\n      }\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'USER - Предоставлены неверные учетные данные', // В verifyPassword аналогичная ошибка, чтобы нельзя было собрать базу email\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n  // DONE\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ): Promise {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword,\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'PASSWORD - Предоставлены неверные учетные данные',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CategoriesEntity.html":{"url":"entities/CategoriesEntity.html","title":"entity - CategoriesEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CategoriesEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                products\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductsEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, products => products.category)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ProductsEntity } from './../products/products.entity';\nimport {\n  Column,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('categories')\nexport class CategoriesEntity {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @Column()\n  public title!: string;\n\n  @OneToMany(() => ProductsEntity, (products) => products.category)\n  public products!: ProductsEntity[];\n\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt!: Date;\n\n  @UpdateDateColumn({ type: 'timestamp' })\n  updatedAt!: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { CategoriesEntity } from './categories.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n// import { CategoriesService } from './categories.service';\n// import { CategoriesController } from './categories.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([CategoriesEntity])],\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CompaniesController.html":{"url":"controllers/CompaniesController.html","title":"controller - CompaniesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CompaniesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/companies.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                companies\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createCompany\n                            \n                            \n                                    Public\n                                    Async\n                                deleteCompany\n                            \n                            \n                                    Public\n                                    Async\n                                findAllCompanies\n                            \n                            \n                                    Public\n                                    Async\n                                getCompanyAndHisUsers\n                            \n                            \n                                    Public\n                                    Async\n                                updateCompany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCompany(companyData: CreateCompanyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Создание компании'})@HttpCode(200)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/companies/companies.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyData\n                                    \n                                                CreateCompanyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCompany(taxpayerIdentificationNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Удалить компанию'})@HttpCode(200)@Post('delete')\n                \n            \n\n            \n                \n                    Defined in src/companies/companies.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taxpayerIdentificationNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAllCompanies\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCompanies()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Найти все компании'})@HttpCode(200)@Post('find-all')\n                \n            \n\n            \n                \n                    Defined in src/companies/companies.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getCompanyAndHisUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCompanyAndHisUsers(taxpayerIdentificationNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Найти компанию и связанных пользователей'})@HttpCode(200)@Post('find-one-with-users')\n                \n            \n\n            \n                \n                    Defined in src/companies/companies.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taxpayerIdentificationNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCompany(managerData: UpdateCompanyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Обновить компанию'})@HttpCode(200)@Post('update')\n                \n            \n\n            \n                \n                    Defined in src/companies/companies.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    managerData\n                                    \n                                                UpdateCompanyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  BadRequestException,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  HttpCode,\n} from '@nestjs/common';\nimport { CompaniesService } from './companies.service';\nimport { CompaniesEntity } from './companies.entity';\nimport { UpdateResult } from 'typeorm';\nimport { UpdateCompanyDto } from './dto/update-company.dto';\nimport { CreateCompanyDto } from './dto/create-company.dto';\nimport { ApiTags, ApiOperation } from '@nestjs/swagger';\n\n@Controller('companies')\n@ApiTags('Компании')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class CompaniesController {\n  constructor(private readonly companiesService: CompaniesService) {}\n  // DONE\n  @ApiOperation({\n    description: 'Создание компании',\n  })\n  @HttpCode(200)\n  @Post('create')\n  public async createCompany(\n    @Body() companyData: CreateCompanyDto,\n  ): Promise {\n    return await this.companiesService.createCompany(companyData);\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Найти все компании',\n  })\n  @HttpCode(200)\n  @Post('find-all')\n  public async findAllCompanies(): Promise {\n    return await this.companiesService.findAllCompanies();\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Обновить компанию',\n  })\n  @HttpCode(200)\n  @Post('update')\n  public async updateCompany(\n    @Body() managerData: UpdateCompanyDto,\n  ): Promise {\n    return await this.companiesService.updateCompany(managerData);\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Найти компанию и связанных пользователей',\n  })\n  @HttpCode(200)\n  @Post('find-one-with-users')\n  public async getCompanyAndHisUsers(\n    @Body() taxpayerIdentificationNumber: string,\n  ): Promise {\n    return await this.companiesService.getCompanyByTaxpayerNumWithAllUsers(\n      taxpayerIdentificationNumber,\n    );\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Удалить компанию',\n  })\n  @HttpCode(200)\n  @Post('delete')\n  public async deleteCompany(\n    @Body() taxpayerIdentificationNumber: string,\n  ): Promise {\n    await this.companiesService.deleteCompany(taxpayerIdentificationNumber);\n    return 'Компания была удалена';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CompaniesEntity.html":{"url":"entities/CompaniesEntity.html","title":"entity - CompaniesEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CompaniesEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/companies.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                companyName\n                            \n                            \n                                    Public\n                                companyTelephoneNumbers\n                            \n                            \n                                createdAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                shipmentAdditionalHouseNumber\n                            \n                            \n                                    Public\n                                shipmentCity\n                            \n                            \n                                    Public\n                                shipmentHouseNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                shipmentOffice\n                            \n                            \n                                    Public\n                                shipmentStreet\n                            \n                            \n                                    Public\n                                taxpayerIdentificationNumber\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                    Public\n                                    Optional\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        companyName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ООО \"СПМК\"', description: 'Название компании'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/companies.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        companyTelephoneNumbers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '89998887766', description: 'Телефон компании'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/companies.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '01.01.2021', description: 'Дата создания сущности'})@CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/companies.entity.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1', description: 'Генерирующийся ID'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/companies.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipmentAdditionalHouseNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Корпус 5', description: 'Дополнительные данные для доставки', nullable: true})@Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/companies.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        shipmentCity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Красноярск', description: 'Город доставки'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/companies.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        shipmentHouseNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '20В', description: 'Дом доставки'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/companies.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipmentOffice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '211', description: 'Офис доставки', nullable: true})@Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/companies.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        shipmentStreet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Баумана', description: 'Улица доставки'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/companies.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taxpayerIdentificationNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2460113920', description: 'ИНН компании'})@Column({type: 'text', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/companies.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '01.01.2021', description: 'Дата обновления сущности', nullable: true})@Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/companies.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Сущность пользователя', description: 'One To Many', nullable: true, type: UsersEntity})@OneToMany(undefined, users => users.company)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/companies.entity.ts:112\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  OneToMany,\n} from 'typeorm';\nimport { UsersEntity } from '../users/users.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Entity('companies')\nexport class CompaniesEntity {\n  @ApiProperty({\n    example: '1',\n    description: 'Генерирующийся ID',\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiProperty({\n    example: 'ООО \"СПМК\"',\n    description: 'Название компании',\n  })\n  @Column({ type: 'text' })\n  public companyName!: string;\n\n  @ApiProperty({\n    example: '2460113920',\n    description: 'ИНН компании',\n  })\n  @Column({\n    type: 'text',\n    unique: true,\n  })\n  public taxpayerIdentificationNumber!: string;\n\n  @ApiProperty({\n    example: '89998887766',\n    description: 'Телефон компании',\n  })\n  @Column({ type: 'text' })\n  public companyTelephoneNumbers!: string;\n\n  @ApiProperty({\n    example: 'Красноярск',\n    description: 'Город доставки',\n  })\n  @Column({ type: 'text' })\n  public shipmentCity!: string;\n\n  @ApiProperty({\n    example: 'Баумана',\n    description: 'Улица доставки',\n  })\n  @Column({ type: 'text' })\n  public shipmentStreet!: string;\n\n  @ApiProperty({\n    example: '20В',\n    description: 'Дом доставки',\n  })\n  @Column({ type: 'text' })\n  public shipmentHouseNumber!: string;\n\n  @ApiProperty({\n    example: 'Корпус 5',\n    description: 'Дополнительные данные для доставки',\n    nullable: true,\n  })\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  public shipmentAdditionalHouseNumber?: string;\n\n  @ApiProperty({\n    example: '211',\n    description: 'Офис доставки',\n    nullable: true,\n  })\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  public shipmentOffice?: string;\n\n  @ApiProperty({\n    example: '01.01.2021',\n    description: 'Дата создания сущности',\n  })\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt!: Date;\n\n  @ApiProperty({\n    example: '01.01.2021',\n    description: 'Дата обновления сущности',\n    nullable: true,\n  })\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  updatedAt?: Date;\n\n  @ApiProperty({\n    example: 'Сущность пользователя',\n    description: 'One To Many',\n    nullable: true,\n    type: UsersEntity,\n  })\n  @OneToMany(() => UsersEntity, (users) => users.company)\n  public users?: UsersEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CompaniesModule.html":{"url":"modules/CompaniesModule.html","title":"module - CompaniesModule","body":"\n                   \n\n\n\n\n    Modules\n    CompaniesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CompaniesModule\n\n\n\ncluster_CompaniesModule_providers\n\n\n\ncluster_CompaniesModule_exports\n\n\n\n\nCompaniesService \n\nCompaniesService \n\n\n\nCompaniesModule\n\nCompaniesModule\n\nCompaniesService  -->\n\nCompaniesModule->CompaniesService \n\n\n\n\n\nCompaniesService\n\nCompaniesService\n\nCompaniesModule -->\n\nCompaniesService->CompaniesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/companies/companies.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CompaniesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CompaniesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CompaniesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CompaniesEntity } from './companies.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\nimport { CompaniesService } from './companies.service';\nimport { CompaniesController } from './companies.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([CompaniesEntity])],\n  controllers: [CompaniesController],\n  providers: [CompaniesService],\n  exports: [CompaniesService],\n})\nexport class CompaniesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CompaniesService.html":{"url":"injectables/CompaniesService.html","title":"injectable - CompaniesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CompaniesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/companies.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createCompany\n                            \n                            \n                                    Public\n                                    Async\n                                deleteCompany\n                            \n                            \n                                    Public\n                                    Async\n                                findAllCompanies\n                            \n                            \n                                    Public\n                                    Async\n                                findCompanyByTaxpayerNumber\n                            \n                            \n                                    Public\n                                    Async\n                                getCompanyByTaxpayerNumWithAllUsers\n                            \n                            \n                                    Public\n                                    Async\n                                updateCompany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(companyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/companies/companies.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        companyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCompany(companyData: CreateCompanyDto)\n                \n            \n\n\n            \n                \n                    Defined in src/companies/companies.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyData\n                                    \n                                                CreateCompanyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCompany(taxpayerIdentificationNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in src/companies/companies.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taxpayerIdentificationNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAllCompanies\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCompanies()\n                \n            \n\n\n            \n                \n                    Defined in src/companies/companies.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findCompanyByTaxpayerNumber\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCompanyByTaxpayerNumber(taxpayerIdentificationNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in src/companies/companies.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taxpayerIdentificationNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getCompanyByTaxpayerNumWithAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCompanyByTaxpayerNumWithAllUsers(taxpayerIdentificationNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in src/companies/companies.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taxpayerIdentificationNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCompany(companyData: UpdateCompanyDto)\n                \n            \n\n\n            \n                \n                    Defined in src/companies/companies.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyData\n                                    \n                                                UpdateCompanyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { UpdateCompanyDto } from './dto/update-company.dto';\nimport { CreateCompanyDto } from './dto/create-company.dto';\nimport { CompaniesEntity } from './companies.entity';\n\n@Injectable()\nexport class CompaniesService {\n  constructor(\n    @InjectRepository(CompaniesEntity)\n    private readonly companyRepository: Repository,\n  ) {}\n  // DONE\n  public async createCompany(\n    @Body() companyData: CreateCompanyDto,\n  ): Promise {\n    try {\n      const newCompany = this.companyRepository.create(companyData);\n      await this.companyRepository.save(newCompany);\n      return newCompany;\n    } catch (e) {\n      throw new BadRequestException('Что-то пошло не так (createCompany)');\n    }\n  }\n  // DONE\n  public async findAllCompanies(): Promise {\n    try {\n      return await this.companyRepository.find({});\n    } catch (e) {\n      throw new BadRequestException('Что-то пошло не так (findAllCompanies)');\n    }\n  }\n  // DONE\n  // Отрабатывает без блока catch, чтобы не ругался TS и можно было использовать компанию в user.service\n  public async findCompanyByTaxpayerNumber(\n    taxpayerIdentificationNumber: string,\n  ): Promise {\n    const _foundCompany = await this.companyRepository.findOne({\n      taxpayerIdentificationNumber,\n    });\n    if (_foundCompany) {\n      return _foundCompany;\n    }\n  }\n  // DONE\n  // Альтернативная реализация через repository.save в updateManager\n  public async updateCompany(\n    companyData: UpdateCompanyDto,\n  ): Promise {\n    const _foundCompany = await this.companyRepository.findOne({\n      where: {\n        taxpayerIdentificationNumber: companyData.taxpayerIdentificationNumber,\n      },\n    });\n    if (!_foundCompany) {\n      throw new BadRequestException('Компании с таким ИНН не существует');\n    }\n    try {\n      companyData.updatedAt = new Date();\n      return await this.companyRepository.update(_foundCompany.id, companyData);\n    } catch (e) {\n      throw new BadRequestException('Что-то пошло не так (updateCompany)');\n    }\n  }\n  // DONE\n  public async getCompanyByTaxpayerNumWithAllUsers(\n    taxpayerIdentificationNumber: string,\n  ): Promise {\n    const _foundCompany = await this.companyRepository.findOne(\n      taxpayerIdentificationNumber,\n      { relations: ['users'] },\n    );\n    if (!_foundCompany) {\n      throw new BadRequestException('Компании с таким ИНН не существует');\n    }\n    try {\n      return _foundCompany;\n    } catch (e) {\n      throw new BadRequestException(\n        'Что-то пошло не так (getCompanyByTaxpayerNumWithAllUsers)',\n      );\n    }\n  }\n  // DONE\n  public async deleteCompany(\n    taxpayerIdentificationNumber: string,\n  ): Promise {\n    const _foundCompany = await this.companyRepository.findOne(\n      taxpayerIdentificationNumber,\n    );\n    if (!_foundCompany) {\n      throw new BadRequestException('Компании с таким ИНН не существует');\n    }\n    try {\n      await this.companyRepository.remove(_foundCompany);\n    } catch (e) {\n      throw new BadRequestException('Что-то пошло не так (deleteCompany)');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/dto/confirmEmail.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ХХХХХХХХХХХХХХХ', description: 'Токен подтверждения почты'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emailConfirmation/dto/confirmEmail.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { StringValidation } from '../../utils/validation/isString.validation';\nimport { isNotEmptyMessage } from '../../utils/repeatableConsts/isNotEmptyMessage';\nimport { IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ConfirmEmailDto {\n  @ApiProperty({\n    example: 'ХХХХХХХХХХХХХХХ',\n    description: 'Токен подтверждения почты',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  token!: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCompanyDto.html":{"url":"classes/CreateCompanyDto.html","title":"class - CreateCompanyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCompanyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/dto/create-company.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                companyName\n                            \n                            \n                                companyTelephoneNumbers\n                            \n                            \n                                    Optional\n                                shipmentAdditionalHouseNumber\n                            \n                            \n                                shipmentCity\n                            \n                            \n                                shipmentHouseNumber\n                            \n                            \n                                    Optional\n                                shipmentOffice\n                            \n                            \n                                shipmentStreet\n                            \n                            \n                                taxpayerIdentificationNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        companyName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ООО \"СПМК\"', description: 'Название компании'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        companyTelephoneNumbers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '89998887766', description: 'Телефон компании'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()@PhoneValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        shipmentAdditionalHouseNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Корпус 5', description: 'Дополнительные данные для доставки'})@ApiPropertyOptional()@IsOptional()@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shipmentCity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Красноярск', description: 'Город доставки'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shipmentHouseNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '20В', description: 'Дом доставки'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        shipmentOffice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '211', description: 'Офис доставки'})@ApiPropertyOptional()@IsOptional()@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shipmentStreet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Баумана', description: 'Улица доставки'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        taxpayerIdentificationNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2460113920', description: 'ИНН компании'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional } from 'class-validator';\nimport { StringValidation } from '../../utils/validation/isString.validation';\nimport { isNotEmptyMessage } from '../../utils/repeatableConsts/isNotEmptyMessage';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { PhoneValidation } from '../../utils/validation/isPhoneValid.validation';\n\nexport class CreateCompanyDto {\n  @ApiProperty({\n    example: 'ООО \"СПМК\"',\n    description: 'Название компании',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  companyName!: string;\n\n  @ApiProperty({\n    example: '2460113920',\n    description: 'ИНН компании',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  taxpayerIdentificationNumber!: string;\n\n  @ApiProperty({\n    example: '89998887766',\n    description: 'Телефон компании',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  @PhoneValidation()\n  companyTelephoneNumbers!: string;\n\n  @ApiProperty({\n    example: 'Красноярск',\n    description: 'Город доставки',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  shipmentCity!: string;\n\n  @ApiProperty({\n    example: 'Баумана',\n    description: 'Улица доставки',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  shipmentStreet!: string;\n\n  @ApiProperty({\n    example: '20В',\n    description: 'Дом доставки',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  shipmentHouseNumber!: string;\n\n  @ApiProperty({\n    example: 'Корпус 5',\n    description: 'Дополнительные данные для доставки',\n  })\n  @ApiPropertyOptional()\n  @IsOptional()\n  @StringValidation()\n  shipmentAdditionalHouseNumber?: string;\n\n  @ApiProperty({\n    example: '211',\n    description: 'Офис доставки',\n  })\n  @ApiPropertyOptional()\n  @IsOptional()\n  @StringValidation()\n  shipmentOffice?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManagerDto.html":{"url":"classes/CreateManagerDto.html","title":"class - CreateManagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/dto/createManager.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'email@gmail.com', description: 'Почта менеджера'})@IsNotEmpty({message: isNotEmptyMessage})@EmailValidation()@IsManagerAlreadyExist()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/dto/createManager.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Big', description: 'Имя менеджера'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/dto/createManager.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Lebowski', description: 'Фамилия менеджера'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/dto/createManager.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+76664442200', description: 'Телефон менеджера'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()@PhoneValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/dto/createManager.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\nimport { PhoneValidation } from './../../utils/validation/isPhoneValid.validation';\nimport { isNotEmptyMessage } from '../../utils/repeatableConsts/isNotEmptyMessage';\nimport { StringValidation } from '../../utils/validation/isString.validation';\nimport { EmailValidation } from '../../utils/validation/isEmailValid.validation';\nimport { IsManagerAlreadyExist } from '../../utils/validation/isManagerExist.validation';\n\nexport class CreateManagerDto {\n  @ApiProperty({\n    example: 'email@gmail.com',\n    description: 'Почта менеджера',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @EmailValidation()\n  @IsManagerAlreadyExist()\n  email!: string;\n\n  @ApiProperty({\n    example: '+76664442200',\n    description: 'Телефон менеджера',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  @PhoneValidation()\n  phoneNumber!: string;\n\n  @ApiProperty({\n    example: 'Big',\n    description: 'Имя менеджера',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  firstName!: string;\n\n  @ApiProperty({\n    example: 'Lebowski',\n    description: 'Фамилия менеджера',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  lastName!: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePriceDto.html":{"url":"classes/CreatePriceDto.html","title":"class - CreatePriceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePriceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prices/dto/create-price.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                file\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'file.xls', description: 'Файл для загрузки'})@ApiPropertyOptional()@IsOptional()@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/prices/dto/create-price.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Прайс от 01.01.2021', description: 'Название для прайса'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/prices/dto/create-price.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { isNotEmptyMessage } from '../../utils/repeatableConsts/isNotEmptyMessage';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\nimport { StringValidation } from '../../utils/validation/isString.validation';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePriceDto {\n  @ApiProperty({\n    example: 'file.xls',\n    description: 'Файл для загрузки',\n  })\n  @ApiPropertyOptional()\n  @IsOptional()\n  @StringValidation()\n  file?: string;\n\n  @ApiProperty({\n    example: 'Прайс от 01.01.2021',\n    description: 'Название для прайса',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  title!: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/createProduct.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                productCode\n                            \n                            \n                                productPrice\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        productCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ПН00140', description: 'Артикул товара'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/createProduct.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '420', description: 'Цена товара'})@IsNotEmpty({message: isNotEmptyMessage})@NumberValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/createProduct.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Перчатки нитриловые', description: 'Наименование товара'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/createProduct.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\nimport { isNotEmptyMessage } from '../../utils/repeatableConsts/isNotEmptyMessage';\nimport { NumberValidation } from '../../utils/validation/isNumber.validation';\nimport { StringValidation } from '../../utils/validation/isString.validation';\n\nexport class CreateProductDto {\n  @ApiProperty({\n    example: 'ПН00140',\n    description: 'Артикул товара',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  productCode!: string;\n\n  @ApiProperty({\n    example: 'Перчатки нитриловые',\n    description: 'Наименование товара',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  title!: string;\n\n  @ApiProperty({\n    example: '420',\n    description: 'Цена товара',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @NumberValidation()\n  productPrice!: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/createUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'mail@mail.ru', description: 'Почта пользователя'})@IsNotEmpty({message: isNotEmptyMessage})@EmailValidation()@IsUserAlreadyExist()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Pavel', description: 'Имя пользователя'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'verystrongpassword', description: 'Пароль пользователя'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()@CustomPasswordLength()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { isNotEmptyMessage } from '../../utils/repeatableConsts/isNotEmptyMessage';\nimport { IsNotEmpty } from 'class-validator';\nimport { CustomPasswordLength } from '../../utils/validation/passwordLength.validation';\nimport { IsUserAlreadyExist } from '../../utils/validation/isUserExist.validation';\nimport { EmailValidation } from '../../utils/validation/isEmailValid.validation';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { StringValidation } from '../../utils/validation/isString.validation';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'mail@mail.ru',\n    description: 'Почта пользователя',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @EmailValidation()\n  @IsUserAlreadyExist()\n  email!: string;\n\n  @ApiProperty({\n    example: 'Pavel',\n    description: 'Имя пользователя',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  firstName!: string;\n\n  @ApiProperty({\n    example: 'verystrongpassword',\n    description: 'Пароль пользователя',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  @CustomPasswordLength()\n  password!: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomHttpExceptionResponse.html":{"url":"interfaces/CustomHttpExceptionResponse.html","title":"interface - CustomHttpExceptionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomHttpExceptionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exceptionFilters/models/http-exception-response.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpExceptionResponse\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            timeStamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeStamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface HttpExceptionResponse {\n  statusCode: number;\n  error: string | object;\n}\n\nexport interface CustomHttpExceptionResponse extends HttpExceptionResponse {\n  path: string;\n  method: string;\n  timeStamp: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomPasswordLengthConstraint.html":{"url":"classes/CustomPasswordLengthConstraint.html","title":"class - CustomPasswordLengthConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomPasswordLengthConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validation/passwordLength.validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/passwordLength.validation.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/passwordLength.validation.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport { IValidationResultAsfunction } from '../interfaces/validationResultAsFunction.interface';\n\n// Custom validation for password length\n@ValidatorConstraint({ async: false })\nexport class CustomPasswordLengthConstraint\n  implements ValidatorConstraintInterface\n{\n  validate(text: string, validationArguments: ValidationArguments): boolean {\n    if (typeof text !== 'string') {\n      return true;\n    }\n    return (\n      text.length >= validationArguments.constraints[0] &&\n      text.length \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomValidationPipe.html":{"url":"injectables/CustomValidationPipe.html","title":"injectable - CustomValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validation/customValidation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildError\n                            \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        buildError\n                        \n                    \n                \n            \n            \n                \n                    \n                    buildError(errors: any)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/customValidation.pipe.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: any)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/customValidation.pipe.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/customValidation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  ArgumentMetadata,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\nimport { HttpException } from '@nestjs/common/exceptions/http.exception';\n\n@Injectable()\nexport class CustomValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata): Promise {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new HttpException(\n        {\n          message: 'Ошибка в валидации данных | Input data validation failed',\n          errors: this.buildError(errors),\n        },\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return value;\n  }\n\n  private buildError(errors: any): object {\n    const result: any = {};\n    errors.forEach((el: any) => {\n      const prop = el.property;\n      Object.entries(el.constraints).forEach((constraint) => {\n        result[\n          prop + ' - ' + 'декоратор ' + constraint[0]\n        ] = `${constraint[1]}`;\n      });\n    });\n    return result;\n  }\n\n  private toValidate(metatype: any): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        synchronize: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditProductDto.html":{"url":"classes/EditProductDto.html","title":"class - EditProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/updateProduct.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                producerPrice\n                            \n                            \n                                productCode\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        producerPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '420', description: 'Цена товара'})@ApiPropertyOptional()@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()@IsOptional()@ValidateIf(o => o.producerPrice)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/updateProduct.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ПН00140', description: 'Артикул товара'})@StringValidation()@IsNotEmpty({message: isNotEmptyMessage})@ValidateIf(o => o.productCode)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/updateProduct.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Перчатки нитриловые', description: 'Наименование товара'})@ApiPropertyOptional()@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()@IsOptional()@ValidateIf(o => o.title)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/updateProduct.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { isNotEmptyMessage } from '../../utils/repeatableConsts/isNotEmptyMessage';\nimport { StringValidation } from '../../utils/validation/isString.validation';\nimport { IsNotEmpty, ValidateIf, IsOptional } from 'class-validator';\n\n// Эта DTO не испоьлзуется НИГДЕ, просто оставил для вариации с ValidateIf (больше нигде такого нет)\nexport class EditProductDto {\n  @ApiProperty({\n    example: 'ПН00140',\n    description: 'Артикул товара',\n  })\n  @StringValidation()\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @ValidateIf((o) => o.productCode)\n  productCode!: string;\n\n  @ApiProperty({\n    example: 'Перчатки нитриловые',\n    description: 'Наименование товара',\n  })\n  @ApiPropertyOptional()\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  @IsOptional()\n  @ValidateIf((o) => o.title)\n  title!: string;\n\n  @ApiProperty({\n    example: '420',\n    description: 'Цена товара',\n  })\n  @ApiPropertyOptional()\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  @IsOptional()\n  @ValidateIf((o) => o.producerPrice)\n  producerPrice!: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailConfirmationController.html":{"url":"controllers/EmailConfirmationController.html","title":"controller - EmailConfirmationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailConfirmationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/emailConfirmation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-confirmation\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirm\n                            \n                            \n                                    Public\n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmationData: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Подтверждение почты по ссылке'})@HttpCode(200)@Post('confirm')\n                \n            \n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationData\n                                    \n                                                ConfirmEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(request: IRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Выслать повторно ссылку для подтверждения'})@HttpCode(200)@Post('resend-confirmation-link')\n                \n            \n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Post,\n  Req,\n  Body,\n  HttpCode,\n} from '@nestjs/common';\nimport { ConfirmEmailDto } from './dto/confirmEmail.dto';\nimport { EmailConfirmationService } from './emailConfirmation.service';\nimport { IRequestWithUser } from '../authentication/interfaces/requestWithUser.interface';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@Controller('email-confirmation')\n@ApiTags('Подтверждение почты')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class EmailConfirmationController {\n  constructor(\n    private readonly emailConfirmationService: EmailConfirmationService,\n  ) {}\n  // DONE\n  @ApiOperation({\n    description: 'Подтверждение почты по ссылке',\n  })\n  @HttpCode(200)\n  @Post('confirm')\n  // @Render('email/confirm')\n  public async confirm(\n    @Body() confirmationData: ConfirmEmailDto,\n  ): Promise {\n    const email = await this.emailConfirmationService.decodeConfirmationToken(\n      confirmationData.token,\n    );\n    await this.emailConfirmationService.confirmEmail(email);\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Выслать повторно ссылку для подтверждения',\n  })\n  @HttpCode(200)\n  @Post('resend-confirmation-link')\n  public async resendConfirmationLink(\n    @Req() request: IRequestWithUser,\n  ): Promise {\n    await this.emailConfirmationService.resendConfirmationLink(request.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EmailConfirmationGuard.html":{"url":"guards/EmailConfirmationGuard.html","title":"guard - EmailConfirmationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EmailConfirmationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/emailConfirmation/guards/emailConfirmation.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/guards/emailConfirmation.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { IRequestWithUser } from '../../authentication/interfaces/requestWithUser.interface';\n\n@Injectable()\nexport class EmailConfirmationGuard implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    const request: IRequestWithUser = context.switchToHttp().getRequest();\n\n    if (!request.user?.isEmailConfirmed) {\n      throw new UnauthorizedException(\n        'Сперва подтвердите вашу почту | Confirm your email first',\n      );\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailConfirmationModule.html":{"url":"modules/EmailConfirmationModule.html","title":"module - EmailConfirmationModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailConfirmationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailConfirmationModule_imports\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emailConfirmation/emailConfirmation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailConfirmationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailConfirmationService } from './emailConfirmation.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailModule } from '../email/email.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { EmailConfirmationController } from './emailConfirmation.controller';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [ConfigModule, EmailModule, JwtModule.register({}), UsersModule],\n  providers: [EmailConfirmationService],\n  exports: [EmailConfirmationService],\n  controllers: [EmailConfirmationController],\n})\nexport class EmailConfirmationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailConfirmationService.html":{"url":"injectables/EmailConfirmationService.html","title":"injectable - EmailConfirmationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailConfirmationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/emailConfirmation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Public\n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Public\n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Public\n                                    Async\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, emailService: EmailService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/emailConfirmation/emailConfirmation.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IVerificationTokenPayload } from './interfaces/verificationTokenPayload.interface';\nimport { EmailService } from '../email/email.service';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class EmailConfirmationService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    private readonly usersService: UsersService,\n  ) {}\n  // DONE (убрал изначальный return)\n  public async sendVerificationLink(email: string): Promise {\n    try {\n      const payload: IVerificationTokenPayload = { email };\n      const token = this.jwtService.sign(payload, {\n        secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n        expiresIn: `${this.configService.get(\n          'JWT_VERIFICATION_TOKEN_EXPIRATION_TIME',\n        )}s`,\n      });\n\n      const url = `${this.configService.get(\n        'EMAIL_CONFIRMATION_URL',\n      )}?token=${token}`;\n\n      const text = `Спасибо за регистрацию! Для подтверждения Вашего аккаунт, перейдите по ссылке: ${url}`;\n\n      await this.emailService.sendMail({\n        to: email,\n        subject: 'Подтверждение почты',\n        text,\n      });\n    } catch (error) {\n      throw new BadRequestException(\n        'Что-то пошло не так (sendVerificationLink)',\n      );\n    }\n  }\n  // DONE\n  public async decodeConfirmationToken(token: string): Promise {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n      });\n\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n      throw new BadRequestException();\n    } catch (error: any) {\n      if (error?.name === 'TokenExpiredError') {\n        throw new BadRequestException('Время жизни токена истекло');\n      }\n      throw new BadRequestException('Неверный токен');\n    }\n  }\n  // DONE\n  public async confirmEmail(email: string): Promise {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      if (user.isEmailConfirmed) {\n        throw new BadRequestException('Почта уже подтвержденна');\n      }\n      await this.usersService.markEmailAsConfirmed(email);\n    } catch (error) {\n      throw new BadRequestException('Что-то пошло не так (confirmEmail)');\n    }\n  }\n  // DONE\n  public async resendConfirmationLink(userId: number): Promise {\n    try {\n      const user = await this.usersService.getById(userId);\n      if (user.isEmailConfirmed) {\n        throw new BadRequestException('Почта уже подтвержденна');\n      }\n      await this.sendVerificationLink(user.email);\n    } catch (error) {\n      throw new BadRequestException(\n        'Что-то пошло не так (resendConfirmationLink)',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException } from '@nestjs/common';\nimport { createTransport } from 'nodemailer';\nimport { ConfigService } from '@nestjs/config';\nimport * as Mail from 'nodemailer/lib/mailer';\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      service: this.configService.get('EMAIL_SERVICE'),\n      auth: {\n        user: this.configService.get('EMAIL_USER'),\n        pass: this.configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n  // DONE (убрал изначальный return)\n  public async sendMail(options: Mail.Options): Promise {\n    try {\n      await this.nodemailerTransport.sendMail(options);\n    } catch (error) {\n      throw new BadRequestException('Что-то пошло не так (sendMail)');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailValidationConstraint.html":{"url":"classes/EmailValidationConstraint.html","title":"class - EmailValidationConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailValidationConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validation/isEmailValid.validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/isEmailValid.validation.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(email: string, validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/isEmailValid.validation.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n// Custom validation for password length\n@ValidatorConstraint({ async: false })\nexport class EmailValidationConstraint implements ValidatorConstraintInterface {\n  validate(email: string, validationArguments: ValidationArguments): any {\n    if (typeof email !== 'string') {\n      return false;\n    }\n    return email.match(validationArguments.constraints[0]);\n  }\n\n  defaultMessage(validationArguments: ValidationArguments): string {\n    return (\n      'Неверный формат почты (' +\n      validationArguments.value +\n      ') | ' +\n      'Wrong email format (' +\n      validationArguments.value +\n      ')'\n    );\n  }\n}\n\nexport function EmailValidation(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string): void {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [\n        /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/,\n      ],\n      validator: EmailValidationConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prices/dto/fileUpload.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/prices/dto/fileUpload.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Express } from 'express';\n\nexport class FileUploadDto {\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file!: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HelperFileLoader.html":{"url":"classes/HelperFileLoader.html","title":"class - HelperFileLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HelperFileLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/fileloader/HelperFileLoader.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                path\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                customFileName\n                            \n                            \n                                    Static\n                                destinationPath\n                            \n                            \n                                    Static\n                                fileFilterPrices\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    path\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/fileloader/HelperFileLoader.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        customFileName\n                        \n                    \n                \n            \n            \n                \n                    \n                    customFileName(_req: IncomingMessage, file: IFileFormatForDownload, cb: FileNameAndPathCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/fileloader/HelperFileLoader.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _req\n                                    \n                                            IncomingMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                                IFileFormatForDownload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cb\n                                    \n                                                FileNameAndPathCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        destinationPath\n                        \n                    \n                \n            \n            \n                \n                    \n                    destinationPath(_req: IncomingMessage, _file: IFileFormatForDownload, cb: FileNameAndPathCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/fileloader/HelperFileLoader.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _req\n                                    \n                                            IncomingMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _file\n                                    \n                                                IFileFormatForDownload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cb\n                                    \n                                                FileNameAndPathCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fileFilterPrices\n                        \n                    \n                \n            \n            \n                \n                    \n                    fileFilterPrices(_req: IncomingMessage, file: IFileFormatForDownload, cb: FileFilterCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/fileloader/HelperFileLoader.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _req\n                                    \n                                            IncomingMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                                IFileFormatForDownload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cb\n                                    \n                                                FileFilterCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        path\n                    \n                \n\n\n                \n                    \n                        setpath(_path: string)\n                    \n                \n                            \n                                \n                                    Defined in src/utils/fileloader/HelperFileLoader.ts:14\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            _path\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import {\n  FileNameAndPathCallback,\n  FileFilterCallback,\n} from './../types/fileLoader.types';\nimport { IFileFormatForDownload } from '../interfaces/fileFormatForDownload.interface';\nimport { HttpException, HttpStatus } from '@nestjs/common';\nimport { IncomingMessage } from 'http';\n\nconst publicPath = './public';\nlet path: string = publicPath;\n\nexport class HelperFileLoader {\n  path!: string;\n  static set path(_path: string) {\n    path = publicPath + _path;\n  }\n\n  public static customFileName(\n    _req: IncomingMessage,\n    file: IFileFormatForDownload,\n    cb: FileNameAndPathCallback,\n  ): void {\n    const originalName = file.originalname.split('.');\n    const fileExtension = originalName[originalName.length - 1];\n    const dateAsPartForName = new Date();\n    const splitDateForName = dateAsPartForName\n      .toISOString()\n      .slice(0, 19)\n      .replace(/-|:/g, '');\n    cb(null, `${splitDateForName}.${fileExtension}`);\n  }\n\n  public static destinationPath(\n    _req: IncomingMessage,\n    _file: IFileFormatForDownload,\n    cb: FileNameAndPathCallback,\n  ): void {\n    cb(null, path);\n  }\n\n  public static fileFilterPrices(\n    _req: IncomingMessage,\n    file: IFileFormatForDownload,\n    cb: FileFilterCallback,\n  ): void {\n    if (!file.originalname.match(/\\.(xlsx|xls)$/)) {\n      const error = new HttpException(\n        {\n          status: HttpStatus.BAD_REQUEST,\n          error: 'Вы пытаетесь загрузить неверный формат',\n        },\n        HttpStatus.BAD_REQUEST,\n      );\n      return cb(error, false);\n    }\n    cb(null, true);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/productsCache/httpCache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/products/productsCache/httpCache.interceptor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CACHE_KEY_METADATA,\n  CacheInterceptor,\n  ExecutionContext,\n  Injectable,\n} from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n  trackBy(context: ExecutionContext): string | undefined {\n    const cacheKey = this.reflector.get(\n      CACHE_KEY_METADATA,\n      context.getHandler(),\n    );\n\n    if (cacheKey) {\n      const request = context.switchToHttp().getRequest();\n      return `${cacheKey}-${request._parsedUrl.query}`;\n    }\n\n    return super.trackBy(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpExceptionResponse.html":{"url":"interfaces/HttpExceptionResponse.html","title":"interface - HttpExceptionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HttpExceptionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exceptionFilters/models/http-exception-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     string | object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface HttpExceptionResponse {\n  statusCode: number;\n  error: string | object;\n}\n\nexport interface CustomHttpExceptionResponse extends HttpExceptionResponse {\n  path: string;\n  method: string;\n  timeStamp: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/I2faGenerate.html":{"url":"interfaces/I2faGenerate.html","title":"interface - I2faGenerate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  I2faGenerate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interfaces/2faGenerate.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            otpauthUrl\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        otpauthUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        otpauthUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface I2faGenerate {\n  secret: string;\n  otpauthUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICookiesFromJwt.html":{"url":"interfaces/ICookiesFromJwt.html","title":"interface - ICookiesFromJwt","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICookiesFromJwt\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interfaces/cookiesWithJwt.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cookie\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cookie\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cookie:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ICookiesFromJwt {\n  cookie: string;\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFileFormatForDownload.html":{"url":"interfaces/IFileFormatForDownload.html","title":"interface - IFileFormatForDownload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFileFormatForDownload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/fileFormatForDownload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            encoding\n                                        \n                                \n                                \n                                        \n                                            fieldname\n                                        \n                                \n                                \n                                        \n                                            mimetype\n                                        \n                                \n                                \n                                        \n                                            originalname\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        originalname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IFileFormatForDownload {\n  fieldname: string;\n  originalname: string;\n  encoding: string;\n  mimetype: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IQrCodeStream.html":{"url":"interfaces/IQrCodeStream.html","title":"interface - IQrCodeStream","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IQrCodeStream\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interfaces/qrCodeStream.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            otpauthUrl\n                                        \n                                \n                                \n                                        \n                                            stream\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        otpauthUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        otpauthUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stream\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stream:     Response\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Response\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IQrCodeStream {\n  stream: Response;\n  otpauthUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderTemplate.html":{"url":"interfaces/IRenderTemplate.html","title":"interface - IRenderTemplate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRenderTemplate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interfaces/renderAuthTemplate.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            layout\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        layout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        layout:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IRenderTemplate {\n  layout: string;\n  title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRequestWithUser.html":{"url":"interfaces/IRequestWithUser.html","title":"interface - IRequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interfaces/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UsersEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UsersEntity\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { UsersEntity } from '../../users/users.entity';\n\nexport interface IRequestWithUser extends Request {\n  user: UsersEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITokenPayload.html":{"url":"interfaces/ITokenPayload.html","title":"interface - ITokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interfaces/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            isSecondFactorAuthenticated\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isSecondFactorAuthenticated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isSecondFactorAuthenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITokenPayload {\n  userId: number;\n  isSecondFactorAuthenticated?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IValidationResultAsfunction.html":{"url":"interfaces/IValidationResultAsfunction.html","title":"interface - IValidationResultAsfunction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IValidationResultAsfunction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/validationResultAsFunction.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [object: , propertyName: string]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :         void\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IValidationResultAsfunction {\n  (object: unknown, propertyName: string): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IVerificationTokenPayload.html":{"url":"interfaces/IVerificationTokenPayload.html","title":"interface - IVerificationTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IVerificationTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/interfaces/verificationTokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IVerificationTokenPayload {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsManagerAlreadyExistConstraint.html":{"url":"classes/IsManagerAlreadyExistConstraint.html","title":"class - IsManagerAlreadyExistConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsManagerAlreadyExistConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validation/isManagerExist.validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/isManagerExist.validation.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, _validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/isManagerExist.validation.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport { getRepository } from 'typeorm';\nimport { ManagersEntity } from '../../managers/managers.entity';\n\n// Custom validation which checking if email is already exist\n@ValidatorConstraint({ async: true })\nexport class IsManagerAlreadyExistConstraint\n  implements ValidatorConstraintInterface\n{\n  public async validate(\n    email: string,\n    _validationArguments: ValidationArguments,\n  ): Promise {\n    const managerRepository = getRepository(ManagersEntity);\n    return await managerRepository\n      .findOne({ email })\n      .then((manager): boolean => (manager ? false : true));\n  }\n\n  defaultMessage(validationArguments: ValidationArguments): string {\n    return (\n      `Менеджер с почтой ` +\n      validationArguments.value +\n      ` уже существует | Manager with ` +\n      validationArguments.value +\n      ` email already exists`\n    );\n  }\n}\n\nexport function IsManagerAlreadyExist(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string): void {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsManagerAlreadyExistConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsNumberConstraint.html":{"url":"classes/IsNumberConstraint.html","title":"class - IsNumberConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsNumberConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validation/customIsNumber.validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/customIsNumber.validation.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(data: any, _validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/customIsNumber.validation.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n// Custom validation for typeof string\n@ValidatorConstraint({ async: false })\nexport class IsNumberConstraint implements ValidatorConstraintInterface {\n  validate(data: any, _validationArguments: ValidationArguments): boolean {\n    if (typeof data !== 'number') {\n      return false;\n    }\n    return true;\n  }\n\n  defaultMessage(validationArguments: ValidationArguments): string {\n    return (\n      'Поле (' +\n      validationArguments.property +\n      ') должно быть числом | ' +\n      'Field (' +\n      validationArguments.property +\n      ') must be a number'\n    );\n  }\n}\n\nexport function CustomValidateIsNumber(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string): void {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      validator: IsNumberConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsUserAlreadyExistConstraint.html":{"url":"classes/IsUserAlreadyExistConstraint.html","title":"class - IsUserAlreadyExistConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsUserAlreadyExistConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validation/isUserExist.validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/isUserExist.validation.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, _validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/isUserExist.validation.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport { UsersEntity } from '../../users/users.entity';\nimport { getRepository } from 'typeorm';\n\n// Custom validation which checking if email is already exist\n@ValidatorConstraint({ async: true })\nexport class IsUserAlreadyExistConstraint\n  implements ValidatorConstraintInterface\n{\n  public async validate(\n    email: string,\n    _validationArguments: ValidationArguments,\n  ): Promise {\n    const usersReposity = getRepository(UsersEntity);\n    return await usersReposity\n      .findOne({ email })\n      .then((user): boolean => (user ? false : true));\n  }\n\n  defaultMessage(validationArguments: ValidationArguments): string {\n    return (\n      `Пользователь с почтой ` +\n      validationArguments.value +\n      ` уже существует | User with ` +\n      validationArguments.value +\n      ` email already exists`\n    );\n  }\n}\n\nexport function IsUserAlreadyExist(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string): void {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsUserAlreadyExistConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/jwt-refresh-token.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: ITokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/jwt-refresh-token.strategy.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ITokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UsersEntity } from './../../users/users.entity';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../users/users.service';\nimport { ITokenPayload } from '../interfaces/tokenPayload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    protected readonly configService: ConfigService, // protected нужен, чтобы не ругался TS, т.к. в super нельзя использовать this.configService\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n  // DONE\n  // Ошибки отрабатываются в userService.getUserIfRefreshTokenMatches\n  public async validate(\n    request: Request,\n    payload: ITokenPayload,\n  ): Promise {\n    const refreshToken = await request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: ITokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/jwt.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                ITokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../users/users.service';\nimport { ITokenPayload } from '../interfaces/tokenPayload.interface';\nimport { UsersEntity } from '../../users/users.entity';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    protected readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n    });\n  }\n  // DONE\n  // Ошибки отрабатываются в userService.getById\n  public async validate(payload: ITokenPayload): Promise {\n    return await this.userService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorGuard.html":{"url":"injectables/JwtTwoFactorGuard.html","title":"injectable - JwtTwoFactorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-two-factor.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtTwoFactorGuard extends AuthGuard('jwt-two-factor') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorStrategy.html":{"url":"injectables/JwtTwoFactorStrategy.html","title":"injectable - JwtTwoFactorStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/jwt-two-factor.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/jwt-two-factor.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: ITokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/jwt-two-factor.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                ITokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, BadRequestException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../users/users.service';\nimport { ITokenPayload } from '../interfaces/tokenPayload.interface';\nimport { UsersEntity } from '../../users/users.entity';\n\n@Injectable()\nexport class JwtTwoFactorStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-two-factor',\n) {\n  constructor(\n    protected readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n    });\n  }\n  // DONE\n  public async validate(\n    payload: ITokenPayload,\n  ): Promise {\n    const user = await this.userService.getById(payload.userId);\n    if (!user.isTwoFactorAuthenticationEnabled) {\n      return user;\n    }\n    if (payload.isSecondFactorAuthenticated) {\n      return user;\n    }\n    throw new BadRequestException('2FA валидация закончилась ошибкой');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/localAuthentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/local.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from '../authentication.service';\nimport { UsersEntity } from '../../users/users.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n  // DONE\n  // Ошибки отрабатываются в authenticationService.getAuthenticatedUser\n  public async validate(email: string, password: string): Promise {\n    return await this.authenticationService.getAuthenticatedUser(\n      email,\n      password,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/middlewares/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(_req: Request, _res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/middlewares/logger.middleware.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n// Redirect logic has been implemented here. Delete if not needed\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(_req: Request, _res: Response, next: NextFunction): void {\n    console.log('Request...');\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ManagersController.html":{"url":"controllers/ManagersController.html","title":"controller - ManagersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ManagersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/manager.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                managers\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createManager\n                            \n                            \n                                    Public\n                                    Async\n                                deleteManager\n                            \n                            \n                                    Public\n                                    Async\n                                findAllManagers\n                            \n                            \n                                    Public\n                                    Async\n                                getManagerAndHisUsers\n                            \n                            \n                                    Public\n                                    Async\n                                updateManager\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createManager\n                        \n                    \n                \n            \n            \n                \n                    \n                    createManager(managerData: CreateManagerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Создание менеджера (специально отдельной таблицой)'})@HttpCode(200)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/managers/manager.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    managerData\n                                    \n                                                CreateManagerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteManager\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteManager(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Удалить менеджера'})@HttpCode(200)@Post('delete/:id')\n                \n            \n\n            \n                \n                    Defined in src/managers/manager.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAllManagers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllManagers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Выборка всех менеджеров (для id под updateManager)'})@HttpCode(200)@Post('find-all')\n                \n            \n\n            \n                \n                    Defined in src/managers/manager.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getManagerAndHisUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getManagerAndHisUsers(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Вытащить всех клиентов менеджера'})@HttpCode(200)@Post('find-one-with-users/:id')\n                \n            \n\n            \n                \n                    Defined in src/managers/manager.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateManager\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateManager(managerData: UpdateManagerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Обновить сущность по id'})@HttpCode(200)@Post('update')\n                \n            \n\n            \n                \n                    Defined in src/managers/manager.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    managerData\n                                    \n                                                UpdateManagerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  BadRequestException,\n  Param,\n  ParseIntPipe,\n  HttpCode,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\nimport { ManagersEntity } from './managers.entity';\nimport { UpdateManagerDto } from './dto/updateManager.dto';\nimport { CreateManagerDto } from './dto/createManager.dto';\nimport { ManagersService } from './managers.service';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@Controller('managers')\n@ApiTags('Менеджеры')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class ManagersController {\n  constructor(private readonly managersService: ManagersService) {}\n  // DONE\n  // СПЕЦИАЛЬНО ИЗМЕНИЛ ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ ДЛЯ ТЕСТИРОВАНИЯ\n  @ApiOperation({\n    description: 'Создание менеджера (специально отдельной таблицой)',\n  })\n  @HttpCode(200)\n  @Post('create')\n  public async createManager(\n    @Body() managerData: CreateManagerDto,\n  ): Promise {\n    return await this.managersService.createManager(managerData);\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Выборка всех менеджеров (для id под updateManager)',\n  })\n  @HttpCode(200)\n  @Post('find-all')\n  // СПЕЦИАЛЬНО ИЗМЕНИЛ ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ ДЛЯ ТЕСТИРОВАНИЯ\n  public async findAllManagers(): Promise {\n    return await this.managersService.findAllManagers();\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Обновить сущность по id',\n  })\n  @HttpCode(200)\n  @Post('update')\n  public async updateManager(\n    @Body() managerData: UpdateManagerDto,\n  ): Promise {\n    return await this.managersService.updateManager(managerData);\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Вытащить всех клиентов менеджера',\n  })\n  @HttpCode(200)\n  @Post('find-one-with-users/:id')\n  public async getManagerAndHisUsers(\n    @Param('id', ParseIntPipe) id: number,\n  ): Promise {\n    return await this.managersService.getManagerByEmailWithAllUsers(id);\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Удалить менеджера',\n  })\n  @HttpCode(200)\n  @Post('delete/:id')\n  public async deleteManager(\n    @Param('id', ParseIntPipe) id: number,\n  ): Promise {\n    await this.managersService.deleteManager(id);\n    // return 'Менеджер был успешно удален';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ManagersEntity.html":{"url":"entities/ManagersEntity.html","title":"entity - ManagersEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ManagersEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/managers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                firstName\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                lastName\n                            \n                            \n                                    Public\n                                phoneNumber\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                    Public\n                                    Optional\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '01.01.0001', description: 'Дата создания сущности'})@CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/managers.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'mail@gmail.com', description: 'Почта менеджера'})@Column({type: 'text', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/managers.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Big', description: 'Имя менеджера'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/managers.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1', description: 'Генерирующийся ID'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/managers.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Lebowski', description: 'Фамилия менеджера'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/managers.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+76664442200', description: 'Телефон менеджера'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/managers.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '01.01.2007', description: 'Дата обновления сущности', nullable: true})@ApiPropertyOptional()@Column({type: 'timestamp', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/managers.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Сущность пользователя', description: 'One To Many', nullable: true, type: undefined})@ApiPropertyOptional()@OneToMany(undefined, users => users.manager)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/managers.entity.ts:81\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  OneToMany,\n} from 'typeorm';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { UsersEntity } from '../users/users.entity';\n\n@Entity('managers')\nexport class ManagersEntity {\n  @ApiProperty({\n    example: '1',\n    description: 'Генерирующийся ID',\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiProperty({\n    example: 'mail@gmail.com',\n    description: 'Почта менеджера',\n  })\n  @Column({\n    type: 'text',\n    unique: true,\n  })\n  public email!: string;\n\n  @ApiProperty({\n    example: '+76664442200',\n    description: 'Телефон менеджера',\n  })\n  @Column({ type: 'text' })\n  public phoneNumber!: string;\n\n  @ApiProperty({\n    example: 'Big',\n    description: 'Имя менеджера',\n  })\n  @Column({ type: 'text' })\n  public firstName!: string;\n\n  @ApiProperty({\n    example: 'Lebowski',\n    description: 'Фамилия менеджера',\n  })\n  @Column({ type: 'text' })\n  public lastName!: string;\n\n  @ApiProperty({\n    example: '01.01.0001',\n    description: 'Дата создания сущности',\n  })\n  @CreateDateColumn({ type: 'timestamp' })\n  // @Exclude()\n  createdAt!: Date;\n\n  @ApiProperty({\n    example: '01.01.2007',\n    description: 'Дата обновления сущности',\n    nullable: true,\n  })\n  @ApiPropertyOptional()\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  @Exclude()\n  updatedAt?: Date;\n\n  @ApiProperty({\n    example: 'Сущность пользователя',\n    description: 'One To Many',\n    nullable: true,\n    type: [UsersEntity],\n  })\n  @ApiPropertyOptional()\n  @OneToMany(() => UsersEntity, (users) => users.manager)\n  public users?: UsersEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ManagersModule.html":{"url":"modules/ManagersModule.html","title":"module - ManagersModule","body":"\n                   \n\n\n\n\n    Modules\n    ManagersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ManagersModule\n\n\n\ncluster_ManagersModule_providers\n\n\n\ncluster_ManagersModule_exports\n\n\n\n\nManagersService \n\nManagersService \n\n\n\nManagersModule\n\nManagersModule\n\nManagersService  -->\n\nManagersModule->ManagersService \n\n\n\n\n\nManagersService\n\nManagersService\n\nManagersModule -->\n\nManagersService->ManagersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/managers/managers.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ManagersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ManagersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ManagersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ManagersController } from './manager.controller';\nimport { ManagersEntity } from './managers.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ManagersService } from './managers.service';\nimport { Module } from '@nestjs/common';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ManagersEntity])],\n  providers: [ManagersService],\n  controllers: [ManagersController],\n  exports: [ManagersService],\n})\nexport class ManagersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ManagersService.html":{"url":"injectables/ManagersService.html","title":"injectable - ManagersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ManagersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/managers.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createManager\n                            \n                            \n                                    Public\n                                    Async\n                                deleteManager\n                            \n                            \n                                    Public\n                                    Async\n                                findAllManagers\n                            \n                            \n                                    Public\n                                    Async\n                                findManager\n                            \n                            \n                                    Public\n                                    Async\n                                getManagerByEmailWithAllUsers\n                            \n                            \n                                    Public\n                                    Async\n                                updateManager\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(managersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/managers/managers.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        managersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createManager\n                        \n                    \n                \n            \n            \n                \n                    \n                    createManager(managerData: CreateManagerDto)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/managers.service.ts:19\n                \n            \n\n\n            \n                \n                    A method that create new manager and save in repository\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    managerData\n                                    \n                                                CreateManagerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the manager entity\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteManager\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteManager(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/managers.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAllManagers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllManagers()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/managers.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findManager\n                        \n                    \n                \n            \n            \n                \n                    \n                    findManager(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/managers.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getManagerByEmailWithAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getManagerByEmailWithAllUsers(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/managers.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateManager\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateManager(managerData: UpdateManagerDto)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/managers.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    managerData\n                                    \n                                                UpdateManagerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UpdateManagerDto } from './dto/updateManager.dto';\nimport { CreateManagerDto } from './dto/createManager.dto';\nimport { ManagersEntity } from './managers.entity';\nimport { Injectable, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class ManagersService {\n  constructor(\n    @InjectRepository(ManagersEntity)\n    private readonly managersRepository: Repository,\n  ) {}\n  // DONE\n  /**\n   * A method that create new manager and save in repository\n   * @returns A promise with the manager entity\n   */\n  public async createManager(\n    managerData: CreateManagerDto,\n  ): Promise {\n    try {\n      const newManager = this.managersRepository.create(managerData);\n      await this.managersRepository.save(newManager);\n      return newManager;\n    } catch (e) {\n      throw new BadRequestException('Что-то пошло не так (createManager)');\n    }\n  }\n  // DONE\n  // Отрабатывает без блока catch, чтобы не ругался TS и можно было использовать менеджера в user.service\n  public async findManager(email: string): Promise {\n    const _foundManager = await this.managersRepository.findOne({ email });\n    if (_foundManager) {\n      return _foundManager;\n    }\n  }\n  // DONE\n  public async findAllManagers(): Promise {\n    try {\n      return await this.managersRepository.find({});\n    } catch (e) {\n      throw new BadRequestException('Что-то пошло не так (findAllManagers)');\n    }\n  }\n  // DONE\n  // Альтернативная реализация через repository.update в updateCompany\n  public async updateManager(\n    managerData: UpdateManagerDto,\n  ): Promise {\n    const _foundManager = await this.managersRepository.findOne({\n      where: { id: managerData.id },\n    });\n    if (!_foundManager) {\n      throw new BadRequestException('Менеджера с таким ID не существует');\n    }\n    try {\n      _foundManager.email = managerData.email || _foundManager.email;\n      _foundManager.firstName =\n        managerData.firstName || _foundManager.firstName;\n      _foundManager.lastName = managerData.lastName || _foundManager.lastName;\n      _foundManager.phoneNumber =\n        managerData.phoneNumber || _foundManager.phoneNumber;\n      _foundManager.updatedAt = new Date();\n      return await this.managersRepository.save(_foundManager);\n    } catch (e) {\n      throw new BadRequestException('Что-то пошло не так (updateManager)');\n    }\n  }\n  // DONE\n  public async getManagerByEmailWithAllUsers(\n    id: number,\n  ): Promise {\n    const _foundManager = await this.managersRepository.findOne(id, {\n      relations: ['users'],\n    });\n    if (!_foundManager) {\n      throw new BadRequestException('Менеджера с таким ID не существует');\n    }\n    try {\n      return _foundManager;\n    } catch (e) {\n      throw new BadRequestException(\n        'Что-то пошло не так (getManagerByEmailWithAllUsers)',\n      );\n    }\n  }\n  // DONE\n  // Оставил исполнения с remove (insted of delete)\n  public async deleteManager(id: number): Promise {\n    const _foundManager = await this.managersRepository.findOne(id);\n    if (!_foundManager) {\n      throw new BadRequestException('Менеджера с таким ID не существует');\n    }\n    try {\n      await this.managersRepository.remove(_foundManager);\n    } catch (e) {\n      throw new BadRequestException('Что-то пошло не так (deleteManager)');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NumberValidationConstraint.html":{"url":"classes/NumberValidationConstraint.html","title":"class - NumberValidationConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NumberValidationConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validation/isNumber.validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/isNumber.validation.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(data: any, _validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/isNumber.validation.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n// Custom validation for typeof string\n@ValidatorConstraint({ async: false })\nexport class NumberValidationConstraint\n  implements ValidatorConstraintInterface\n{\n  validate(data: any, _validationArguments: ValidationArguments): boolean {\n    if (typeof data !== 'number') {\n      return false;\n    }\n    return true;\n  }\n\n  defaultMessage(validationArguments: ValidationArguments): string {\n    return (\n      'Поле (' +\n      validationArguments.property +\n      ') должно быть числом | ' +\n      'Field (' +\n      validationArguments.property +\n      ') must be a number'\n    );\n  }\n}\n\nexport function NumberValidation(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string): void {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      validator: NumberValidationConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OrdersEntity.html":{"url":"entities/OrdersEntity.html","title":"entity - OrdersEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OrdersEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Optional\n                                products\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/orders.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/orders.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductsEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, products => products.order)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/orders.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/orders.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.orders, {cascade: true, onDelete: 'SET NULL'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/orders.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ProductsEntity } from '../products/products.entity';\nimport { UsersEntity } from '../users/users.entity';\nimport {\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  OneToMany,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('orders')\nexport class OrdersEntity {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ManyToOne(() => UsersEntity, (user) => user.orders, {\n    cascade: true,\n    onDelete: 'SET NULL',\n  })\n  user?: UsersEntity;\n\n  @OneToMany(() => ProductsEntity, (products) => products.order)\n  products?: ProductsEntity[];\n\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt!: Date;\n\n  @UpdateDateColumn({ type: 'timestamp' })\n  updatedAt?: Date;\n\n  // orderRecipient - физическое лицо (user) или юридическое лицо (user.company)\n  // orderPayment -\n  // orderShipment - самовывоз/доставка ТК/доставка по городу\n  // totalOrderPrice - цена заказа\n  // orderStatus - enum schema - NOT NEED IT\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrdersModule.html":{"url":"modules/OrdersModule.html","title":"module - OrdersModule","body":"\n                   \n\n\n\n\n    Modules\n    OrdersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/orders/orders.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { OrdersEntity } from './orders.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n// import { OrdersService } from './orders.service';\n// import { OrdersController } from './orders.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([OrdersEntity])],\n  // controllers: [OrdersController],\n  // providers: [OrdersService],\n  // exports: [OrdersService],\n})\nexport class OrdersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pagination/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                startId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/pagination.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/pagination.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/pagination.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PaginationParams {\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  startId?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  offset?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoneValidationConstraint.html":{"url":"classes/PhoneValidationConstraint.html","title":"class - PhoneValidationConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoneValidationConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validation/isPhoneValid.validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/isPhoneValid.validation.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(phone: string, validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/isPhoneValid.validation.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n// Custom validation for password length\n@ValidatorConstraint({ async: false })\nexport class PhoneValidationConstraint implements ValidatorConstraintInterface {\n  validate(phone: string, validationArguments: ValidationArguments): any {\n    if (typeof phone !== 'string') {\n      return false;\n    }\n    return phone.match(validationArguments.constraints[0]);\n  }\n\n  defaultMessage(validationArguments: ValidationArguments): string {\n    return (\n      'Неверный формат телефона (' +\n      validationArguments.value +\n      ') | ' +\n      'Wrong phone number format (' +\n      validationArguments.value +\n      ')'\n    );\n  }\n}\n\nexport function PhoneValidation(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string): void {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [/\\(?([0-9]{3})\\)?([ .-]?)([0-9]{3})\\2([0-9]{4})/],\n      validator: PhoneValidationConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PricesController.html":{"url":"controllers/PricesController.html","title":"controller - PricesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PricesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prices/prices.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prices\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                renderPriceDownloadPage\n                            \n                            \n                                    Public\n                                    Async\n                                uploadPriceToServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        renderPriceDownloadPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderPriceDownloadPage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Рендер страницы для загрузки прайса'})@HttpCode(200)@Get('download')@Render('price/download')\n                \n            \n\n            \n                \n                    Defined in src/prices/prices.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        uploadPriceToServer\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPriceToServer(priceData: CreatePriceDto, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('upload')@ApiOperation({description: 'Загрузка прайса'})@HttpCode(200)@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({description: 'Загрузка прайса', type: FileUploadDto})\n                \n            \n\n            \n                \n                    Defined in src/prices/prices.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceData\n                                    \n                                                CreatePriceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UseInterceptors,\n  UploadedFile,\n  Get,\n  Render,\n  Body,\n  ClassSerializerInterceptor,\n  HttpCode,\n} from '@nestjs/common';\nimport { CreatePriceDto } from './dto/create-price.dto';\nimport { diskStorage } from 'multer';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { HelperFileLoader } from '../utils/fileloader/HelperFileLoader';\nimport { PricesService } from './prices.service';\nimport { PricesEntity } from './prices.entity';\nimport { ApiBody, ApiConsumes, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { FileUploadDto } from './dto/fileUpload.dto';\nimport { IRenderTemplate } from '../authentication/interfaces/renderAuthTemplate.interface';\n\nconst PATH_NEWS = '/prices/';\nHelperFileLoader.path = PATH_NEWS;\n\n@Controller('prices')\n@ApiTags('Прайс')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class PricesController {\n  constructor(private readonly pricesService: PricesService) {}\n  // DONE\n  @ApiOperation({\n    description: 'Рендер страницы для загрузки прайса',\n  })\n  @HttpCode(200)\n  @Get('download')\n  @Render('price/download')\n  public async renderPriceDownloadPage(): Promise {\n    return { layout: 'auth', title: 'Загрузка прайса' };\n  }\n  // DONE\n  @Post('upload')\n  @ApiOperation({\n    description: 'Загрузка прайса',\n  })\n  @HttpCode(200)\n  @UseInterceptors(\n    FileInterceptor('file', {\n      storage: diskStorage({\n        destination: HelperFileLoader.destinationPath,\n        filename: HelperFileLoader.customFileName,\n      }),\n      fileFilter: HelperFileLoader.fileFilterPrices,\n    }),\n  )\n  // Попробуем здесь еще пару декораторов SWAGGER\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'Загрузка прайса',\n    type: FileUploadDto,\n  })\n  public async uploadPriceToServer(\n    @Body() priceData: CreatePriceDto,\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    if (file?.filename) {\n      priceData.file = PATH_NEWS + file.filename;\n    }\n    const createdPrice = await this.pricesService.createPrice(priceData);\n    return createdPrice;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PricesEntity.html":{"url":"entities/PricesEntity.html","title":"entity - PricesEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PricesEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prices/prices.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                    Public\n                                file\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '01.01.2021', description: 'Дата создания сущности'})@CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/prices/prices.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'price.xls', description: 'Загружаемый файл'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/prices/prices.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1', description: 'Генерирующийся ID'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/prices/prices.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Прайс от 01.01.2021', description: 'Название прайса'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/prices/prices.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '01.01.2021', description: 'Дата обновления сущности', nullable: true})@Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/prices/prices.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n} from 'typeorm';\n\n@Entity('prices')\nexport class PricesEntity {\n  @ApiProperty({\n    example: '1',\n    description: 'Генерирующийся ID',\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiProperty({\n    example: 'price.xls',\n    description: 'Загружаемый файл',\n  })\n  @Column({ type: 'text' })\n  public file!: string;\n\n  @ApiProperty({\n    example: 'Прайс от 01.01.2021',\n    description: 'Название прайса',\n  })\n  @Column({ type: 'text' })\n  public title!: string;\n\n  @ApiProperty({\n    example: '01.01.2021',\n    description: 'Дата создания сущности',\n  })\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt!: Date;\n\n  @ApiProperty({\n    example: '01.01.2021',\n    description: 'Дата обновления сущности',\n    nullable: true,\n  })\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PricesModule.html":{"url":"modules/PricesModule.html","title":"module - PricesModule","body":"\n                   \n\n\n\n\n    Modules\n    PricesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PricesModule\n\n\n\ncluster_PricesModule_providers\n\n\n\ncluster_PricesModule_exports\n\n\n\n\nPricesService \n\nPricesService \n\n\n\nPricesModule\n\nPricesModule\n\nPricesService  -->\n\nPricesModule->PricesService \n\n\n\n\n\nPricesService\n\nPricesService\n\nPricesModule -->\n\nPricesService->PricesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prices/prices.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PricesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PricesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PricesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { PricesEntity } from './prices.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\nimport { PricesService } from './prices.service';\nimport { PricesController } from './prices.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PricesEntity])],\n  controllers: [PricesController],\n  providers: [PricesService],\n  exports: [PricesService],\n})\nexport class PricesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PricesService.html":{"url":"injectables/PricesService.html","title":"injectable - PricesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PricesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prices/prices.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPrice\n                            \n                            \n                                    Public\n                                    Async\n                                parsePrice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pricesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/prices/prices.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pricesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createPrice\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPrice(priceData: CreatePriceDto)\n                \n            \n\n\n            \n                \n                    Defined in src/prices/prices.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceData\n                                    \n                                                CreatePriceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        parsePrice\n                        \n                    \n                \n            \n            \n                \n                    \n                    parsePrice(priceId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/prices/prices.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ProductsEntity } from './../products/products.entity';\nimport { CreatePriceDto } from './dto/create-price.dto';\nimport { Injectable, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PricesEntity } from './prices.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class PricesService {\n  constructor(\n    @InjectRepository(PricesEntity)\n    private readonly pricesRepository: Repository,\n  ) {}\n  // DONE\n  public async createPrice(priceData: CreatePriceDto): Promise {\n    const newPrice = this.pricesRepository.create(priceData);\n    await this.pricesRepository.save(newPrice);\n    return newPrice;\n  }\n  // DONE\n  public async parsePrice(priceId: number): Promise {\n    const reader = await require('xlsx');\n    const _fileId = await this.pricesRepository.findOne(priceId);\n    if (_fileId) {\n      const fileName = _fileId.file;\n      const filePath = 'public' + fileName;\n      const file = reader.readFile(filePath);\n      const productEntities: ProductsEntity[] = [];\n\n      const sheets = file.SheetNames;\n\n      for (let i = 0; i  {\n          productEntities.push(product);\n        });\n      }\n      return productEntities;\n    } else {\n      return new BadRequestException('Что-то пошло не так в parsePrice');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProductSearchBody.html":{"url":"interfaces/ProductSearchBody.html","title":"interface - ProductSearchBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProductSearchBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/productsSearch/interface/productSearchBody.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            productCode\n                                        \n                                \n                                \n                                        \n                                            productPrice\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        productCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        productPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ProductSearchBody {\n  id: number;\n  productCode: string;\n  title: string;\n  productPrice: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProductSearchResult.html":{"url":"interfaces/ProductSearchResult.html","title":"interface - ProductSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProductSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/productsSearch/interface/productSearchResult.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hits\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ProductSearchBody } from './productSearchBody.interface';\n\nexport interface ProductSearchResult {\n  hits: {\n    total: number;\n    hits: Array;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                addProductsToLocalStorage\n                            \n                            \n                                    Public\n                                    Async\n                                createGoodsFromConvertedPrice\n                            \n                            \n                                    Public\n                                    Async\n                                createProduct\n                            \n                            \n                                    Public\n                                    Async\n                                getAllView\n                            \n                            \n                                    Public\n                                    Async\n                                getProducts\n                            \n                            \n                                    Public\n                                    Async\n                                renderLogin\n                            \n                            \n                                    Public\n                                    Async\n                                renderOneProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        addProductsToLocalStorage\n                        \n                    \n                \n            \n            \n                \n                    \n                    addProductsToLocalStorage(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Добавления товаров в localStorage'})@HttpCode(200)@Post('add-to-storage')\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createGoodsFromConvertedPrice\n                        \n                    \n                \n            \n            \n                \n                    \n                    createGoodsFromConvertedPrice(priceId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Создание товаров на основе прайса'})@HttpCode(200)@Post('create-products-from-price')\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(productData: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Создание единичного товара'})@HttpCode(200)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    productData\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAllView\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllView(undefined: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Пагинация'})@HttpCode(200)@Get('show-all')@Render('products/products-list')\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getProducts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProducts(search: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Поиск товара + его кеширование в REDIS'})@HttpCode(200)@UseInterceptors(HttpCacheInterceptor)@CacheKey(GET_PRODUCTS_CACHE_KEY)@Get()\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    search\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        renderLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Рендер страницы с конвертацией прайса'})@HttpCode(200)@Get('convert')@Render('price/convert')\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        renderOneProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderOneProduct(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Рендер отдельной карточки товара'})@HttpCode(200)@Get('/:id')@Render('products/product-detail')\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { HttpCacheInterceptor } from './productsCache/httpCache.interceptor';\nimport { InsertResult } from 'typeorm';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { PaginationParams } from './../pagination/pagination.dto';\nimport { CreateProductDto } from './dto/createProduct.dto';\nimport {\n  Body,\n  Controller,\n  Post,\n  Get,\n  Render,\n  Query,\n  ParseIntPipe,\n  Param,\n  HttpStatus,\n  BadRequestException,\n  HttpCode,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  CacheKey,\n} from '@nestjs/common';\nimport { ProductsEntity } from './products.entity';\nimport { ProductsService } from './products.service';\nimport { IRenderTemplate } from '../authentication/interfaces/renderAuthTemplate.interface';\nimport { GET_PRODUCTS_CACHE_KEY } from './productsCache/productsCacheKey.constant';\n\n@Controller('products')\n@ApiTags('Товары / Продукты')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class ProductsController {\n  constructor(private readonly productsService: ProductsService) {}\n  // DONE\n  @ApiOperation({\n    description: 'Создание единичного товара',\n  })\n  @HttpCode(200)\n  @Post('create')\n  public async createProduct(\n    @Body() productData: CreateProductDto,\n  ): Promise {\n    return this.productsService.createProduct(productData);\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Рендер страницы с конвертацией прайса',\n  })\n  @HttpCode(200)\n  @Get('convert')\n  @Render('price/convert')\n  public async renderLogin(): Promise {\n    return { layout: 'auth', title: 'Создать товары на основе прайса' };\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Создание товаров на основе прайса',\n  })\n  @HttpCode(200)\n  @Post('create-products-from-price')\n  public async createGoodsFromConvertedPrice(\n    @Body() priceId: number,\n  ): Promise {\n    return await this.productsService.createGoodsFromConvertedPrice(priceId);\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Добавления товаров в localStorage',\n  })\n  @HttpCode(200)\n  @Post('add-to-storage')\n  public async addProductsToLocalStorage(\n    @Body() id: number,\n  ): Promise {\n    const product = await this.productsService.findById(id);\n    return product;\n  }\n  // Поиск + кеширование\n  @ApiOperation({\n    description: 'Поиск товара + его кеширование в REDIS',\n  })\n  @HttpCode(200)\n  @UseInterceptors(HttpCacheInterceptor)\n  @CacheKey(GET_PRODUCTS_CACHE_KEY)\n  @Get()\n  public async getProducts(@Query('search') search: string): Promise {\n    if (search) {\n      return await this.productsService.searchForProduct(search);\n    }\n    return await this.productsService.getAll();\n  }\n  // Пагинация\n  @ApiOperation({\n    description: 'Пагинация',\n  })\n  @HttpCode(200)\n  @Get('show-all')\n  @Render('products/products-list')\n  public async getAllView(\n    @Query() { offset, limit, startId }: PaginationParams,\n  ): Promise {\n    const { items, count, pages } = await this.productsService.getPosts(\n      offset,\n      limit,\n      startId,\n    );\n    return { items, count, pages };\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Рендер отдельной карточки товара',\n  })\n  @HttpCode(200)\n  @Get('/:id')\n  @Render('products/product-detail')\n  public async renderOneProduct(\n    @Param(\n      'id',\n      new ParseIntPipe({ errorHttpStatusCode: HttpStatus.NOT_ACCEPTABLE }), // TODO - зачем я сюда это добавил?\n    )\n    id: number,\n  ): Promise {\n    const product = await this.productsService.findById(id);\n    return { product };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ProductsEntity.html":{"url":"entities/ProductsEntity.html","title":"entity - ProductsEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ProductsEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                category\n                            \n                            \n                                createdAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                order\n                            \n                            \n                                    Public\n                                productCode\n                            \n                            \n                                    Public\n                                productPrice\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoriesEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Сущность категории', description: 'Many To One', nullable: true, type: CategoriesEntity})@ManyToOne(undefined, category => category.products, {cascade: true, onDelete: 'SET NULL'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/products.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '01.01.2021', description: 'Дата создания сущности'})@CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/products.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1', description: 'Генерирующийся ID'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/products.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrdersEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Сущность заказа', description: 'Many To One', nullable: true, type: OrdersEntity})@ManyToOne(undefined, order => order.products, {cascade: true, onDelete: 'SET NULL'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/products.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        productCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ПН00140', description: 'Артикул товара'})@Column({type: 'text', unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/products.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        productPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '420', description: 'Цена товара'})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/products.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Перчатки нитриловые', description: 'Наименование товара'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/products.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '01.01.2021', description: 'Дата обновления сущности', nullable: true})@Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/products.entity.ts:86\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { CategoriesEntity } from './../categories/categories.entity';\nimport { OrdersEntity } from '../orders/orders.entity';\n\n@Entity('products')\nexport class ProductsEntity {\n  @ApiProperty({\n    example: '1',\n    description: 'Генерирующийся ID',\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiProperty({\n    example: 'ПН00140',\n    description: 'Артикул товара',\n  })\n  @Column({\n    type: 'text',\n    unique: true,\n    nullable: false,\n  })\n  public productCode!: string;\n\n  @ApiProperty({\n    example: 'Перчатки нитриловые',\n    description: 'Наименование товара',\n  })\n  @Column({ type: 'text' })\n  public title!: string;\n\n  @ApiProperty({\n    example: '420',\n    description: 'Цена товара',\n  })\n  @Column({ type: 'int' })\n  public productPrice!: number;\n\n  @ApiProperty({\n    example: 'Сущность заказа',\n    description: 'Many To One',\n    nullable: true,\n    type: OrdersEntity,\n  })\n  @ManyToOne(() => OrdersEntity, (order) => order.products, {\n    cascade: true,\n    onDelete: 'SET NULL',\n  })\n  public order?: OrdersEntity;\n\n  @ApiProperty({\n    example: 'Сущность категории',\n    description: 'Many To One',\n    nullable: true,\n    type: CategoriesEntity,\n  })\n  @ManyToOne(() => CategoriesEntity, (category) => category.products, {\n    cascade: true,\n    onDelete: 'SET NULL',\n  })\n  public category?: CategoriesEntity;\n\n  @ApiProperty({\n    example: '01.01.2021',\n    description: 'Дата создания сущности',\n  })\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt!: Date;\n\n  @ApiProperty({\n    example: '01.01.2021',\n    description: 'Дата обновления сущности',\n    nullable: true,\n  })\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_imports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_ProductsModule_exports\n\n\n\n\nPricesModule\n\nPricesModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nPricesModule->ProductsModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nProductsModule -->\n\nSearchModule->ProductsModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nProductsSearchService\n\nProductsSearchService\n\nProductsModule -->\n\nProductsSearchService->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsSearchService\n                        \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PricesModule\n                        \n                        \n                            SearchModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { SearchModule } from './../search/search.module';\nimport { PricesModule } from './../prices/prices.module';\nimport { ProductsEntity } from './products.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CacheModule, Module } from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { ProductsController } from './products.controller';\nimport { ProductsSearchService } from './productsSearch/productsSearch.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as redisStore from 'cache-manager-redis-store';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        store: redisStore,\n        host: configService.get('REDIS_HOST'),\n        port: configService.get('REDIS_PORT'),\n        ttl: 120,\n      }),\n    }),\n    // CacheModule.register(),\n    TypeOrmModule.forFeature([ProductsEntity]),\n    PricesModule,\n    SearchModule,\n  ],\n  controllers: [ProductsController],\n  providers: [ProductsService, ProductsSearchService],\n  exports: [ProductsService],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsSearchService.html":{"url":"injectables/ProductsSearchService.html","title":"injectable - ProductsSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/productsSearch/productsSearch.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                indexPost\n                            \n                            \n                                    Public\n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticsearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/products/productsSearch/productsSearch.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticsearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        indexPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    indexPost(product: ProductsEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/products/productsSearch/productsSearch.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                ProductsEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/products/productsSearch/productsSearch.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'products'\n                    \n                \n                    \n                        \n                                Defined in src/products/productsSearch/productsSearch.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ProductsEntity } from '../products.entity';\nimport { Injectable } from '@nestjs/common';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\nimport { ProductSearchResult } from './interface/productSearchResult.interface';\nimport { ProductSearchBody } from './interface/productSearchBody.interface';\n\n@Injectable()\nexport class ProductsSearchService {\n  index = 'products';\n\n  constructor(private readonly elasticsearchService: ElasticsearchService) {}\n\n  public async indexPost(product: ProductsEntity): Promise {\n    return await this.elasticsearchService.index({\n      index: this.index,\n      body: {\n        id: product.id,\n        productCode: product.productCode,\n        title: product.title,\n        productPrice: product.productPrice,\n      },\n    });\n  }\n\n  public async search(text: string): Promise {\n    const { body } =\n      await this.elasticsearchService.search({\n        index: this.index,\n        body: {\n          query: {\n            multi_match: {\n              query: text,\n              fields: ['title', 'productCode'],\n            },\n          },\n        },\n      });\n    const hits = body.hits.hits;\n    return hits.map((item) => item._source);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                clearCache\n                            \n                            \n                                    Public\n                                    Async\n                                createGoodsFromConvertedPrice\n                            \n                            \n                                    Public\n                                    Async\n                                createProduct\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                getAll\n                            \n                            \n                                    Public\n                                    Async\n                                getPosts\n                            \n                            \n                                    Public\n                                    Async\n                                searchForProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository, pricesService: PricesService, productsSearchService: ProductsSearchService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/products/products.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pricesService\n                                                  \n                                                        \n                                                                        PricesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productsSearchService\n                                                  \n                                                        \n                                                                        ProductsSearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        clearCache\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearCache()\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createGoodsFromConvertedPrice\n                        \n                    \n                \n            \n            \n                \n                    \n                    createGoodsFromConvertedPrice(priceId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(productData: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    productData\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts(offset?: number, limit?: number, startId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        searchForProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchForProduct(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  CACHE_MANAGER,\n  Inject,\n} from '@nestjs/common';\nimport {\n  FindManyOptions,\n  MoreThan,\n  Repository,\n  In,\n  InsertResult,\n} from 'typeorm';\nimport { PricesService } from './../prices/prices.service';\nimport { ProductsEntity } from './products.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ProductsSearchService } from './productsSearch/productsSearch.service';\nimport { CreateProductDto } from './dto/createProduct.dto';\nimport { Cache } from 'cache-manager';\nimport { GET_PRODUCTS_CACHE_KEY } from './productsCache/productsCacheKey.constant';\n\n@Injectable()\nexport class ProductsService {\n  constructor(\n    @InjectRepository(ProductsEntity)\n    private readonly productsRepository: Repository,\n    private readonly pricesService: PricesService,\n    private readonly productsSearchService: ProductsSearchService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) {}\n  // DONE\n  public async createProduct(\n    productData: CreateProductDto,\n  ): Promise {\n    try {\n      const newProduct = this.productsRepository.create(productData);\n      await this.productsRepository.save(newProduct);\n      await this.productsSearchService.indexPost(newProduct); // Эта строка для индексации поиска\n      await this.clearCache(); // Чистим кеш\n      return newProduct;\n    } catch (e) {\n      throw new BadRequestException('Что-то пошло не так (createProduct)');\n    }\n  }\n  // DONE\n  // Создание ряда товаров из прайса\n  public async createGoodsFromConvertedPrice(\n    priceId: number,\n  ): Promise {\n    const convertedPrice = await this.pricesService.parsePrice(priceId);\n    const productsEntities: ProductsEntity[] = [];\n    convertedPrice.forEach((element: any) => {\n      const productEntity = new ProductsEntity();\n      productEntity.productCode = convertedPrice[0].productCode;\n      productEntity.title = convertedPrice[0].title;\n      productEntity.productPrice = convertedPrice[0].productPrice;\n      productEntity.updatedAt = new Date();\n      productsEntities.push(element);\n    });\n    await this.clearCache(); // Чистим кеш\n    return await this.productsRepository.upsert(productsEntities, [\n      'productCode',\n    ]);\n  }\n  // DONE\n  // Часть с поиском товаров\n  public async searchForProduct(text: string): Promise {\n    const results = await this.productsSearchService.search(text);\n    const ids = results.map((result: any) => result.id);\n    if (!ids.length) {\n      return [];\n    }\n    return this.productsRepository.find({\n      where: { id: In(ids) },\n    });\n  }\n  // DONE\n  public async findById(id: number): Promise {\n    const foundProduct = await this.productsRepository.findOne(id);\n    await this.clearCache(); // Чистим кеш\n    if (foundProduct) {\n      return foundProduct;\n    }\n  }\n  // DONE\n  public async getAll() {\n    const foundProducts = await this.productsRepository.find({});\n    await this.clearCache(); // Чистим кеш\n    return foundProducts;\n  }\n\n  // Обнуления кэша для всех функций кроме поиска\n  public async clearCache(): Promise {\n    if (this.cacheManager.store.keys) {\n      const keys: string[] = await this.cacheManager.store.keys();\n      keys.forEach((key) => {\n        if (key.startsWith(GET_PRODUCTS_CACHE_KEY)) {\n          this.cacheManager.del(key);\n        }\n      });\n    } else {\n      throw new BadRequestException('Уже даже кеш почистить не можем?');\n    }\n  }\n  // Пагинация\n  // TODO - ПОМЕНЯТЬ НА КУРСОРНУЮ\n  public async getPosts(offset?: number, limit?: number, startId?: number) {\n    const where: FindManyOptions['where'] = {};\n    let separateCount = 0;\n    if (startId) {\n      where.id = MoreThan(startId);\n      separateCount = await this.productsRepository.count();\n    }\n\n    const [items, count] = await this.productsRepository.findAndCount({\n      where,\n      order: {\n        id: 'ASC',\n      },\n      skip: offset,\n      take: limit,\n    });\n    console.log(items);\n    console.log(count);\n    const pages = count / items.length;\n    await this.clearCache(); // Чистим кеш\n    return {\n      items,\n      count: startId ? separateCount : count,\n      pages,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/search/search.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ElasticsearchModule } from '@nestjs/elasticsearch';\n\n@Module({\n  imports: [\n    ConfigModule,\n    ElasticsearchModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService): Promise => ({\n        node: configService.get('ELASTICSEARCH_NODE'),\n        auth: {\n          username: configService.get('ELASTICSEARCH_USERNAME'),\n          password: configService.get('ELASTICSEARCH_PASSWORD'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  exports: [ElasticsearchModule],\n})\nexport class SearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SentryInterceptor.html":{"url":"injectables/SentryInterceptor.html","title":"injectable - SentryInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SentryInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sentry/sentry.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                We must be in Request scope as we inject SentryService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sentryService: SentryService)\n                    \n                \n                        \n                            \n                                Defined in src/sentry/sentry.interceptor.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sentryService\n                                                  \n                                                        \n                                                                        SentryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(_context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/sentry/sentry.interceptor.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n  Scope,\n} from '@nestjs/common';\nimport { catchError, finalize, Observable, throwError } from 'rxjs';\nimport { SentryService } from './sentry.service';\nimport * as Sentry from '@sentry/node';\n\n/**\n * We must be in Request scope as we inject SentryService\n */\n@Injectable({ scope: Scope.REQUEST })\nexport class SentryInterceptor implements NestInterceptor {\n  constructor(private sentryService: SentryService) {}\n\n  intercept(_context: ExecutionContext, next: CallHandler): Observable {\n    // start a child span for performance tracing\n    const span = this.sentryService.startChild({ op: `route handler` });\n\n    return next.handle().pipe(\n      catchError((error) => {\n        // capture the error, you can filter out some errors here\n        Sentry.captureException(\n          error,\n          this.sentryService.span.getTraceContext(),\n        );\n\n        // throw again the error\n        return throwError(() => error);\n      }),\n      finalize(() => {\n        span.finish();\n        this.sentryService.span.finish();\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SentryModule.html":{"url":"modules/SentryModule.html","title":"module - SentryModule","body":"\n                   \n\n\n\n\n    Modules\n    SentryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SentryModule\n\n\n\ncluster_SentryModule_providers\n\n\n\n\nSentryService\n\nSentryService\n\n\n\nSentryModule\n\nSentryModule\n\nSentryModule -->\n\nSentryService->SentryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sentry/sentry.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SentryService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: Sentry.NodeOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/sentry/sentry.module.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Sentry.NodeOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { module: typeof SentryModule; providers: {}; exports: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as Sentry from '@sentry/node';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { SentryService } from './sentry.service';\nimport { SentryInterceptor } from './sentry.interceptor';\n\nexport const SENTRY_OPTIONS = 'SENTRY_OPTIONS';\n\n@Module({\n  providers: [SentryService],\n})\nexport class SentryModule {\n  static forRoot(options: Sentry.NodeOptions) {\n    // initialization of Sentry, this is where Sentry will create a Hub\n    Sentry.init(options);\n\n    return {\n      module: SentryModule,\n      providers: [\n        {\n          provide: SENTRY_OPTIONS,\n          useValue: options,\n        },\n        SentryService,\n        {\n          provide: APP_INTERCEPTOR,\n          useClass: SentryInterceptor,\n        },\n      ],\n      exports: [SentryService],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SentryService.html":{"url":"injectables/SentryService.html","title":"injectable - SentryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SentryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sentry/sentry.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                startChild\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    span\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/sentry/sentry.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        startChild\n                        \n                    \n                \n            \n            \n                \nstartChild(spanContext: SpanContext)\n                \n            \n\n\n            \n                \n                    Defined in src/sentry/sentry.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spanContext\n                                    \n                                            SpanContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        span\n                    \n                \n\n                \n                    \n                        getspan()\n                    \n                \n                            \n                                \n                                    Defined in src/sentry/sentry.service.ts:14\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import '@sentry/tracing'; // ВОТ МОЙ ОТВЕТ!!!\nimport { Request } from 'express';\nimport { Scope, BadRequestException } from '@nestjs/common';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport * as Sentry from '@sentry/node';\nimport { Span, SpanContext } from '@sentry/types';\n\n// Because we inject REQUEST we need to set the service as request scoped\n\n@Injectable({ scope: Scope.REQUEST })\nexport class SentryService {\n  // Return the current span defined in the current Hub and Scope\n  get span(): Span {\n    const constructor: any = Sentry.getCurrentHub().getScope();\n    if (constructor) {\n      const constructorSpan = constructor.getSpan();\n      return constructorSpan;\n    } else {\n      throw new BadRequestException('И тут ошибочка');\n    }\n  }\n\n  // When injecting the service it will create the main transaction\n\n  constructor(@Inject(REQUEST) private request: Request) {\n    const { method, headers, url } = this.request;\n\n    // recreate transaction based from HTTP request\n    const transaction = Sentry.startTransaction({\n      name: `Route: ${method} ${url}`,\n      op: 'transaction',\n    });\n\n    // setup context of newly created transaction\n    Sentry.getCurrentHub().configureScope((scope) => {\n      scope.setSpan(transaction);\n\n      // customize your context here\n      scope.setContext('http', {\n        method,\n        url,\n        headers,\n      });\n    });\n  }\n\n  // This will simply start a new child span in the current span\n  startChild(spanContext: SpanContext) {\n    return this.span.startChild(spanContext);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringValidationConstraint.html":{"url":"classes/StringValidationConstraint.html","title":"class - StringValidationConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringValidationConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validation/isString.validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/isString.validation.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(data: any, _validationArguments: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation/isString.validation.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n// Валидация для type of string\n@ValidatorConstraint({ async: false })\nexport class StringValidationConstraint\n  implements ValidatorConstraintInterface\n{\n  validate(data: any, _validationArguments: ValidationArguments): boolean {\n    if (typeof data !== 'string') {\n      return false;\n    }\n    return true;\n  }\n\n  defaultMessage(validationArguments: ValidationArguments): string {\n    return (\n      'Поле (' +\n      validationArguments.property +\n      ') должно быть строкой | ' +\n      'Field (' +\n      validationArguments.property +\n      ') must be a string'\n    );\n  }\n}\n\nexport function StringValidation(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string): void {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      validator: StringValidationConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TwoFactorAuthenticationCodeDto.html":{"url":"classes/TwoFactorAuthenticationCodeDto.html","title":"class - TwoFactorAuthenticationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TwoFactorAuthenticationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/twoFactor/dto/twoFactorAuthenticationCode.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                twoFactorAuthenticationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorAuthenticationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ХХХХХХХХХХХХХХХХХХХХХХХ', description: '2FA код'})@StringValidation()@IsNotEmpty({message: isNotEmptyMessage})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/twoFactor/dto/twoFactorAuthenticationCode.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { isNotEmptyMessage } from '../../../utils/repeatableConsts/isNotEmptyMessage';\nimport { IsNotEmpty } from 'class-validator';\nimport { StringValidation } from '../../../utils/validation/isString.validation';\n\nexport class TwoFactorAuthenticationCodeDto {\n  @ApiProperty({\n    example: 'ХХХХХХХХХХХХХХХХХХХХХХХ',\n    description: '2FA код',\n  })\n  @StringValidation()\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  twoFactorAuthenticationCode!: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TwoFactorAuthenticationController.html":{"url":"controllers/TwoFactorAuthenticationController.html","title":"controller - TwoFactorAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TwoFactorAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/twoFactor/twoFactorAuthentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                2fa\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Public\n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(request: IRequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Аутентификация через 2FA'})@HttpCode(200)@Post('authenticate')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(response: Response, request: IRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Генерация ключа 2FA'})@HttpCode(200)@Post('generate')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                IRequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(request: IRequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Включить 2FA авторизацию'})@HttpCode(200)@Post('turn-on')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  Controller,\n  Post,\n  UseInterceptors,\n  Res,\n  UseGuards,\n  Req,\n  Body,\n  UnauthorizedException,\n  HttpCode,\n} from '@nestjs/common';\nimport { TwoFactorAuthenticationService } from './twoFactorAuthentication.service';\nimport { Response } from 'express';\nimport { JwtAuthenticationGuard } from '../guards/jwt-authentication.guard';\nimport { IRequestWithUser } from '../interfaces/requestWithUser.interface';\nimport { UsersService } from '../../users/users.service';\nimport { TwoFactorAuthenticationCodeDto } from './dto/twoFactorAuthenticationCode.dto';\nimport { AuthenticationService } from '../authentication.service';\nimport { UsersEntity } from '../../users/users.entity';\nimport { IQrCodeStream } from './../interfaces/qrCodeStream.interface';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@Controller('2fa')\n@ApiTags('2FA')\n@UseInterceptors(ClassSerializerInterceptor) // Сериализация для исключения ряда данных из ответов\nexport class TwoFactorAuthenticationController {\n  constructor(\n    private readonly twoFactorAuthenticationService: TwoFactorAuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly authenticationService: AuthenticationService,\n  ) {}\n  // DONE\n  @ApiOperation({\n    description: 'Генерация ключа 2FA',\n  })\n  @HttpCode(200)\n  @Post('generate')\n  @UseGuards(JwtAuthenticationGuard)\n  public async register(\n    @Res() response: Response,\n    @Req() request: IRequestWithUser,\n  ): Promise {\n    const { otpauthUrl } =\n      await this.twoFactorAuthenticationService.generateTwoFactorAuthenticationSecret(\n        request.user,\n      );\n\n    return this.twoFactorAuthenticationService.pipeQrCodeStream(\n      response,\n      otpauthUrl,\n    );\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Включить 2FA авторизацию',\n  })\n  @HttpCode(200)\n  @Post('turn-on')\n  @UseGuards(JwtAuthenticationGuard)\n  public async turnOnTwoFactorAuthentication(\n    @Req() request: IRequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ): Promise {\n    const isCodeValid =\n      await this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Неверный код аутентификации');\n    }\n    await this.usersService.turnOnTwoFactorAuthentication(request.user.id);\n  }\n  // DONE\n  @ApiOperation({\n    description: 'Аутентификация через 2FA',\n  })\n  @HttpCode(200)\n  @Post('authenticate')\n  @UseGuards(JwtAuthenticationGuard)\n  public async authenticate(\n    @Req() request: IRequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ): Promise {\n    const isCodeValid =\n      await this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Неверный код аутентификации');\n    }\n\n    const accessTokenCookie =\n      await this.authenticationService.getCookieWithJwtAccessToken(\n        request.user.id,\n        true,\n      );\n    if (request.res) {\n      request.res.setHeader('Set-Cookie', [accessTokenCookie]);\n    }\n\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwoFactorAuthenticationService.html":{"url":"injectables/TwoFactorAuthenticationService.html","title":"injectable - TwoFactorAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TwoFactorAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/twoFactor/twoFactorAuthentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTwoFactorAuthenticationSecret\n                            \n                            \n                                    Public\n                                    Async\n                                isTwoFactorAuthenticationCodeValid\n                            \n                            \n                                    Public\n                                    Async\n                                pipeQrCodeStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generateTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorAuthenticationSecret(user: UsersEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UsersEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        isTwoFactorAuthenticationCodeValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: UsersEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    twoFactorAuthenticationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UsersEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        pipeQrCodeStream\n                        \n                    \n                \n            \n            \n                \n                    \n                    pipeQrCodeStream(stream: Response, otpauthUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otpauthUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IQrCodeStream } from './../interfaces/qrCodeStream.interface';\nimport { I2faGenerate } from './../interfaces/2faGenerate.interface';\nimport { Injectable, BadRequestException } from '@nestjs/common';\nimport { authenticator } from 'otplib';\nimport { toFileStream } from 'qrcode';\nimport { Response } from 'express';\nimport { UsersEntity } from '../../users/users.entity';\nimport { UsersService } from '../../users/users.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class TwoFactorAuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {}\n  // DONE\n  public async generateTwoFactorAuthenticationSecret(\n    user: UsersEntity,\n  ): Promise {\n    const secret = authenticator.generateSecret();\n    const issuer = this.configService.get('TWO_FACTOR_AUTHENTICATION_APP_NAME');\n    const otpauthUrl = authenticator.keyuri(user.email, issuer, secret);\n\n    await this.usersService.setTwoFactorAuthenticationSecret(secret, user.id);\n\n    return {\n      secret,\n      otpauthUrl,\n    };\n  }\n  // DONE\n  public async isTwoFactorAuthenticationCodeValid(\n    twoFactorAuthenticationCode: string,\n    user: UsersEntity,\n  ): Promise {\n    if (user.twoFactorAuthenticationSecret) {\n      const secretKey: any = user.twoFactorAuthenticationSecret;\n      return authenticator.verify({\n        token: twoFactorAuthenticationCode,\n        secret: secretKey,\n      });\n    } else {\n      throw new BadRequestException(\n        'Что-то пошло не так в блоке isTwoFactorAuthenticationCodeValid',\n      );\n    }\n  }\n  // DONE\n  public async pipeQrCodeStream(\n    stream: Response,\n    otpauthUrl: string,\n  ): Promise {\n    return toFileStream(stream, otpauthUrl);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCompanyDto.html":{"url":"classes/UpdateCompanyDto.html","title":"class - UpdateCompanyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCompanyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/dto/update-company.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                companyName\n                            \n                            \n                                    Optional\n                                companyTelephoneNumbers\n                            \n                            \n                                    Optional\n                                shipmentAdditionalHouseNumber\n                            \n                            \n                                    Optional\n                                shipmentCity\n                            \n                            \n                                    Optional\n                                shipmentHouseNumber\n                            \n                            \n                                    Optional\n                                shipmentOffice\n                            \n                            \n                                    Optional\n                                shipmentStreet\n                            \n                            \n                                taxpayerIdentificationNumber\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        companyName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ООО \"СПМК\"', description: 'Название компании'})@ApiPropertyOptional()@StringValidation()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/update-company.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        companyTelephoneNumbers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '89998887766', description: 'Телефон компании'})@ApiPropertyOptional()@StringValidation()@PhoneValidation()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/update-company.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        shipmentAdditionalHouseNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Корпус 5', description: 'Дополнительные данные для доставки'})@ApiPropertyOptional()@IsOptional()@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/update-company.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        shipmentCity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Красноярск', description: 'Город доставки'})@ApiPropertyOptional()@StringValidation()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/update-company.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        shipmentHouseNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '20В', description: 'Дом доставки'})@ApiPropertyOptional()@StringValidation()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/update-company.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        shipmentOffice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '211', description: 'Офис доставки'})@ApiPropertyOptional()@StringValidation()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/update-company.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        shipmentStreet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Баумана', description: 'Улица доставки'})@ApiPropertyOptional()@StringValidation()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/update-company.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        taxpayerIdentificationNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2460113920', description: 'ИНН компании'})@IsNotEmpty({message: isNotEmptyMessage})@StringValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/update-company.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '01.01.2022', description: 'Дата обновления сущности'})@ApiPropertyOptional()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/update-company.dto.ts:88\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\nimport { PhoneValidation } from '../../utils/validation/isPhoneValid.validation';\nimport { isNotEmptyMessage } from '../../utils/repeatableConsts/isNotEmptyMessage';\nimport { StringValidation } from '../../utils/validation/isString.validation';\n\nexport class UpdateCompanyDto {\n  @ApiProperty({\n    example: 'ООО \"СПМК\"',\n    description: 'Название компании',\n  })\n  @ApiPropertyOptional()\n  @StringValidation()\n  @IsOptional()\n  companyName?: string;\n\n  @ApiProperty({\n    example: '2460113920',\n    description: 'ИНН компании',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @StringValidation()\n  taxpayerIdentificationNumber!: string;\n\n  @ApiProperty({\n    example: '89998887766',\n    description: 'Телефон компании',\n  })\n  @ApiPropertyOptional()\n  @StringValidation()\n  @PhoneValidation()\n  @IsOptional()\n  companyTelephoneNumbers?: string;\n\n  @ApiProperty({\n    example: 'Красноярск',\n    description: 'Город доставки',\n  })\n  @ApiPropertyOptional()\n  @StringValidation()\n  @IsOptional()\n  shipmentCity?: string;\n\n  @ApiProperty({\n    example: 'Баумана',\n    description: 'Улица доставки',\n  })\n  @ApiPropertyOptional()\n  @StringValidation()\n  @IsOptional()\n  shipmentStreet?: string;\n\n  @ApiProperty({\n    example: '20В',\n    description: 'Дом доставки',\n  })\n  @ApiPropertyOptional()\n  @StringValidation()\n  @IsOptional()\n  shipmentHouseNumber?: string;\n\n  @ApiProperty({\n    example: 'Корпус 5',\n    description: 'Дополнительные данные для доставки',\n  })\n  @ApiPropertyOptional()\n  @IsOptional()\n  @StringValidation()\n  shipmentAdditionalHouseNumber?: string;\n\n  @ApiProperty({\n    example: '211',\n    description: 'Офис доставки',\n  })\n  @ApiPropertyOptional()\n  @StringValidation()\n  @IsOptional()\n  shipmentOffice?: string;\n  // updatedAt специально находится в DTO, т.к. обновление сущности идет через repository.update\n  @ApiProperty({\n    example: '01.01.2022',\n    description: 'Дата обновления сущности',\n  })\n  @ApiPropertyOptional()\n  @IsOptional()\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateManagerDto.html":{"url":"classes/UpdateManagerDto.html","title":"class - UpdateManagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateManagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/dto/updateManager.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'email@gmail.com', description: 'Почта менеджера'})@ApiPropertyOptional()@EmailValidation()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/dto/updateManager.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Big', description: 'Имя менеджера'})@ApiPropertyOptional()@StringValidation()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/dto/updateManager.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1', description: 'ID менеджера'})@IsNotEmpty({message: isNotEmptyMessage})@NumberValidation()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/dto/updateManager.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Lebowski', description: 'Фамилия менеджера'})@ApiPropertyOptional()@StringValidation()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/dto/updateManager.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+76664442200', description: 'Телефон менеджера'})@ApiPropertyOptional()@StringValidation()@PhoneValidation()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/managers/dto/updateManager.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional } from 'class-validator';\nimport { StringValidation } from '../../utils/validation/isString.validation';\nimport { EmailValidation } from '../../utils/validation/isEmailValid.validation';\nimport { isNotEmptyMessage } from '../../utils/repeatableConsts/isNotEmptyMessage';\nimport { NumberValidation } from '../../utils/validation/isNumber.validation';\nimport { PhoneValidation } from '../../utils/validation/isPhoneValid.validation';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class UpdateManagerDto {\n  @ApiProperty({\n    example: '1',\n    description: 'ID менеджера',\n  })\n  @IsNotEmpty({\n    message: isNotEmptyMessage,\n  })\n  @NumberValidation()\n  id!: number;\n\n  @ApiProperty({\n    example: 'email@gmail.com',\n    description: 'Почта менеджера',\n  })\n  @ApiPropertyOptional()\n  @EmailValidation()\n  @IsOptional()\n  email?: string;\n\n  @ApiProperty({\n    example: '+76664442200',\n    description: 'Телефон менеджера',\n  })\n  @ApiPropertyOptional()\n  @StringValidation()\n  @PhoneValidation()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @ApiProperty({\n    example: 'Big',\n    description: 'Имя менеджера',\n  })\n  @ApiPropertyOptional()\n  @StringValidation()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiProperty({\n    example: 'Lebowski',\n    description: 'Фамилия менеджера',\n  })\n  @ApiPropertyOptional()\n  @StringValidation()\n  @IsOptional()\n  lastName?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                addCompanyToUser\n                            \n                            \n                                    Public\n                                    Async\n                                addManagerToUser\n                            \n                            \n                                    Public\n                                    Async\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        addCompanyToUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCompanyToUser(companyAndUserData: AddCompanyToUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Добавить компанию пользователю'})@HttpCode(200)@Post('add-company')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyAndUserData\n                                    \n                                                AddCompanyToUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        addManagerToUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addManagerToUser(managerAndUserData: AddManagerToUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Добавить менеджера пользователю'})@HttpCode(200)@Post('add-manager')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    managerAndUserData\n                                    \n                                                AddManagerToUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        test\n                        \n                    \n                \n            \n            \n                \n                    \n                    test(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('test')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AddManagerToUserDto } from './dto/addManagerToUser';\nimport { AddCompanyToUserDto } from './dto/addCompanyToUser';\nimport {\n  Controller,\n  Post,\n  Body,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  HttpCode,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Controller('users')\n@ApiTags('Пользователи')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n  // TODO - убрать из пользователи эти методы\n  @ApiOperation({\n    description: 'Добавить компанию пользователю',\n  })\n  @HttpCode(200)\n  @Post('add-company')\n  public async addCompanyToUser(\n    @Body() companyAndUserData: AddCompanyToUserDto,\n  ) {\n    return await this.usersService.addCompanyToUser(companyAndUserData);\n  }\n  // TODO - убрать из пользователи эти методы\n  @ApiOperation({\n    description: 'Добавить менеджера пользователю',\n  })\n  @HttpCode(200)\n  @Post('add-manager')\n  public async addManagerToUser(\n    @Body() managerAndUserData: AddManagerToUserDto,\n  ) {\n    return await this.usersService.addManagerToUser(managerAndUserData);\n  }\n\n  @Post('test')\n  public async test(@Body() email: string) {\n    const foundUser = this.usersService.getByEmail(email);\n    return foundUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UsersEntity.html":{"url":"entities/UsersEntity.html","title":"entity - UsersEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UsersEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                company\n                            \n                            \n                                createdAt\n                            \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                firstName\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                isEmailConfirmed\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationEnabled\n                            \n                            \n                                    Public\n                                    Optional\n                                lastName\n                            \n                            \n                                    Public\n                                    Optional\n                                manager\n                            \n                            \n                                    Public\n                                    Optional\n                                orders\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                personalDiscount\n                            \n                            \n                                    Public\n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    Public\n                                role\n                            \n                            \n                                    Public\n                                    Optional\n                                twoFactorAuthenticationSecret\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CompaniesEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Сущность компании', description: 'Many To One', nullable: true, type: CompaniesEntity})@ManyToOne(undefined, company => company.users, {cascade: true, onDelete: 'SET NULL'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '01.01.2021', description: 'Дата создания сущности'})@CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:182\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ХХХХХ', description: 'Хешированный токен', nullable: true})@Column({type: 'text', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'mail.@mail.ru', description: 'Почта пользователя'})@Column({type: 'text', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Pavel', description: 'Имя пользователя'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1', description: 'Генерирующийся ID'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'true', description: 'Подтвержден ли email', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isTwoFactorAuthenticationEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'true', description: 'Включен ли 2FA', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Lebovski', description: 'Фамилия пользователя', nullable: true})@Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        manager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ManagersEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Сущность менеджера', description: 'Many To One', nullable: true, type: ManagersEntity})@ManyToOne(undefined, manager => manager.users, {cascade: true, onDelete: 'SET NULL'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:166\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrdersEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Сущность заказа', description: 'One To Many', nullable: true, type: OrdersEntity})@OneToMany(undefined, orders => orders.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:175\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'verystrongpassword', description: 'Пароль пользователя', nullable: true})@Column({type: 'text', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        personalDiscount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '15', description: 'Скидка пользователя', nullable: true})@Column({type: 'int', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+79998884422', description: 'Телефон', nullable: true})@Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user', description: 'Роль пользователя'})@Column({type: 'enum', enum: UserRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twoFactorAuthenticationSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'secret', description: 'Секрет 2FA', nullable: true})@Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:119\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '01.01.2021', description: 'Дата обновления сущности', nullable: true})@Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:193\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { ManagersEntity } from './../managers/managers.entity';\nimport {\n  Column,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  ManyToOne,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { OrdersEntity } from '../orders/orders.entity';\nimport { CompaniesEntity } from '../companies/companies.entity';\nimport { UserRole } from './roles/role.enum';\n\n@Entity('users')\nexport class UsersEntity {\n  @ApiProperty({\n    example: '1',\n    description: 'Генерирующийся ID',\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiProperty({\n    example: 'mail.@mail.ru',\n    description: 'Почта пользователя',\n  })\n  @Column({\n    type: 'text',\n    unique: true,\n  })\n  public email!: string;\n\n  @ApiProperty({\n    example: '+79998884422',\n    description: 'Телефон',\n    nullable: true,\n  })\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  public phoneNumber?: string;\n\n  @ApiProperty({\n    example: 'Pavel',\n    description: 'Имя пользователя',\n  })\n  @Column({ type: 'text' })\n  public firstName!: string;\n\n  @ApiProperty({\n    example: 'Lebovski',\n    description: 'Фамилия пользователя',\n    nullable: true,\n  })\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  public lastName?: string;\n\n  @ApiProperty({\n    example: 'verystrongpassword',\n    description: 'Пароль пользователя',\n    nullable: true,\n  })\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  @Exclude()\n  public password?: string;\n\n  @ApiProperty({\n    example: '15',\n    description: 'Скидка пользователя',\n    nullable: true,\n  })\n  @Column({\n    type: 'int',\n    nullable: true,\n  })\n  public personalDiscount?: number;\n\n  @ApiProperty({\n    example: 'user',\n    description: 'Роль пользователя',\n  })\n  @Column({\n    type: 'enum',\n    enum: UserRole,\n    default: UserRole.User,\n  })\n  public role!: UserRole;\n\n  @ApiProperty({\n    example: 'ХХХХХ',\n    description: 'Хешированный токен',\n    nullable: true,\n  })\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  @Exclude()\n  public currentHashedRefreshToken?: string | null;\n\n  @ApiProperty({\n    example: 'secret',\n    description: 'Секрет 2FA',\n    nullable: true,\n  })\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  public twoFactorAuthenticationSecret?: string;\n\n  @ApiProperty({\n    example: 'true',\n    description: 'Включен ли 2FA',\n    default: false,\n  })\n  @Column({\n    type: 'boolean',\n    default: false,\n  })\n  public isTwoFactorAuthenticationEnabled!: boolean;\n\n  @ApiProperty({\n    example: 'true',\n    description: 'Подтвержден ли email',\n    default: false,\n  })\n  @Column({\n    type: 'boolean',\n    default: false,\n  })\n  public isEmailConfirmed!: boolean;\n\n  @ApiProperty({\n    example: 'Сущность компании',\n    description: 'Many To One',\n    nullable: true,\n    type: CompaniesEntity,\n  })\n  @ManyToOne(\n    () => CompaniesEntity,\n    (company: CompaniesEntity) => company.users,\n    { cascade: true, onDelete: 'SET NULL' },\n  )\n  public company?: CompaniesEntity;\n\n  @ApiProperty({\n    example: 'Сущность менеджера',\n    description: 'Many To One',\n    nullable: true,\n    type: ManagersEntity,\n  })\n  @ManyToOne(() => ManagersEntity, (manager: ManagersEntity) => manager.users, {\n    cascade: true,\n    onDelete: 'SET NULL',\n  })\n  public manager?: ManagersEntity;\n\n  @ApiProperty({\n    example: 'Сущность заказа',\n    description: 'One To Many',\n    nullable: true,\n    type: OrdersEntity,\n  })\n  @OneToMany(() => OrdersEntity, (orders: OrdersEntity) => orders.user)\n  public orders?: OrdersEntity[];\n\n  @ApiProperty({\n    example: '01.01.2021',\n    description: 'Дата создания сущности',\n  })\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt!: Date;\n\n  @ApiProperty({\n    example: '01.01.2021',\n    description: 'Дата обновления сущности',\n    nullable: true,\n  })\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nCompaniesModule\n\nCompaniesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCompaniesModule->UsersModule\n\n\n\n\n\nManagersModule\n\nManagersModule\n\nUsersModule -->\n\nManagersModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CompaniesModule\n                        \n                        \n                            ManagersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ManagersModule } from './../managers/managers.module';\nimport { CompaniesModule } from './../companies/companies.module';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersEntity } from './users.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UsersEntity]),\n    ConfigModule,\n    CompaniesModule,\n    ManagersModule,\n  ],\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                addCompanyToUser\n                            \n                            \n                                    Public\n                                    Async\n                                addManagerToUser\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                markEmailAsConfirmed\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                            \n                                    Async\n                                setTwoFactorAuthenticationSecret\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, companyService: CompaniesService, managerService: ManagersService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        companyService\n                                                  \n                                                        \n                                                                        CompaniesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        managerService\n                                                  \n                                                        \n                                                                        ManagersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        addCompanyToUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCompanyToUser(companyAndUserData: AddCompanyToUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyAndUserData\n                                    \n                                                AddCompanyToUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        addManagerToUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addManagerToUser(managerAndUserData: AddManagerToUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    managerAndUserData\n                                    \n                                                AddManagerToUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markEmailAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markEmailAsConfirmed(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTwoFactorAuthenticationSecret(secret: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AddManagerToUserDto } from './dto/addManagerToUser';\nimport { AddCompanyToUserDto } from './dto/addCompanyToUser';\nimport { ManagersEntity } from './../managers/managers.entity';\nimport { ManagersService } from './../managers/managers.service';\nimport { CompaniesEntity } from './../companies/companies.entity';\nimport { CompaniesService } from './../companies/companies.service';\nimport {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { UsersEntity } from './users.entity';\nimport { CreateUserDto } from './dto/createUser.dto';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(UsersEntity)\n    private readonly usersRepository: Repository,\n    private readonly companyService: CompaniesService,\n    private readonly managerService: ManagersService,\n  ) {}\n  // DONE\n  async markEmailAsConfirmed(email: string): Promise {\n    try {\n      const emailConfirmed = await this.usersRepository.update(\n        { email },\n        {\n          isEmailConfirmed: true,\n        },\n      );\n      return emailConfirmed;\n    } catch {\n      throw new BadRequestException(\n        'Что-то пошло не так (markEmailAsConfirmed)',\n      );\n    }\n  }\n  // DONE\n  async getByEmail(email: string): Promise {\n    const _user = await this.usersRepository.findOne({ email });\n    if (_user) {\n      return _user;\n    }\n    throw new HttpException(\n      'Пользователя с такой почтой не существует | User with this email does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n  // DONE\n  async create(userData: CreateUserDto): Promise {\n    const newUser = this.usersRepository.create(userData);\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n  // DONE\n  async getById(id: number): Promise {\n    const _user = await this.usersRepository.findOne({ id });\n    if (_user) {\n      return _user;\n    }\n    throw new HttpException(\n      'Пользователя с таким ID не существует | User with this id does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n  // DONE\n  async removeRefreshToken(userId: number): Promise {\n    await this.usersRepository.update(userId, {\n      currentHashedRefreshToken: null,\n    });\n  }\n  // DONE (убрал return)\n  async setTwoFactorAuthenticationSecret(\n    secret: string,\n    userId: number,\n  ): Promise {\n    await this.usersRepository.update(userId, {\n      twoFactorAuthenticationSecret: secret,\n    });\n  }\n  // DONE (сохранил return)\n  async turnOnTwoFactorAuthentication(userId: number): Promise {\n    return await this.usersRepository.update(userId, {\n      isTwoFactorAuthenticationEnabled: true,\n    });\n  }\n  // DONE\n  async getUserIfRefreshTokenMatches(\n    refreshToken: string,\n    userId: number,\n  ): Promise {\n    const user = await this.getById(userId);\n    const comparePassword: any = user.currentHashedRefreshToken;\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      comparePassword,\n    );\n    if (isRefreshTokenMatching) {\n      return user;\n    } else {\n      throw new BadRequestException();\n    }\n  }\n  // DONE\n  async setCurrentRefreshToken(\n    refreshToken: string,\n    userId: number,\n  ): Promise {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(userId, {\n      currentHashedRefreshToken,\n    });\n  }\n  // NEW ONE\n  public async addCompanyToUser(\n    companyAndUserData: AddCompanyToUserDto,\n  ): Promise {\n    const _foundUser = await this.usersRepository.findOne({\n      where: { email: companyAndUserData.userEmail },\n      relations: ['company'],\n    });\n    const _foundCompany: CompaniesEntity =\n      await this.companyService.findCompanyByTaxpayerNumber(\n        companyAndUserData.taxpayerIdentificationNumber,\n      );\n    if (_foundUser) {\n      _foundUser.company = _foundCompany;\n      const updatedUser = await this.usersRepository.save(_foundUser);\n      return updatedUser;\n    }\n  }\n  // NEW ONE\n  public async addManagerToUser(\n    managerAndUserData: AddManagerToUserDto,\n  ): Promise {\n    const _foundUser = await this.usersRepository.findOne({\n      where: { email: managerAndUserData.userEmail },\n      relations: ['manager'],\n    });\n    const _foundManager: ManagersEntity = await this.managerService.findManager(\n      managerAndUserData.managerEmail,\n    );\n    if (_foundUser) {\n      _foundUser.manager = _foundManager;\n      const updatedUser = await this.usersRepository.save(_foundUser);\n      return updatedUser;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ViewAuthFilter.html":{"url":"classes/ViewAuthFilter.html","title":"class - ViewAuthFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ViewAuthFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exceptionFilters/unauthorized-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exceptionFilters/unauthorized-exception.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { UnauthorizedException } from '@nestjs/common';\n\n// Redirect for unauthorized users on GET requests\n@Catch(UnauthorizedException)\nexport class ViewAuthFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost): void {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const status = exception.getStatus();\n    response.status(status).redirect('/auth/registration');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-two-factor.guard.ts\n            \n            injectable\n            JwtTwoFactorGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/localAuthentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/interfaces/2faGenerate.interface.ts\n            \n            interface\n            I2faGenerate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/interfaces/cookiesWithJwt.interface.ts\n            \n            interface\n            ICookiesFromJwt\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/interfaces/qrCodeStream.interface.ts\n            \n            interface\n            IQrCodeStream\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/interfaces/renderAuthTemplate.interface.ts\n            \n            interface\n            IRenderTemplate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/interfaces/requestWithUser.interface.ts\n            \n            interface\n            IRequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/interfaces/tokenPayload.interface.ts\n            \n            interface\n            ITokenPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/jwt-two-factor.strategy.ts\n            \n            injectable\n            JwtTwoFactorStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/twoFactor/dto/twoFactorAuthenticationCode.dto.ts\n            \n            class\n            TwoFactorAuthenticationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/twoFactor/twoFactorAuthentication.controller.ts\n            \n            controller\n            TwoFactorAuthenticationController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/twoFactor/twoFactorAuthentication.service.ts\n            \n            injectable\n            TwoFactorAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/categories/categories.entity.ts\n            \n            entity\n            CategoriesEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/companies/companies.controller.ts\n            \n            controller\n            CompaniesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/companies/companies.entity.ts\n            \n            entity\n            CompaniesEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/companies/companies.service.ts\n            \n            injectable\n            CompaniesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/companies/dto/create-company.dto.ts\n            \n            class\n            CreateCompanyDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/companies/dto/update-company.dto.ts\n            \n            class\n            UpdateCompanyDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/emailConfirmation/dto/confirmEmail.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailConfirmation/emailConfirmation.controller.ts\n            \n            controller\n            EmailConfirmationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/emailConfirmation/emailConfirmation.service.ts\n            \n            injectable\n            EmailConfirmationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emailConfirmation/guards/emailConfirmation.guard.ts\n            \n            guard\n            EmailConfirmationGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailConfirmation/interfaces/verificationTokenPayload.interface.ts\n            \n            interface\n            IVerificationTokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/managers/dto/createManager.dto.ts\n            \n            class\n            CreateManagerDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/managers/dto/updateManager.dto.ts\n            \n            class\n            UpdateManagerDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/managers/manager.controller.ts\n            \n            controller\n            ManagersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/managers/managers.entity.ts\n            \n            entity\n            ManagersEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/managers/managers.service.ts\n            \n            injectable\n            ManagersService\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/orders/orders.entity.ts\n            \n            entity\n            OrdersEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pagination/pagination.dto.ts\n            \n            class\n            PaginationParams\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/prices/dto/create-price.dto.ts\n            \n            class\n            CreatePriceDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/prices/dto/fileUpload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/prices/prices.controller.ts\n            \n            controller\n            PricesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/prices/prices.controller.ts\n            \n            variable\n            PATH_NEWS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prices/prices.entity.ts\n            \n            entity\n            PricesEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prices/prices.service.ts\n            \n            injectable\n            PricesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/dto/createProduct.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/dto/updateProduct.dto.ts\n            \n            class\n            EditProductDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/products/products.entity.ts\n            \n            entity\n            ProductsEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/products/productsCache/httpCache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/products/productsCache/productsCacheKey.constant.ts\n            \n            variable\n            GET_PRODUCTS_CACHE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/products/productsSearch/interface/productSearchBody.interface.ts\n            \n            interface\n            ProductSearchBody\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/products/productsSearch/interface/productSearchResult.interface.ts\n            \n            interface\n            ProductSearchResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/products/productsSearch/productsSearch.service.ts\n            \n            injectable\n            ProductsSearchService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/sentry/sentry.interceptor.ts\n            \n            injectable\n            SentryInterceptor\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/sentry/sentry.module.ts\n            \n            variable\n            SENTRY_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sentry/sentry.service.ts\n            \n            injectable\n            SentryService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/addCompanyToUser.ts\n            \n            class\n            AddCompanyToUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/addManagerToUser.ts\n            \n            class\n            AddManagerToUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/createUser.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.entity.ts\n            \n            entity\n            UsersEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/utils/exceptionFilters/http-exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/exceptionFilters/models/http-exception-response.interface.ts\n            \n            interface\n            CustomHttpExceptionResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/exceptionFilters/models/http-exception-response.interface.ts\n            \n            interface\n            HttpExceptionResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/exceptionFilters/unauthorized-exception.filter.ts\n            \n            class\n            ViewAuthFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/fileloader/HelperFileLoader.ts\n            \n            class\n            HelperFileLoader\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/fileloader/HelperFileLoader.ts\n            \n            variable\n            path\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/fileloader/HelperFileLoader.ts\n            \n            variable\n            publicPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/interfaces/fileFormatForDownload.interface.ts\n            \n            interface\n            IFileFormatForDownload\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/interfaces/validationResultAsFunction.interface.ts\n            \n            interface\n            IValidationResultAsfunction\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/middlewares/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/repeatableConsts/isNotEmptyMessage.ts\n            \n            variable\n            isNotEmptyMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/validation/customIsNumber.validation.ts\n            \n            class\n            IsNumberConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/validation/customIsNumber.validation.ts\n            \n            function\n            CustomValidateIsNumber\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/validation/customValidation.pipe.ts\n            \n            injectable\n            CustomValidationPipe\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/validation/isEmailValid.validation.ts\n            \n            class\n            EmailValidationConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/validation/isEmailValid.validation.ts\n            \n            function\n            EmailValidation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/validation/isManagerExist.validation.ts\n            \n            class\n            IsManagerAlreadyExistConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/validation/isManagerExist.validation.ts\n            \n            function\n            IsManagerAlreadyExist\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/validation/isNumber.validation.ts\n            \n            class\n            NumberValidationConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/validation/isNumber.validation.ts\n            \n            function\n            NumberValidation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/validation/isPhoneValid.validation.ts\n            \n            class\n            PhoneValidationConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/validation/isPhoneValid.validation.ts\n            \n            function\n            PhoneValidation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/validation/isString.validation.ts\n            \n            class\n            StringValidationConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/validation/isString.validation.ts\n            \n            function\n            StringValidation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/validation/isUserExist.validation.ts\n            \n            class\n            IsUserAlreadyExistConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/validation/isUserExist.validation.ts\n            \n            function\n            IsUserAlreadyExist\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/validation/passwordLength.validation.ts\n            \n            class\n            CustomPasswordLengthConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/validation/passwordLength.validation.ts\n            \n            function\n            CustomPasswordLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/manager.mock.ts\n            \n            variable\n            mockedManager\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @elastic/elasticsearch : ^7.9.0\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/elasticsearch : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            @sentry/node : ^6.19.3\n        \n            @sentry/tracing : ^6.19.3\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/cookie-parser : ^1.4.2\n        \n            @types/hapi__joi : ^17.1.8\n        \n            @types/nodemailer : ^6.4.4\n        \n            @types/passport-jwt : ^3.0.6\n        \n            @types/passport-local : ^1.0.34\n        \n            @types/qrcode : ^1.4.2\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^3.6.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            express-handlebars : ^6.0.2\n        \n            hbs : ^4.2.0\n        \n            nodemailer : ^6.7.2\n        \n            otplib : ^12.0.1\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.3\n        \n            qrcode : ^1.5.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.43\n        \n            xlsx : ^0.18.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            orderPayment   (src/.../orders.enum.ts)\n                        \n                        \n                            orderRecipient   (src/.../orders.enum.ts)\n                        \n                        \n                            orderShipment   (src/.../orders.enum.ts)\n                        \n                        \n                            UserRole   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/orders/orders.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        orderPayment\n                    \n                \n                        \n                            \n                                 orderPaymentBill\n                            \n                        \n                        \n                            \n                                Value : orderPaymentBill\n                            \n                        \n                        \n                            \n                                 orderPaymentCash\n                            \n                        \n                        \n                            \n                                Value : orderPaymentCash\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        orderRecipient\n                    \n                \n                        \n                            \n                                 orderRecipientHuman\n                            \n                        \n                        \n                            \n                                Value : orderRecipientHuman\n                            \n                        \n                        \n                            \n                                 orderRecipientCompany\n                            \n                        \n                        \n                            \n                                Value : orderRecipientCompany\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        orderShipment\n                    \n                \n                        \n                            \n                                 orderShipmentCity\n                            \n                        \n                        \n                            \n                                Value : orderShipmentCity\n                            \n                        \n                        \n                            \n                                 orderShipmentPickup\n                            \n                        \n                        \n                            \n                                Value : orderShipmentPickup\n                            \n                        \n                        \n                            \n                                 orderShipmentTransportCompany\n                            \n                        \n                        \n                            \n                                Value : orderShipmentTransportCompany\n                            \n                        \n            \n        \n\n    src/users/roles/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            CustomPasswordLength   (src/.../passwordLength.validation.ts)\n                        \n                        \n                            CustomValidateIsNumber   (src/.../customIsNumber.validation.ts)\n                        \n                        \n                            EmailValidation   (src/.../isEmailValid.validation.ts)\n                        \n                        \n                            IsManagerAlreadyExist   (src/.../isManagerExist.validation.ts)\n                        \n                        \n                            IsUserAlreadyExist   (src/.../isUserExist.validation.ts)\n                        \n                        \n                            NumberValidation   (src/.../isNumber.validation.ts)\n                        \n                        \n                            PhoneValidation   (src/.../isPhoneValid.validation.ts)\n                        \n                        \n                            StringValidation   (src/.../isString.validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/validation/passwordLength.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CustomPasswordLength\n                        \n                    \n                \n            \n            \n                \nCustomPasswordLength(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IValidationResultAsfunction\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/utils/validation/customIsNumber.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CustomValidateIsNumber\n                        \n                    \n                \n            \n            \n                \nCustomValidateIsNumber(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/validation/isEmailValid.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EmailValidation\n                        \n                    \n                \n            \n            \n                \nEmailValidation(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/validation/isManagerExist.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsManagerAlreadyExist\n                        \n                    \n                \n            \n            \n                \nIsManagerAlreadyExist(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/validation/isUserExist.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsUserAlreadyExist\n                        \n                    \n                \n            \n            \n                \nIsUserAlreadyExist(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/validation/isNumber.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NumberValidation\n                        \n                    \n                \n            \n            \n                \nNumberValidation(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/validation/isPhoneValid.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PhoneValidation\n                        \n                    \n                \n            \n            \n                \nPhoneValidation(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/validation/isString.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StringValidation\n                        \n                    \n                \n            \n            \n                \nStringValidation(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBackend NestJS (PET PROJECT)\n\nНачну, как мне кажется, с самого главного - ответа на возможные вопросы (ниже)\n\nА почему некоторые вещи реализованы в разных исполнениях?\n\n\nПочему так странно написаны тесты?\n\n\nХотя бы ненужные комментарии удалил...\n\n\nУжасная же у вас местами бизнес-логика, сударь!\n\n\nПочему ошибки и комментарии на разных языках, ты что лингвине?\n\nЭто PET PROJECT, своеобразный тренировочный полигон, так что здесь все сделанно умышленно.\n\nБД - PostgreSQL\nORM - TypeORM\nCACHE - Redis (default login/password - root/root)\nSEARCH - Elastic stack\nLOGS - Sentry\nOpenAPI - Swagger (http://localhost:3000/api)\n\nПредварительная настройка\n\nВесь проект упакован в docker образ, поэтому нужно предварительно сделать пару вещей:\n.env.example практически заполнен, осталась всего пара полей\n\nEMAIL_SERVICE=\nEMAIL_USER=\nEMAIL_PASSWORD=\n\nЕсли нет необходимости тестировать отправку писем при регистрации, можете закомментировать строку с sendVerificationLink в src/authentication/authentication.controller.ts\nПри создание БД поле host name/address заполняется IP адресом, который можно получить командами docker ps -> docker inspect [POSTGRES CONTAINER ID]\nЛоги пишутся в SENTRY, поэтому нужно или прописать свой DSN, или отключить его в src/app.module.ts\nSentryModule.forRoot({\n  dsn: 'https://2a32b564d67a4cc0a94d3e4ab5716847@o1182144.ingest.sentry.io/6327156', Если вы выбрали вариант \"к черту sentry\", то нужно будет еще убрать middleware с AppModule\nexport class AppModule {\nconfigure(consumer: MiddlewareConsumer): void {\n    consumer.apply(Sentry.Handlers.requestHandler()).forRoutes({\n    path: '*',\n    method: RequestMethod.ALL,\n    });\n}\n}Опции \"строгости\" в tsconfig.json ВКЛЮЧЕНЫ, учитывайте это!\nЗапуск и тестирование\n\nСтруктура проекта:\n\nnpm run documentation:serve - посмотреть документацию Сompodoc\nпосмотреть OpenAPI (http://localhost:3000/api)\n\nТесты:\n\nnpm run test \nnpm run test:e2e\n\nЗапуск:\n\ndocker compose build\ndocker compose up -d\n\nTODO LIST\n\n\nChange keyset pagination to cursor pagination\nChange all useless ANY types\nWrite tests for 100% coverage\n2FA/Refresh/EmailConfirm/ViewAuthFilter/RBAC done, but never used\nExploring the microservices\nTry GraphQL instead of REST API\nTask Scheduling?\nHealth checks (Terminus and Datadog)\nJSDoc - 100% coverage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CompaniesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailConfirmationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ManagersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrdersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PricesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SentryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_CompaniesModule\n\n\n\ncluster_CompaniesModule_exports\n\n\n\ncluster_CompaniesModule_providers\n\n\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_imports\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_ManagersModule\n\n\n\ncluster_ManagersModule_exports\n\n\n\ncluster_ManagersModule_providers\n\n\n\ncluster_PricesModule\n\n\n\ncluster_PricesModule_exports\n\n\n\ncluster_PricesModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_SentryModule\n\n\n\ncluster_SentryModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCompaniesModule\n\nCompaniesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCompaniesModule->UsersModule\n\n\n\nAppModule -->\n\nCompaniesModule->AppModule\n\n\n\n\n\nCompaniesService \n\nCompaniesService \n\nCompaniesService  -->\n\nCompaniesModule->CompaniesService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nManagersModule\n\nManagersModule\n\nUsersModule -->\n\nManagersModule->UsersModule\n\n\n\nAppModule -->\n\nManagersModule->AppModule\n\n\n\n\n\nManagersService \n\nManagersService \n\nManagersService  -->\n\nManagersModule->ManagersService \n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nPricesModule\n\nPricesModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nPricesModule->ProductsModule\n\n\n\nAppModule -->\n\nPricesModule->AppModule\n\n\n\n\n\nPricesService \n\nPricesService \n\nPricesService  -->\n\nPricesModule->PricesService \n\n\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nSearchModule\n\nSearchModule\n\nProductsModule -->\n\nSearchModule->ProductsModule\n\n\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSentryModule\n\nSentryModule\n\nAppModule -->\n\nSentryModule->AppModule\n\n\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\nCompaniesService\n\nCompaniesService\n\nCompaniesModule -->\n\nCompaniesService->CompaniesModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nManagersService\n\nManagersService\n\nManagersModule -->\n\nManagersService->ManagersModule\n\n\n\n\n\nPricesService\n\nPricesService\n\nPricesModule -->\n\nPricesService->PricesModule\n\n\n\n\n\nProductsSearchService\n\nProductsSearchService\n\nProductsModule -->\n\nProductsSearchService->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nSentryService\n\nSentryService\n\nSentryModule -->\n\nSentryService->SentryModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        14 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    23 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    25 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    13 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : pet-project-backend-nestjs\n        \n            License : UNLICENSED\n        \n            Author : Pavel Leonovich\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FileFilterCallback   (src/.../fileLoader.types.ts)\n                        \n                        \n                            FileNameAndPathCallback   (src/.../fileLoader.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/types/fileLoader.types.ts\n    \n    \n        \n            \n                \n                    \n                    FileFilterCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FileNameAndPathCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GET_PRODUCTS_CACHE_KEY   (src/.../productsCacheKey.constant.ts)\n                        \n                        \n                            isNotEmptyMessage   (src/.../isNotEmptyMessage.ts)\n                        \n                        \n                            mockedManager   (test/.../manager.mock.ts)\n                        \n                        \n                            path   (src/.../HelperFileLoader.ts)\n                        \n                        \n                            PATH_NEWS   (src/.../prices.controller.ts)\n                        \n                        \n                            publicPath   (src/.../HelperFileLoader.ts)\n                        \n                        \n                            SENTRY_OPTIONS   (src/.../sentry.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/products/productsCache/productsCacheKey.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GET_PRODUCTS_CACHE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GET_PRODUCTS_CACHE'\n                    \n                \n\n\n        \n    \n\n    src/utils/repeatableConsts/isNotEmptyMessage.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isNotEmptyMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Это поле обязательно для заполнения | This field is required'\n                    \n                \n\n\n        \n    \n\n    test/manager.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ManagersEntity\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: expect.any(Number),\n  email: 'blunshtelega@gmail.com',\n  phoneNumber: '+79998885544',\n  firstName: 'Pavel',\n  lastName: 'Leonovich',\n  createdAt: expect.any(Date),\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/fileloader/HelperFileLoader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : publicPath\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publicPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : './public'\n                    \n                \n\n\n        \n    \n\n    src/prices/prices.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PATH_NEWS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/prices/'\n                    \n                \n\n\n        \n    \n\n    src/sentry/sentry.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SENTRY_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SENTRY_OPTIONS'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
